/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CredentialsList200Response,
  StoredCredential,
} from '../models/index';
import {
    CredentialsList200ResponseFromJSON,
    CredentialsList200ResponseToJSON,
    StoredCredentialFromJSON,
    StoredCredentialToJSON,
} from '../models/index';

export interface CredentialsCreateRequest {
    data: Omit<StoredCredential, 'id'|'url'>;
}

export interface CredentialsDeleteRequest {
    credentialId: string;
}

export interface CredentialsListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface CredentialsPartialUpdateRequest {
    credentialId: string;
    data: Omit<StoredCredential, 'id'|'url'>;
}

export interface CredentialsReadRequest {
    credentialId: string;
}

export interface CredentialsUpdateRequest {
    credentialId: string;
    data: Omit<StoredCredential, 'id'|'url'>;
}

/**
 * 
 */
export class CredentialsApi extends runtime.BaseAPI {

    /**
     * Create a new credential.
     */
    async credentialsCreateRaw(requestParameters: CredentialsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoredCredential>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling credentialsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/credentials/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoredCredentialToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoredCredentialFromJSON(jsonValue));
    }

    /**
     * Create a new credential.
     */
    async credentialsCreate(requestParameters: CredentialsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoredCredential> {
        const response = await this.credentialsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected credential.
     */
    async credentialsDeleteRaw(requestParameters: CredentialsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['credentialId'] == null) {
            throw new runtime.RequiredError(
                'credentialId',
                'Required parameter "credentialId" was null or undefined when calling credentialsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/credentials/{credential_id}/`;
        urlPath = urlPath.replace(`{${"credential_id"}}`, encodeURIComponent(String(requestParameters['credentialId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected credential.
     */
    async credentialsDelete(requestParameters: CredentialsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.credentialsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all the credentials.
     */
    async credentialsListRaw(requestParameters: CredentialsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CredentialsList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/credentials/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CredentialsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the credentials.
     */
    async credentialsList(requestParameters: CredentialsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CredentialsList200Response> {
        const response = await this.credentialsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected credential.
     */
    async credentialsPartialUpdateRaw(requestParameters: CredentialsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoredCredential>> {
        if (requestParameters['credentialId'] == null) {
            throw new runtime.RequiredError(
                'credentialId',
                'Required parameter "credentialId" was null or undefined when calling credentialsPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling credentialsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/credentials/{credential_id}/`;
        urlPath = urlPath.replace(`{${"credential_id"}}`, encodeURIComponent(String(requestParameters['credentialId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: StoredCredentialToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoredCredentialFromJSON(jsonValue));
    }

    /**
     * Edit the selected credential.
     */
    async credentialsPartialUpdate(requestParameters: CredentialsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoredCredential> {
        const response = await this.credentialsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the details of the selected credential.
     */
    async credentialsReadRaw(requestParameters: CredentialsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoredCredential>> {
        if (requestParameters['credentialId'] == null) {
            throw new runtime.RequiredError(
                'credentialId',
                'Required parameter "credentialId" was null or undefined when calling credentialsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/credentials/{credential_id}/`;
        urlPath = urlPath.replace(`{${"credential_id"}}`, encodeURIComponent(String(requestParameters['credentialId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoredCredentialFromJSON(jsonValue));
    }

    /**
     * Return the details of the selected credential.
     */
    async credentialsRead(requestParameters: CredentialsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoredCredential> {
        const response = await this.credentialsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected credential.
     */
    async credentialsUpdateRaw(requestParameters: CredentialsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoredCredential>> {
        if (requestParameters['credentialId'] == null) {
            throw new runtime.RequiredError(
                'credentialId',
                'Required parameter "credentialId" was null or undefined when calling credentialsUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling credentialsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/credentials/{credential_id}/`;
        urlPath = urlPath.replace(`{${"credential_id"}}`, encodeURIComponent(String(requestParameters['credentialId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StoredCredentialToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoredCredentialFromJSON(jsonValue));
    }

    /**
     * Edit the selected credential.
     */
    async credentialsUpdate(requestParameters: CredentialsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoredCredential> {
        const response = await this.credentialsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
