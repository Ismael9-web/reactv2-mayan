/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ACL,
  ACLPermissionAdd,
  ACLPermissionRemove,
  ErrorLogPartitionEntry,
  EventsList200Response,
  MailingProfileAction,
  ObjectTemplateSandbox,
  ObjectsAclsList200Response,
  ObjectsErrorsList200Response,
  ObjectsPermissionsList200Response,
  Permission,
} from '../models/index';
import {
    ACLFromJSON,
    ACLToJSON,
    ACLPermissionAddFromJSON,
    ACLPermissionAddToJSON,
    ACLPermissionRemoveFromJSON,
    ACLPermissionRemoveToJSON,
    ErrorLogPartitionEntryFromJSON,
    ErrorLogPartitionEntryToJSON,
    EventsList200ResponseFromJSON,
    EventsList200ResponseToJSON,
    MailingProfileActionFromJSON,
    MailingProfileActionToJSON,
    ObjectTemplateSandboxFromJSON,
    ObjectTemplateSandboxToJSON,
    ObjectsAclsList200ResponseFromJSON,
    ObjectsAclsList200ResponseToJSON,
    ObjectsErrorsList200ResponseFromJSON,
    ObjectsErrorsList200ResponseToJSON,
    ObjectsPermissionsList200ResponseFromJSON,
    ObjectsPermissionsList200ResponseToJSON,
    PermissionFromJSON,
    PermissionToJSON,
} from '../models/index';

export interface ObjectsAclsCreateRequest {
    appLabel: string;
    modelName: string;
    objectId: string;
    data: Omit<ACL, 'id'|'object_id'|'permissions_add_url'|'permissions_remove_url'|'permissions_url'|'url'>;
}

export interface ObjectsAclsDeleteRequest {
    appLabel: string;
    modelName: string;
    objectId: string;
    aclId: string;
}

export interface ObjectsAclsListRequest {
    appLabel: string;
    modelName: string;
    objectId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface ObjectsAclsPermissionsAddCreateRequest {
    appLabel: string;
    modelName: string;
    objectId: string;
    aclId: string;
    data: ACLPermissionAdd;
}

export interface ObjectsAclsPermissionsCreateRequest {
    appLabel: string;
    modelName: string;
    objectId: string;
    aclId: string;
    data: Omit<Permission, 'namespace'|'pk'|'label'>;
}

export interface ObjectsAclsPermissionsListRequest {
    appLabel: string;
    modelName: string;
    objectId: string;
    aclId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface ObjectsAclsPermissionsRemoveCreateRequest {
    appLabel: string;
    modelName: string;
    objectId: string;
    aclId: string;
    data: ACLPermissionRemove;
}

export interface ObjectsAclsReadRequest {
    appLabel: string;
    modelName: string;
    objectId: string;
    aclId: string;
}

export interface ObjectsErrorsDeleteRequest {
    appLabel: string;
    modelName: string;
    objectId: string;
    errorLogPartitionEntryId: string;
}

export interface ObjectsErrorsListRequest {
    appLabel: string;
    modelName: string;
    objectId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface ObjectsErrorsReadRequest {
    appLabel: string;
    modelName: string;
    objectId: string;
    errorLogPartitionEntryId: string;
}

export interface ObjectsEventsListRequest {
    appLabel: string;
    modelName: string;
    objectId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface ObjectsImageReadRequest {
    appLabel: string;
    modelName: string;
    objectId: string;
}

export interface ObjectsMailingAttachmentCreateRequest {
    appLabel: string;
    modelName: string;
    objectId: string;
    data: MailingProfileAction;
}

export interface ObjectsMailingLinkCreateRequest {
    appLabel: string;
    modelName: string;
    objectId: string;
    data: MailingProfileAction;
}

export interface ObjectsPermissionsListRequest {
    appLabel: string;
    modelName: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface ObjectsSandboxCreateRequest {
    appLabel: string;
    modelName: string;
    objectId: string;
    data: Omit<ObjectTemplateSandbox, 'result'>;
}

/**
 * 
 */
export class ObjectsApi extends runtime.BaseAPI {

    /**
     * Create a new access control list for the selected object.
     */
    async objectsAclsCreateRaw(requestParameters: ObjectsAclsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ACL>> {
        if (requestParameters['appLabel'] == null) {
            throw new runtime.RequiredError(
                'appLabel',
                'Required parameter "appLabel" was null or undefined when calling objectsAclsCreate().'
            );
        }

        if (requestParameters['modelName'] == null) {
            throw new runtime.RequiredError(
                'modelName',
                'Required parameter "modelName" was null or undefined when calling objectsAclsCreate().'
            );
        }

        if (requestParameters['objectId'] == null) {
            throw new runtime.RequiredError(
                'objectId',
                'Required parameter "objectId" was null or undefined when calling objectsAclsCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling objectsAclsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/objects/{app_label}/{model_name}/{object_id}/acls/`;
        urlPath = urlPath.replace(`{${"app_label"}}`, encodeURIComponent(String(requestParameters['appLabel'])));
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters['modelName'])));
        urlPath = urlPath.replace(`{${"object_id"}}`, encodeURIComponent(String(requestParameters['objectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ACLToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ACLFromJSON(jsonValue));
    }

    /**
     * Create a new access control list for the selected object.
     */
    async objectsAclsCreate(requestParameters: ObjectsAclsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ACL> {
        const response = await this.objectsAclsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected access control list.
     */
    async objectsAclsDeleteRaw(requestParameters: ObjectsAclsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appLabel'] == null) {
            throw new runtime.RequiredError(
                'appLabel',
                'Required parameter "appLabel" was null or undefined when calling objectsAclsDelete().'
            );
        }

        if (requestParameters['modelName'] == null) {
            throw new runtime.RequiredError(
                'modelName',
                'Required parameter "modelName" was null or undefined when calling objectsAclsDelete().'
            );
        }

        if (requestParameters['objectId'] == null) {
            throw new runtime.RequiredError(
                'objectId',
                'Required parameter "objectId" was null or undefined when calling objectsAclsDelete().'
            );
        }

        if (requestParameters['aclId'] == null) {
            throw new runtime.RequiredError(
                'aclId',
                'Required parameter "aclId" was null or undefined when calling objectsAclsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/objects/{app_label}/{model_name}/{object_id}/acls/{acl_id}/`;
        urlPath = urlPath.replace(`{${"app_label"}}`, encodeURIComponent(String(requestParameters['appLabel'])));
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters['modelName'])));
        urlPath = urlPath.replace(`{${"object_id"}}`, encodeURIComponent(String(requestParameters['objectId'])));
        urlPath = urlPath.replace(`{${"acl_id"}}`, encodeURIComponent(String(requestParameters['aclId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected access control list.
     */
    async objectsAclsDelete(requestParameters: ObjectsAclsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsAclsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all the object\'s access control lists
     */
    async objectsAclsListRaw(requestParameters: ObjectsAclsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectsAclsList200Response>> {
        if (requestParameters['appLabel'] == null) {
            throw new runtime.RequiredError(
                'appLabel',
                'Required parameter "appLabel" was null or undefined when calling objectsAclsList().'
            );
        }

        if (requestParameters['modelName'] == null) {
            throw new runtime.RequiredError(
                'modelName',
                'Required parameter "modelName" was null or undefined when calling objectsAclsList().'
            );
        }

        if (requestParameters['objectId'] == null) {
            throw new runtime.RequiredError(
                'objectId',
                'Required parameter "objectId" was null or undefined when calling objectsAclsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/objects/{app_label}/{model_name}/{object_id}/acls/`;
        urlPath = urlPath.replace(`{${"app_label"}}`, encodeURIComponent(String(requestParameters['appLabel'])));
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters['modelName'])));
        urlPath = urlPath.replace(`{${"object_id"}}`, encodeURIComponent(String(requestParameters['objectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectsAclsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the object\'s access control lists
     */
    async objectsAclsList(requestParameters: ObjectsAclsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectsAclsList200Response> {
        const response = await this.objectsAclsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a permission to an ACL.
     */
    async objectsAclsPermissionsAddCreateRaw(requestParameters: ObjectsAclsPermissionsAddCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ACLPermissionAdd>> {
        if (requestParameters['appLabel'] == null) {
            throw new runtime.RequiredError(
                'appLabel',
                'Required parameter "appLabel" was null or undefined when calling objectsAclsPermissionsAddCreate().'
            );
        }

        if (requestParameters['modelName'] == null) {
            throw new runtime.RequiredError(
                'modelName',
                'Required parameter "modelName" was null or undefined when calling objectsAclsPermissionsAddCreate().'
            );
        }

        if (requestParameters['objectId'] == null) {
            throw new runtime.RequiredError(
                'objectId',
                'Required parameter "objectId" was null or undefined when calling objectsAclsPermissionsAddCreate().'
            );
        }

        if (requestParameters['aclId'] == null) {
            throw new runtime.RequiredError(
                'aclId',
                'Required parameter "aclId" was null or undefined when calling objectsAclsPermissionsAddCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling objectsAclsPermissionsAddCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/objects/{app_label}/{model_name}/{object_id}/acls/{acl_id}/permissions/add/`;
        urlPath = urlPath.replace(`{${"app_label"}}`, encodeURIComponent(String(requestParameters['appLabel'])));
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters['modelName'])));
        urlPath = urlPath.replace(`{${"object_id"}}`, encodeURIComponent(String(requestParameters['objectId'])));
        urlPath = urlPath.replace(`{${"acl_id"}}`, encodeURIComponent(String(requestParameters['aclId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ACLPermissionAddToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ACLPermissionAddFromJSON(jsonValue));
    }

    /**
     * Add a permission to an ACL.
     */
    async objectsAclsPermissionsAddCreate(requestParameters: ObjectsAclsPermissionsAddCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ACLPermissionAdd> {
        const response = await this.objectsAclsPermissionsAddCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new permission to the selected access control list.
     */
    async objectsAclsPermissionsCreateRaw(requestParameters: ObjectsAclsPermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Permission>> {
        if (requestParameters['appLabel'] == null) {
            throw new runtime.RequiredError(
                'appLabel',
                'Required parameter "appLabel" was null or undefined when calling objectsAclsPermissionsCreate().'
            );
        }

        if (requestParameters['modelName'] == null) {
            throw new runtime.RequiredError(
                'modelName',
                'Required parameter "modelName" was null or undefined when calling objectsAclsPermissionsCreate().'
            );
        }

        if (requestParameters['objectId'] == null) {
            throw new runtime.RequiredError(
                'objectId',
                'Required parameter "objectId" was null or undefined when calling objectsAclsPermissionsCreate().'
            );
        }

        if (requestParameters['aclId'] == null) {
            throw new runtime.RequiredError(
                'aclId',
                'Required parameter "aclId" was null or undefined when calling objectsAclsPermissionsCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling objectsAclsPermissionsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/objects/{app_label}/{model_name}/{object_id}/acls/{acl_id}/permissions/`;
        urlPath = urlPath.replace(`{${"app_label"}}`, encodeURIComponent(String(requestParameters['appLabel'])));
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters['modelName'])));
        urlPath = urlPath.replace(`{${"object_id"}}`, encodeURIComponent(String(requestParameters['objectId'])));
        urlPath = urlPath.replace(`{${"acl_id"}}`, encodeURIComponent(String(requestParameters['aclId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     * Add a new permission to the selected access control list.
     */
    async objectsAclsPermissionsCreate(requestParameters: ObjectsAclsPermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Permission> {
        const response = await this.objectsAclsPermissionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the access control list permission list.
     */
    async objectsAclsPermissionsListRaw(requestParameters: ObjectsAclsPermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectsPermissionsList200Response>> {
        if (requestParameters['appLabel'] == null) {
            throw new runtime.RequiredError(
                'appLabel',
                'Required parameter "appLabel" was null or undefined when calling objectsAclsPermissionsList().'
            );
        }

        if (requestParameters['modelName'] == null) {
            throw new runtime.RequiredError(
                'modelName',
                'Required parameter "modelName" was null or undefined when calling objectsAclsPermissionsList().'
            );
        }

        if (requestParameters['objectId'] == null) {
            throw new runtime.RequiredError(
                'objectId',
                'Required parameter "objectId" was null or undefined when calling objectsAclsPermissionsList().'
            );
        }

        if (requestParameters['aclId'] == null) {
            throw new runtime.RequiredError(
                'aclId',
                'Required parameter "aclId" was null or undefined when calling objectsAclsPermissionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/objects/{app_label}/{model_name}/{object_id}/acls/{acl_id}/permissions/`;
        urlPath = urlPath.replace(`{${"app_label"}}`, encodeURIComponent(String(requestParameters['appLabel'])));
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters['modelName'])));
        urlPath = urlPath.replace(`{${"object_id"}}`, encodeURIComponent(String(requestParameters['objectId'])));
        urlPath = urlPath.replace(`{${"acl_id"}}`, encodeURIComponent(String(requestParameters['aclId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectsPermissionsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the access control list permission list.
     */
    async objectsAclsPermissionsList(requestParameters: ObjectsAclsPermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectsPermissionsList200Response> {
        const response = await this.objectsAclsPermissionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a permission from an ACL.
     */
    async objectsAclsPermissionsRemoveCreateRaw(requestParameters: ObjectsAclsPermissionsRemoveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ACLPermissionRemove>> {
        if (requestParameters['appLabel'] == null) {
            throw new runtime.RequiredError(
                'appLabel',
                'Required parameter "appLabel" was null or undefined when calling objectsAclsPermissionsRemoveCreate().'
            );
        }

        if (requestParameters['modelName'] == null) {
            throw new runtime.RequiredError(
                'modelName',
                'Required parameter "modelName" was null or undefined when calling objectsAclsPermissionsRemoveCreate().'
            );
        }

        if (requestParameters['objectId'] == null) {
            throw new runtime.RequiredError(
                'objectId',
                'Required parameter "objectId" was null or undefined when calling objectsAclsPermissionsRemoveCreate().'
            );
        }

        if (requestParameters['aclId'] == null) {
            throw new runtime.RequiredError(
                'aclId',
                'Required parameter "aclId" was null or undefined when calling objectsAclsPermissionsRemoveCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling objectsAclsPermissionsRemoveCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/objects/{app_label}/{model_name}/{object_id}/acls/{acl_id}/permissions/remove/`;
        urlPath = urlPath.replace(`{${"app_label"}}`, encodeURIComponent(String(requestParameters['appLabel'])));
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters['modelName'])));
        urlPath = urlPath.replace(`{${"object_id"}}`, encodeURIComponent(String(requestParameters['objectId'])));
        urlPath = urlPath.replace(`{${"acl_id"}}`, encodeURIComponent(String(requestParameters['aclId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ACLPermissionRemoveToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ACLPermissionRemoveFromJSON(jsonValue));
    }

    /**
     * Remove a permission from an ACL.
     */
    async objectsAclsPermissionsRemoveCreate(requestParameters: ObjectsAclsPermissionsRemoveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ACLPermissionRemove> {
        const response = await this.objectsAclsPermissionsRemoveCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the details of the selected access control list.
     */
    async objectsAclsReadRaw(requestParameters: ObjectsAclsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ACL>> {
        if (requestParameters['appLabel'] == null) {
            throw new runtime.RequiredError(
                'appLabel',
                'Required parameter "appLabel" was null or undefined when calling objectsAclsRead().'
            );
        }

        if (requestParameters['modelName'] == null) {
            throw new runtime.RequiredError(
                'modelName',
                'Required parameter "modelName" was null or undefined when calling objectsAclsRead().'
            );
        }

        if (requestParameters['objectId'] == null) {
            throw new runtime.RequiredError(
                'objectId',
                'Required parameter "objectId" was null or undefined when calling objectsAclsRead().'
            );
        }

        if (requestParameters['aclId'] == null) {
            throw new runtime.RequiredError(
                'aclId',
                'Required parameter "aclId" was null or undefined when calling objectsAclsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/objects/{app_label}/{model_name}/{object_id}/acls/{acl_id}/`;
        urlPath = urlPath.replace(`{${"app_label"}}`, encodeURIComponent(String(requestParameters['appLabel'])));
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters['modelName'])));
        urlPath = urlPath.replace(`{${"object_id"}}`, encodeURIComponent(String(requestParameters['objectId'])));
        urlPath = urlPath.replace(`{${"acl_id"}}`, encodeURIComponent(String(requestParameters['aclId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ACLFromJSON(jsonValue));
    }

    /**
     * Returns the details of the selected access control list.
     */
    async objectsAclsRead(requestParameters: ObjectsAclsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ACL> {
        const response = await this.objectsAclsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected error log entry.
     */
    async objectsErrorsDeleteRaw(requestParameters: ObjectsErrorsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appLabel'] == null) {
            throw new runtime.RequiredError(
                'appLabel',
                'Required parameter "appLabel" was null or undefined when calling objectsErrorsDelete().'
            );
        }

        if (requestParameters['modelName'] == null) {
            throw new runtime.RequiredError(
                'modelName',
                'Required parameter "modelName" was null or undefined when calling objectsErrorsDelete().'
            );
        }

        if (requestParameters['objectId'] == null) {
            throw new runtime.RequiredError(
                'objectId',
                'Required parameter "objectId" was null or undefined when calling objectsErrorsDelete().'
            );
        }

        if (requestParameters['errorLogPartitionEntryId'] == null) {
            throw new runtime.RequiredError(
                'errorLogPartitionEntryId',
                'Required parameter "errorLogPartitionEntryId" was null or undefined when calling objectsErrorsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/objects/{app_label}/{model_name}/{object_id}/errors/{error_log_partition_entry_id}/`;
        urlPath = urlPath.replace(`{${"app_label"}}`, encodeURIComponent(String(requestParameters['appLabel'])));
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters['modelName'])));
        urlPath = urlPath.replace(`{${"object_id"}}`, encodeURIComponent(String(requestParameters['objectId'])));
        urlPath = urlPath.replace(`{${"error_log_partition_entry_id"}}`, encodeURIComponent(String(requestParameters['errorLogPartitionEntryId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected error log entry.
     */
    async objectsErrorsDelete(requestParameters: ObjectsErrorsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsErrorsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all the object\'s error log entries
     */
    async objectsErrorsListRaw(requestParameters: ObjectsErrorsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectsErrorsList200Response>> {
        if (requestParameters['appLabel'] == null) {
            throw new runtime.RequiredError(
                'appLabel',
                'Required parameter "appLabel" was null or undefined when calling objectsErrorsList().'
            );
        }

        if (requestParameters['modelName'] == null) {
            throw new runtime.RequiredError(
                'modelName',
                'Required parameter "modelName" was null or undefined when calling objectsErrorsList().'
            );
        }

        if (requestParameters['objectId'] == null) {
            throw new runtime.RequiredError(
                'objectId',
                'Required parameter "objectId" was null or undefined when calling objectsErrorsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/objects/{app_label}/{model_name}/{object_id}/errors/`;
        urlPath = urlPath.replace(`{${"app_label"}}`, encodeURIComponent(String(requestParameters['appLabel'])));
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters['modelName'])));
        urlPath = urlPath.replace(`{${"object_id"}}`, encodeURIComponent(String(requestParameters['objectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectsErrorsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the object\'s error log entries
     */
    async objectsErrorsList(requestParameters: ObjectsErrorsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectsErrorsList200Response> {
        const response = await this.objectsErrorsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the details of the selected error log entry.
     */
    async objectsErrorsReadRaw(requestParameters: ObjectsErrorsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ErrorLogPartitionEntry>> {
        if (requestParameters['appLabel'] == null) {
            throw new runtime.RequiredError(
                'appLabel',
                'Required parameter "appLabel" was null or undefined when calling objectsErrorsRead().'
            );
        }

        if (requestParameters['modelName'] == null) {
            throw new runtime.RequiredError(
                'modelName',
                'Required parameter "modelName" was null or undefined when calling objectsErrorsRead().'
            );
        }

        if (requestParameters['objectId'] == null) {
            throw new runtime.RequiredError(
                'objectId',
                'Required parameter "objectId" was null or undefined when calling objectsErrorsRead().'
            );
        }

        if (requestParameters['errorLogPartitionEntryId'] == null) {
            throw new runtime.RequiredError(
                'errorLogPartitionEntryId',
                'Required parameter "errorLogPartitionEntryId" was null or undefined when calling objectsErrorsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/objects/{app_label}/{model_name}/{object_id}/errors/{error_log_partition_entry_id}/`;
        urlPath = urlPath.replace(`{${"app_label"}}`, encodeURIComponent(String(requestParameters['appLabel'])));
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters['modelName'])));
        urlPath = urlPath.replace(`{${"object_id"}}`, encodeURIComponent(String(requestParameters['objectId'])));
        urlPath = urlPath.replace(`{${"error_log_partition_entry_id"}}`, encodeURIComponent(String(requestParameters['errorLogPartitionEntryId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ErrorLogPartitionEntryFromJSON(jsonValue));
    }

    /**
     * Returns the details of the selected error log entry.
     */
    async objectsErrorsRead(requestParameters: ObjectsErrorsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ErrorLogPartitionEntry> {
        const response = await this.objectsErrorsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a list of events for the specified object.
     */
    async objectsEventsListRaw(requestParameters: ObjectsEventsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventsList200Response>> {
        if (requestParameters['appLabel'] == null) {
            throw new runtime.RequiredError(
                'appLabel',
                'Required parameter "appLabel" was null or undefined when calling objectsEventsList().'
            );
        }

        if (requestParameters['modelName'] == null) {
            throw new runtime.RequiredError(
                'modelName',
                'Required parameter "modelName" was null or undefined when calling objectsEventsList().'
            );
        }

        if (requestParameters['objectId'] == null) {
            throw new runtime.RequiredError(
                'objectId',
                'Required parameter "objectId" was null or undefined when calling objectsEventsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/objects/{app_label}/{model_name}/{object_id}/events/`;
        urlPath = urlPath.replace(`{${"app_label"}}`, encodeURIComponent(String(requestParameters['appLabel'])));
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters['modelName'])));
        urlPath = urlPath.replace(`{${"object_id"}}`, encodeURIComponent(String(requestParameters['objectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Return a list of events for the specified object.
     */
    async objectsEventsList(requestParameters: ObjectsEventsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventsList200Response> {
        const response = await this.objectsEventsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an image representation of the selected content object.
     */
    async objectsImageReadRaw(requestParameters: ObjectsImageReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appLabel'] == null) {
            throw new runtime.RequiredError(
                'appLabel',
                'Required parameter "appLabel" was null or undefined when calling objectsImageRead().'
            );
        }

        if (requestParameters['modelName'] == null) {
            throw new runtime.RequiredError(
                'modelName',
                'Required parameter "modelName" was null or undefined when calling objectsImageRead().'
            );
        }

        if (requestParameters['objectId'] == null) {
            throw new runtime.RequiredError(
                'objectId',
                'Required parameter "objectId" was null or undefined when calling objectsImageRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/objects/{app_label}/{model_name}/{object_id}/image/`;
        urlPath = urlPath.replace(`{${"app_label"}}`, encodeURIComponent(String(requestParameters['appLabel'])));
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters['modelName'])));
        urlPath = urlPath.replace(`{${"object_id"}}`, encodeURIComponent(String(requestParameters['objectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns an image representation of the selected content object.
     */
    async objectsImageRead(requestParameters: ObjectsImageReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsImageReadRaw(requestParameters, initOverrides);
    }

    /**
     * Send an object as attachment via email.
     */
    async objectsMailingAttachmentCreateRaw(requestParameters: ObjectsMailingAttachmentCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MailingProfileAction>> {
        if (requestParameters['appLabel'] == null) {
            throw new runtime.RequiredError(
                'appLabel',
                'Required parameter "appLabel" was null or undefined when calling objectsMailingAttachmentCreate().'
            );
        }

        if (requestParameters['modelName'] == null) {
            throw new runtime.RequiredError(
                'modelName',
                'Required parameter "modelName" was null or undefined when calling objectsMailingAttachmentCreate().'
            );
        }

        if (requestParameters['objectId'] == null) {
            throw new runtime.RequiredError(
                'objectId',
                'Required parameter "objectId" was null or undefined when calling objectsMailingAttachmentCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling objectsMailingAttachmentCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/objects/{app_label}/{model_name}/{object_id}/mailing/attachment/`;
        urlPath = urlPath.replace(`{${"app_label"}}`, encodeURIComponent(String(requestParameters['appLabel'])));
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters['modelName'])));
        urlPath = urlPath.replace(`{${"object_id"}}`, encodeURIComponent(String(requestParameters['objectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MailingProfileActionToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MailingProfileActionFromJSON(jsonValue));
    }

    /**
     * Send an object as attachment via email.
     */
    async objectsMailingAttachmentCreate(requestParameters: ObjectsMailingAttachmentCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MailingProfileAction> {
        const response = await this.objectsMailingAttachmentCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send an object link via email.
     */
    async objectsMailingLinkCreateRaw(requestParameters: ObjectsMailingLinkCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MailingProfileAction>> {
        if (requestParameters['appLabel'] == null) {
            throw new runtime.RequiredError(
                'appLabel',
                'Required parameter "appLabel" was null or undefined when calling objectsMailingLinkCreate().'
            );
        }

        if (requestParameters['modelName'] == null) {
            throw new runtime.RequiredError(
                'modelName',
                'Required parameter "modelName" was null or undefined when calling objectsMailingLinkCreate().'
            );
        }

        if (requestParameters['objectId'] == null) {
            throw new runtime.RequiredError(
                'objectId',
                'Required parameter "objectId" was null or undefined when calling objectsMailingLinkCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling objectsMailingLinkCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/objects/{app_label}/{model_name}/{object_id}/mailing/link/`;
        urlPath = urlPath.replace(`{${"app_label"}}`, encodeURIComponent(String(requestParameters['appLabel'])));
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters['modelName'])));
        urlPath = urlPath.replace(`{${"object_id"}}`, encodeURIComponent(String(requestParameters['objectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MailingProfileActionToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MailingProfileActionFromJSON(jsonValue));
    }

    /**
     * Send an object link via email.
     */
    async objectsMailingLinkCreate(requestParameters: ObjectsMailingLinkCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MailingProfileAction> {
        const response = await this.objectsMailingLinkCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all the available permissions for a class.
     */
    async objectsPermissionsListRaw(requestParameters: ObjectsPermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectsPermissionsList200Response>> {
        if (requestParameters['appLabel'] == null) {
            throw new runtime.RequiredError(
                'appLabel',
                'Required parameter "appLabel" was null or undefined when calling objectsPermissionsList().'
            );
        }

        if (requestParameters['modelName'] == null) {
            throw new runtime.RequiredError(
                'modelName',
                'Required parameter "modelName" was null or undefined when calling objectsPermissionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/objects/{app_label}/{model_name}/permissions/`;
        urlPath = urlPath.replace(`{${"app_label"}}`, encodeURIComponent(String(requestParameters['appLabel'])));
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters['modelName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectsPermissionsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the available permissions for a class.
     */
    async objectsPermissionsList(requestParameters: ObjectsPermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectsPermissionsList200Response> {
        const response = await this.objectsPermissionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Interactive inspection of object properties.
     */
    async objectsSandboxCreateRaw(requestParameters: ObjectsSandboxCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectTemplateSandbox>> {
        if (requestParameters['appLabel'] == null) {
            throw new runtime.RequiredError(
                'appLabel',
                'Required parameter "appLabel" was null or undefined when calling objectsSandboxCreate().'
            );
        }

        if (requestParameters['modelName'] == null) {
            throw new runtime.RequiredError(
                'modelName',
                'Required parameter "modelName" was null or undefined when calling objectsSandboxCreate().'
            );
        }

        if (requestParameters['objectId'] == null) {
            throw new runtime.RequiredError(
                'objectId',
                'Required parameter "objectId" was null or undefined when calling objectsSandboxCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling objectsSandboxCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/objects/{app_label}/{model_name}/{object_id}/sandbox/`;
        urlPath = urlPath.replace(`{${"app_label"}}`, encodeURIComponent(String(requestParameters['appLabel'])));
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters['modelName'])));
        urlPath = urlPath.replace(`{${"object_id"}}`, encodeURIComponent(String(requestParameters['objectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ObjectTemplateSandboxToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectTemplateSandboxFromJSON(jsonValue));
    }

    /**
     * Interactive inspection of object properties.
     */
    async objectsSandboxCreate(requestParameters: ObjectsSandboxCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectTemplateSandbox> {
        const response = await this.objectsSandboxCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
