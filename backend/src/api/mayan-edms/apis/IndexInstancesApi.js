"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexInstancesApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class IndexInstancesApi extends runtime.BaseAPI {
    /**
     * Returns a list of all the indexes instances.
     */
    indexInstancesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/index_instances/`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.IndexInstancesList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the indexes instances.
     */
    indexInstancesList() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.indexInstancesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a list of all the documents contained by a particular index instance node.
     */
    indexInstancesNodesDocumentsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['indexInstanceId'] == null) {
                throw new runtime.RequiredError('indexInstanceId', 'Required parameter "indexInstanceId" was null or undefined when calling indexInstancesNodesDocumentsList().');
            }
            if (requestParameters['indexInstanceNodeId'] == null) {
                throw new runtime.RequiredError('indexInstanceNodeId', 'Required parameter "indexInstanceNodeId" was null or undefined when calling indexInstancesNodesDocumentsList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/index_instances/{index_instance_id}/nodes/{index_instance_node_id}/documents/`;
            urlPath = urlPath.replace(`{${"index_instance_id"}}`, encodeURIComponent(String(requestParameters['indexInstanceId'])));
            urlPath = urlPath.replace(`{${"index_instance_node_id"}}`, encodeURIComponent(String(requestParameters['indexInstanceNodeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CabinetsDocumentsList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the documents contained by a particular index instance node.
     */
    indexInstancesNodesDocumentsList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.indexInstancesNodesDocumentsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a list of all the nodes for the selected index instance.
     */
    indexInstancesNodesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['indexInstanceId'] == null) {
                throw new runtime.RequiredError('indexInstanceId', 'Required parameter "indexInstanceId" was null or undefined when calling indexInstancesNodesList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/index_instances/{index_instance_id}/nodes/`;
            urlPath = urlPath.replace(`{${"index_instance_id"}}`, encodeURIComponent(String(requestParameters['indexInstanceId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsIndexesList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the nodes for the selected index instance.
     */
    indexInstancesNodesList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.indexInstancesNodesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns list of all the children nodes for the selected index instance node.
     */
    indexInstancesNodesNodesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['indexInstanceId'] == null) {
                throw new runtime.RequiredError('indexInstanceId', 'Required parameter "indexInstanceId" was null or undefined when calling indexInstancesNodesNodesList().');
            }
            if (requestParameters['indexInstanceNodeId'] == null) {
                throw new runtime.RequiredError('indexInstanceNodeId', 'Required parameter "indexInstanceNodeId" was null or undefined when calling indexInstancesNodesNodesList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/index_instances/{index_instance_id}/nodes/{index_instance_node_id}/nodes/`;
            urlPath = urlPath.replace(`{${"index_instance_id"}}`, encodeURIComponent(String(requestParameters['indexInstanceId'])));
            urlPath = urlPath.replace(`{${"index_instance_node_id"}}`, encodeURIComponent(String(requestParameters['indexInstanceNodeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsIndexesList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns list of all the children nodes for the selected index instance node.
     */
    indexInstancesNodesNodesList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.indexInstancesNodesNodesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the details of the selected index instance node.
     */
    indexInstancesNodesReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['indexInstanceId'] == null) {
                throw new runtime.RequiredError('indexInstanceId', 'Required parameter "indexInstanceId" was null or undefined when calling indexInstancesNodesRead().');
            }
            if (requestParameters['indexInstanceNodeId'] == null) {
                throw new runtime.RequiredError('indexInstanceNodeId', 'Required parameter "indexInstanceNodeId" was null or undefined when calling indexInstancesNodesRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/index_instances/{index_instance_id}/nodes/{index_instance_node_id}/`;
            urlPath = urlPath.replace(`{${"index_instance_id"}}`, encodeURIComponent(String(requestParameters['indexInstanceId'])));
            urlPath = urlPath.replace(`{${"index_instance_node_id"}}`, encodeURIComponent(String(requestParameters['indexInstanceNodeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.IndexInstanceNodeFromJSON)(jsonValue));
        });
    }
    /**
     * Returns the details of the selected index instance node.
     */
    indexInstancesNodesRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.indexInstancesNodesReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the details of the selected index instance.
     */
    indexInstancesReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['indexInstanceId'] == null) {
                throw new runtime.RequiredError('indexInstanceId', 'Required parameter "indexInstanceId" was null or undefined when calling indexInstancesRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/index_instances/{index_instance_id}/`;
            urlPath = urlPath.replace(`{${"index_instance_id"}}`, encodeURIComponent(String(requestParameters['indexInstanceId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.IndexInstanceFromJSON)(jsonValue));
        });
    }
    /**
     * Returns the details of the selected index instance.
     */
    indexInstancesRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.indexInstancesReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.IndexInstancesApi = IndexInstancesApi;
