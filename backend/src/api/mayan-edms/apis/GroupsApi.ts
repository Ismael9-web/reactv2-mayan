/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Group,
  GroupUserAdd,
  GroupUserRemove,
  GroupsList200Response,
  GroupsUsersList200Response,
} from '../models/index';
import {
    GroupFromJSON,
    GroupToJSON,
    GroupUserAddFromJSON,
    GroupUserAddToJSON,
    GroupUserRemoveFromJSON,
    GroupUserRemoveToJSON,
    GroupsList200ResponseFromJSON,
    GroupsList200ResponseToJSON,
    GroupsUsersList200ResponseFromJSON,
    GroupsUsersList200ResponseToJSON,
} from '../models/index';

export interface GroupsCreateRequest {
    data: Omit<Group, 'id'|'url'|'users_url'|'users_add_url'|'users_remove_url'>;
}

export interface GroupsDeleteRequest {
    groupId: string;
}

export interface GroupsListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface GroupsPartialUpdateRequest {
    groupId: string;
    data: Omit<Group, 'id'|'url'|'users_url'|'users_add_url'|'users_remove_url'>;
}

export interface GroupsReadRequest {
    groupId: string;
}

export interface GroupsUpdateRequest {
    groupId: string;
    data: Omit<Group, 'id'|'url'|'users_url'|'users_add_url'|'users_remove_url'>;
}

export interface GroupsUsersAddCreateRequest {
    groupId: string;
    data: GroupUserAdd;
}

export interface GroupsUsersListRequest {
    groupId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface GroupsUsersRemoveCreateRequest {
    groupId: string;
    data: GroupUserRemove;
}

/**
 * 
 */
export class GroupsApi extends runtime.BaseAPI {

    /**
     * Create a new group.
     */
    async groupsCreateRaw(requestParameters: GroupsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling groupsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/groups/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * Create a new group.
     */
    async groupsCreate(requestParameters: GroupsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group> {
        const response = await this.groupsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected group.
     */
    async groupsDeleteRaw(requestParameters: GroupsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/groups/{group_id}/`;
        urlPath = urlPath.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected group.
     */
    async groupsDelete(requestParameters: GroupsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all the groups.
     */
    async groupsListRaw(requestParameters: GroupsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupsList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/groups/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the groups.
     */
    async groupsList(requestParameters: GroupsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupsList200Response> {
        const response = await this.groupsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially edit the selected group.
     */
    async groupsPartialUpdateRaw(requestParameters: GroupsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling groupsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/groups/{group_id}/`;
        urlPath = urlPath.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GroupToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * Partially edit the selected group.
     */
    async groupsPartialUpdate(requestParameters: GroupsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group> {
        const response = await this.groupsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the details of the selected group.
     */
    async groupsReadRaw(requestParameters: GroupsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/groups/{group_id}/`;
        urlPath = urlPath.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * Return the details of the selected group.
     */
    async groupsRead(requestParameters: GroupsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group> {
        const response = await this.groupsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected group.
     */
    async groupsUpdateRaw(requestParameters: GroupsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling groupsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/groups/{group_id}/`;
        urlPath = urlPath.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * Edit the selected group.
     */
    async groupsUpdate(requestParameters: GroupsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group> {
        const response = await this.groupsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a user to a group.
     */
    async groupsUsersAddCreateRaw(requestParameters: GroupsUsersAddCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupUserAdd>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsUsersAddCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling groupsUsersAddCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/groups/{group_id}/users/add/`;
        urlPath = urlPath.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUserAddToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupUserAddFromJSON(jsonValue));
    }

    /**
     * Add a user to a group.
     */
    async groupsUsersAddCreate(requestParameters: GroupsUsersAddCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupUserAdd> {
        const response = await this.groupsUsersAddCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all the users belonging to the group.
     */
    async groupsUsersListRaw(requestParameters: GroupsUsersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupsUsersList200Response>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsUsersList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/groups/{group_id}/users/`;
        urlPath = urlPath.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupsUsersList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the users belonging to the group.
     */
    async groupsUsersList(requestParameters: GroupsUsersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupsUsersList200Response> {
        const response = await this.groupsUsersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a user from a group.
     */
    async groupsUsersRemoveCreateRaw(requestParameters: GroupsUsersRemoveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupUserRemove>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsUsersRemoveCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling groupsUsersRemoveCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/groups/{group_id}/users/remove/`;
        urlPath = urlPath.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupUserRemoveToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupUserRemoveFromJSON(jsonValue));
    }

    /**
     * Remove a user from a group.
     */
    async groupsUsersRemoveCreate(requestParameters: GroupsUsersRemoveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupUserRemove> {
        const response = await this.groupsUsersRemoveCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
