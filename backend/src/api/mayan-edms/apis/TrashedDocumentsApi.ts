/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TrashedDocument,
  TrashedDocumentsList200Response,
} from '../models/index';
import {
    TrashedDocumentFromJSON,
    TrashedDocumentToJSON,
    TrashedDocumentsList200ResponseFromJSON,
    TrashedDocumentsList200ResponseToJSON,
} from '../models/index';

export interface TrashedDocumentsDeleteRequest {
    documentId: string;
}

export interface TrashedDocumentsImageReadRequest {
    documentId: string;
}

export interface TrashedDocumentsListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface TrashedDocumentsReadRequest {
    documentId: string;
}

export interface TrashedDocumentsRestoreCreateRequest {
    documentId: string;
    data: object;
}

/**
 * 
 */
export class TrashedDocumentsApi extends runtime.BaseAPI {

    /**
     * Delete the trashed document.
     */
    async trashedDocumentsDeleteRaw(requestParameters: TrashedDocumentsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling trashedDocumentsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/trashed_documents/{document_id}/`;
        urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the trashed document.
     */
    async trashedDocumentsDelete(requestParameters: TrashedDocumentsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.trashedDocumentsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns an image representation of the selected trashed document.
     */
    async trashedDocumentsImageReadRaw(requestParameters: TrashedDocumentsImageReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling trashedDocumentsImageRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/trashed_documents/{document_id}/image/`;
        urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns an image representation of the selected trashed document.
     */
    async trashedDocumentsImageRead(requestParameters: TrashedDocumentsImageReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.trashedDocumentsImageReadRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all the trashed documents.
     */
    async trashedDocumentsListRaw(requestParameters: TrashedDocumentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrashedDocumentsList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/trashed_documents/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrashedDocumentsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the trashed documents.
     */
    async trashedDocumentsList(requestParameters: TrashedDocumentsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrashedDocumentsList200Response> {
        const response = await this.trashedDocumentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the details of the trashed document.
     */
    async trashedDocumentsReadRaw(requestParameters: TrashedDocumentsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrashedDocument>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling trashedDocumentsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/trashed_documents/{document_id}/`;
        urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrashedDocumentFromJSON(jsonValue));
    }

    /**
     * Retrieve the details of the trashed document.
     */
    async trashedDocumentsRead(requestParameters: TrashedDocumentsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrashedDocument> {
        const response = await this.trashedDocumentsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Restore a trashed document.
     */
    async trashedDocumentsRestoreCreateRaw(requestParameters: TrashedDocumentsRestoreCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling trashedDocumentsRestoreCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling trashedDocumentsRestoreCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/trashed_documents/{document_id}/restore/`;
        urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['data'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Restore a trashed document.
     */
    async trashedDocumentsRestoreCreate(requestParameters: TrashedDocumentsRestoreCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.trashedDocumentsRestoreCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
