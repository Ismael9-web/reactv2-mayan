/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DownloadFile,
  DownloadsList200Response,
} from '../models/index';
import {
    DownloadFileFromJSON,
    DownloadFileToJSON,
    DownloadsList200ResponseFromJSON,
    DownloadsList200ResponseToJSON,
} from '../models/index';

export interface DownloadsDeleteRequest {
    downloadFileId: string;
}

export interface DownloadsDownloadReadRequest {
    downloadFileId: string;
}

export interface DownloadsListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface DownloadsReadRequest {
    downloadFileId: string;
}

/**
 * 
 */
export class DownloadsApi extends runtime.BaseAPI {

    /**
     * Delete the selected download file.
     */
    async downloadsDeleteRaw(requestParameters: DownloadsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['downloadFileId'] == null) {
            throw new runtime.RequiredError(
                'downloadFileId',
                'Required parameter "downloadFileId" was null or undefined when calling downloadsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/downloads/{download_file_id}/`;
        urlPath = urlPath.replace(`{${"download_file_id"}}`, encodeURIComponent(String(requestParameters['downloadFileId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected download file.
     */
    async downloadsDelete(requestParameters: DownloadsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.downloadsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Download a download file.
     */
    async downloadsDownloadReadRaw(requestParameters: DownloadsDownloadReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['downloadFileId'] == null) {
            throw new runtime.RequiredError(
                'downloadFileId',
                'Required parameter "downloadFileId" was null or undefined when calling downloadsDownloadRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/downloads/{download_file_id}/download/`;
        urlPath = urlPath.replace(`{${"download_file_id"}}`, encodeURIComponent(String(requestParameters['downloadFileId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download a download file.
     */
    async downloadsDownloadRead(requestParameters: DownloadsDownloadReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.downloadsDownloadReadRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all the download files.
     */
    async downloadsListRaw(requestParameters: DownloadsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DownloadsList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/downloads/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DownloadsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the download files.
     */
    async downloadsList(requestParameters: DownloadsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DownloadsList200Response> {
        const response = await this.downloadsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the details of the selected download file.
     */
    async downloadsReadRaw(requestParameters: DownloadsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DownloadFile>> {
        if (requestParameters['downloadFileId'] == null) {
            throw new runtime.RequiredError(
                'downloadFileId',
                'Required parameter "downloadFileId" was null or undefined when calling downloadsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/downloads/{download_file_id}/`;
        urlPath = urlPath.replace(`{${"download_file_id"}}`, encodeURIComponent(String(requestParameters['downloadFileId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DownloadFileFromJSON(jsonValue));
    }

    /**
     * Return the details of the selected download file.
     */
    async downloadsRead(requestParameters: DownloadsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DownloadFile> {
        const response = await this.downloadsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
