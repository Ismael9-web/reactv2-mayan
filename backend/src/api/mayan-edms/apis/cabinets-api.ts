/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Cabinet } from '../models';
// @ts-ignore
import type { CabinetDocumentAdd } from '../models';
// @ts-ignore
import type { CabinetDocumentRemove } from '../models';
// @ts-ignore
import type { CabinetsDocumentsList200Response } from '../models';
// @ts-ignore
import type { CabinetsList200Response } from '../models';
/**
 * CabinetsApi - axios parameter creator
 * @export
 */
export const CabinetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new cabinet.
         * @param {Cabinet} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cabinetsCreate: async (data: Cabinet, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cabinetsCreate', 'data', data)
            const localVarPath = `/cabinets/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the selected cabinet.
         * @param {string} cabinetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cabinetsDelete: async (cabinetId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cabinetId' is not null or undefined
            assertParamExists('cabinetsDelete', 'cabinetId', cabinetId)
            const localVarPath = `/cabinets/{cabinet_id}/`
                .replace(`{${"cabinet_id"}}`, encodeURIComponent(String(cabinetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a document to a cabinet.
         * @param {string} cabinetId 
         * @param {CabinetDocumentAdd} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cabinetsDocumentsAddCreate: async (cabinetId: string, data: CabinetDocumentAdd, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cabinetId' is not null or undefined
            assertParamExists('cabinetsDocumentsAddCreate', 'cabinetId', cabinetId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cabinetsDocumentsAddCreate', 'data', data)
            const localVarPath = `/cabinets/{cabinet_id}/documents/add/`
                .replace(`{${"cabinet_id"}}`, encodeURIComponent(String(cabinetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the documents contained in a particular cabinet.
         * @param {string} cabinetId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cabinetsDocumentsList: async (cabinetId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cabinetId' is not null or undefined
            assertParamExists('cabinetsDocumentsList', 'cabinetId', cabinetId)
            const localVarPath = `/cabinets/{cabinet_id}/documents/`
                .replace(`{${"cabinet_id"}}`, encodeURIComponent(String(cabinetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a document from a cabinet.
         * @param {string} cabinetId 
         * @param {CabinetDocumentRemove} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cabinetsDocumentsRemoveCreate: async (cabinetId: string, data: CabinetDocumentRemove, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cabinetId' is not null or undefined
            assertParamExists('cabinetsDocumentsRemoveCreate', 'cabinetId', cabinetId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cabinetsDocumentsRemoveCreate', 'data', data)
            const localVarPath = `/cabinets/{cabinet_id}/documents/remove/`
                .replace(`{${"cabinet_id"}}`, encodeURIComponent(String(cabinetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the cabinets.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cabinetsList: async (ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cabinets/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected cabinet.
         * @param {string} cabinetId 
         * @param {Cabinet} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cabinetsPartialUpdate: async (cabinetId: string, data: Cabinet, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cabinetId' is not null or undefined
            assertParamExists('cabinetsPartialUpdate', 'cabinetId', cabinetId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cabinetsPartialUpdate', 'data', data)
            const localVarPath = `/cabinets/{cabinet_id}/`
                .replace(`{${"cabinet_id"}}`, encodeURIComponent(String(cabinetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of the selected cabinet.
         * @param {string} cabinetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cabinetsRead: async (cabinetId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cabinetId' is not null or undefined
            assertParamExists('cabinetsRead', 'cabinetId', cabinetId)
            const localVarPath = `/cabinets/{cabinet_id}/`
                .replace(`{${"cabinet_id"}}`, encodeURIComponent(String(cabinetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected cabinet.
         * @param {string} cabinetId 
         * @param {Cabinet} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cabinetsUpdate: async (cabinetId: string, data: Cabinet, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cabinetId' is not null or undefined
            assertParamExists('cabinetsUpdate', 'cabinetId', cabinetId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cabinetsUpdate', 'data', data)
            const localVarPath = `/cabinets/{cabinet_id}/`
                .replace(`{${"cabinet_id"}}`, encodeURIComponent(String(cabinetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CabinetsApi - functional programming interface
 * @export
 */
export const CabinetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CabinetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new cabinet.
         * @param {Cabinet} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cabinetsCreate(data: Cabinet, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cabinet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cabinetsCreate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CabinetsApi.cabinetsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete the selected cabinet.
         * @param {string} cabinetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cabinetsDelete(cabinetId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cabinetsDelete(cabinetId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CabinetsApi.cabinetsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add a document to a cabinet.
         * @param {string} cabinetId 
         * @param {CabinetDocumentAdd} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cabinetsDocumentsAddCreate(cabinetId: string, data: CabinetDocumentAdd, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CabinetDocumentAdd>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cabinetsDocumentsAddCreate(cabinetId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CabinetsApi.cabinetsDocumentsAddCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the documents contained in a particular cabinet.
         * @param {string} cabinetId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cabinetsDocumentsList(cabinetId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CabinetsDocumentsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cabinetsDocumentsList(cabinetId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CabinetsApi.cabinetsDocumentsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove a document from a cabinet.
         * @param {string} cabinetId 
         * @param {CabinetDocumentRemove} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cabinetsDocumentsRemoveCreate(cabinetId: string, data: CabinetDocumentRemove, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CabinetDocumentRemove>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cabinetsDocumentsRemoveCreate(cabinetId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CabinetsApi.cabinetsDocumentsRemoveCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the cabinets.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cabinetsList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CabinetsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cabinetsList(ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CabinetsApi.cabinetsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected cabinet.
         * @param {string} cabinetId 
         * @param {Cabinet} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cabinetsPartialUpdate(cabinetId: string, data: Cabinet, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cabinet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cabinetsPartialUpdate(cabinetId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CabinetsApi.cabinetsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the details of the selected cabinet.
         * @param {string} cabinetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cabinetsRead(cabinetId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cabinet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cabinetsRead(cabinetId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CabinetsApi.cabinetsRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected cabinet.
         * @param {string} cabinetId 
         * @param {Cabinet} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cabinetsUpdate(cabinetId: string, data: Cabinet, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cabinet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cabinetsUpdate(cabinetId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CabinetsApi.cabinetsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CabinetsApi - factory interface
 * @export
 */
export const CabinetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CabinetsApiFp(configuration)
    return {
        /**
         * Create a new cabinet.
         * @param {Cabinet} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cabinetsCreate(data: Cabinet, options?: RawAxiosRequestConfig): AxiosPromise<Cabinet> {
            return localVarFp.cabinetsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the selected cabinet.
         * @param {string} cabinetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cabinetsDelete(cabinetId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cabinetsDelete(cabinetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a document to a cabinet.
         * @param {string} cabinetId 
         * @param {CabinetDocumentAdd} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cabinetsDocumentsAddCreate(cabinetId: string, data: CabinetDocumentAdd, options?: RawAxiosRequestConfig): AxiosPromise<CabinetDocumentAdd> {
            return localVarFp.cabinetsDocumentsAddCreate(cabinetId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the documents contained in a particular cabinet.
         * @param {string} cabinetId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cabinetsDocumentsList(cabinetId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<CabinetsDocumentsList200Response> {
            return localVarFp.cabinetsDocumentsList(cabinetId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a document from a cabinet.
         * @param {string} cabinetId 
         * @param {CabinetDocumentRemove} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cabinetsDocumentsRemoveCreate(cabinetId: string, data: CabinetDocumentRemove, options?: RawAxiosRequestConfig): AxiosPromise<CabinetDocumentRemove> {
            return localVarFp.cabinetsDocumentsRemoveCreate(cabinetId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the cabinets.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cabinetsList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<CabinetsList200Response> {
            return localVarFp.cabinetsList(ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected cabinet.
         * @param {string} cabinetId 
         * @param {Cabinet} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cabinetsPartialUpdate(cabinetId: string, data: Cabinet, options?: RawAxiosRequestConfig): AxiosPromise<Cabinet> {
            return localVarFp.cabinetsPartialUpdate(cabinetId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of the selected cabinet.
         * @param {string} cabinetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cabinetsRead(cabinetId: string, options?: RawAxiosRequestConfig): AxiosPromise<Cabinet> {
            return localVarFp.cabinetsRead(cabinetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected cabinet.
         * @param {string} cabinetId 
         * @param {Cabinet} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cabinetsUpdate(cabinetId: string, data: Cabinet, options?: RawAxiosRequestConfig): AxiosPromise<Cabinet> {
            return localVarFp.cabinetsUpdate(cabinetId, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CabinetsApi - object-oriented interface
 * @export
 * @class CabinetsApi
 * @extends {BaseAPI}
 */
export class CabinetsApi extends BaseAPI {
    /**
     * Create a new cabinet.
     * @param {Cabinet} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CabinetsApi
     */
    public cabinetsCreate(data: Cabinet, options?: RawAxiosRequestConfig) {
        return CabinetsApiFp(this.configuration).cabinetsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the selected cabinet.
     * @param {string} cabinetId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CabinetsApi
     */
    public cabinetsDelete(cabinetId: string, options?: RawAxiosRequestConfig) {
        return CabinetsApiFp(this.configuration).cabinetsDelete(cabinetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a document to a cabinet.
     * @param {string} cabinetId 
     * @param {CabinetDocumentAdd} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CabinetsApi
     */
    public cabinetsDocumentsAddCreate(cabinetId: string, data: CabinetDocumentAdd, options?: RawAxiosRequestConfig) {
        return CabinetsApiFp(this.configuration).cabinetsDocumentsAddCreate(cabinetId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the documents contained in a particular cabinet.
     * @param {string} cabinetId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CabinetsApi
     */
    public cabinetsDocumentsList(cabinetId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return CabinetsApiFp(this.configuration).cabinetsDocumentsList(cabinetId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a document from a cabinet.
     * @param {string} cabinetId 
     * @param {CabinetDocumentRemove} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CabinetsApi
     */
    public cabinetsDocumentsRemoveCreate(cabinetId: string, data: CabinetDocumentRemove, options?: RawAxiosRequestConfig) {
        return CabinetsApiFp(this.configuration).cabinetsDocumentsRemoveCreate(cabinetId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the cabinets.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CabinetsApi
     */
    public cabinetsList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return CabinetsApiFp(this.configuration).cabinetsList(ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected cabinet.
     * @param {string} cabinetId 
     * @param {Cabinet} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CabinetsApi
     */
    public cabinetsPartialUpdate(cabinetId: string, data: Cabinet, options?: RawAxiosRequestConfig) {
        return CabinetsApiFp(this.configuration).cabinetsPartialUpdate(cabinetId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of the selected cabinet.
     * @param {string} cabinetId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CabinetsApi
     */
    public cabinetsRead(cabinetId: string, options?: RawAxiosRequestConfig) {
        return CabinetsApiFp(this.configuration).cabinetsRead(cabinetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected cabinet.
     * @param {string} cabinetId 
     * @param {Cabinet} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CabinetsApi
     */
    public cabinetsUpdate(cabinetId: string, data: Cabinet, options?: RawAxiosRequestConfig) {
        return CabinetsApiFp(this.configuration).cabinetsUpdate(cabinetId, data, options).then((request) => request(this.axios, this.basePath));
    }
}

