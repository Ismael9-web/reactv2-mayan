/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppImageError,
  AppImageErrorsList200Response,
} from '../models/index';
import {
    AppImageErrorFromJSON,
    AppImageErrorToJSON,
    AppImageErrorsList200ResponseFromJSON,
    AppImageErrorsList200ResponseToJSON,
} from '../models/index';

export interface AppImageErrorsImageReadRequest {
    appImageErrorName: string;
}

export interface AppImageErrorsListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface AppImageErrorsReadRequest {
    appImageErrorName: string;
}

/**
 * 
 */
export class AppImageErrorsApi extends runtime.BaseAPI {

    /**
     * Returns an image representation of the selected app image error.
     */
    async appImageErrorsImageReadRaw(requestParameters: AppImageErrorsImageReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appImageErrorName'] == null) {
            throw new runtime.RequiredError(
                'appImageErrorName',
                'Required parameter "appImageErrorName" was null or undefined when calling appImageErrorsImageRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/app_image_errors/{app_image_error_name}/image/`;
        urlPath = urlPath.replace(`{${"app_image_error_name"}}`, encodeURIComponent(String(requestParameters['appImageErrorName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns an image representation of the selected app image error.
     */
    async appImageErrorsImageRead(requestParameters: AppImageErrorsImageReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appImageErrorsImageReadRaw(requestParameters, initOverrides);
    }

    /**
     * Returns an list of the available app image errors.
     */
    async appImageErrorsListRaw(requestParameters: AppImageErrorsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppImageErrorsList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/app_image_errors/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppImageErrorsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns an list of the available app image errors.
     */
    async appImageErrorsList(requestParameters: AppImageErrorsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppImageErrorsList200Response> {
        const response = await this.appImageErrorsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the details of the selected app image error.
     */
    async appImageErrorsReadRaw(requestParameters: AppImageErrorsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppImageError>> {
        if (requestParameters['appImageErrorName'] == null) {
            throw new runtime.RequiredError(
                'appImageErrorName',
                'Required parameter "appImageErrorName" was null or undefined when calling appImageErrorsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/app_image_errors/{app_image_error_name}/`;
        urlPath = urlPath.replace(`{${"app_image_error_name"}}`, encodeURIComponent(String(requestParameters['appImageErrorName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppImageErrorFromJSON(jsonValue));
    }

    /**
     * Returns the details of the selected app image error.
     */
    async appImageErrorsRead(requestParameters: AppImageErrorsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppImageError> {
        const response = await this.appImageErrorsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
