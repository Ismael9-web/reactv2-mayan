/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Key,
  KeysList200Response,
} from '../models/index';
import {
    KeyFromJSON,
    KeyToJSON,
    KeysList200ResponseFromJSON,
    KeysList200ResponseToJSON,
} from '../models/index';

export interface KeysCreateRequest {
    data: Omit<Key, 'algorithm'|'creation_date'|'expiration_date'|'fingerprint'|'id'|'key_type'|'length'|'url'|'user_id'>;
}

export interface KeysDeleteRequest {
    keyId: string;
}

export interface KeysListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface KeysReadRequest {
    keyId: string;
}

/**
 * 
 */
export class KeysApi extends runtime.BaseAPI {

    /**
     * Upload a new key.
     */
    async keysCreateRaw(requestParameters: KeysCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Key>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling keysCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/keys/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KeyToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KeyFromJSON(jsonValue));
    }

    /**
     * Upload a new key.
     */
    async keysCreate(requestParameters: KeysCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Key> {
        const response = await this.keysCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected key.
     */
    async keysDeleteRaw(requestParameters: KeysDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['keyId'] == null) {
            throw new runtime.RequiredError(
                'keyId',
                'Required parameter "keyId" was null or undefined when calling keysDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/keys/{key_id}/`;
        urlPath = urlPath.replace(`{${"key_id"}}`, encodeURIComponent(String(requestParameters['keyId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected key.
     */
    async keysDelete(requestParameters: KeysDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.keysDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all the keys.
     */
    async keysListRaw(requestParameters: KeysListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KeysList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/keys/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KeysList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the keys.
     */
    async keysList(requestParameters: KeysListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KeysList200Response> {
        const response = await this.keysListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the details of the selected key.
     */
    async keysReadRaw(requestParameters: KeysReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Key>> {
        if (requestParameters['keyId'] == null) {
            throw new runtime.RequiredError(
                'keyId',
                'Required parameter "keyId" was null or undefined when calling keysRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/keys/{key_id}/`;
        urlPath = urlPath.replace(`{${"key_id"}}`, encodeURIComponent(String(requestParameters['keyId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KeyFromJSON(jsonValue));
    }

    /**
     * Return the details of the selected key.
     */
    async keysRead(requestParameters: KeysReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Key> {
        const response = await this.keysReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
