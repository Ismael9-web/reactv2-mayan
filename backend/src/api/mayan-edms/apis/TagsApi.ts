/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CabinetsDocumentsList200Response,
  DocumentsTagsList200Response,
  Tag,
} from '../models/index';
import {
    CabinetsDocumentsList200ResponseFromJSON,
    CabinetsDocumentsList200ResponseToJSON,
    DocumentsTagsList200ResponseFromJSON,
    DocumentsTagsList200ResponseToJSON,
    TagFromJSON,
    TagToJSON,
} from '../models/index';

export interface TagsCreateRequest {
    data: Omit<Tag, 'documents_url'|'id'|'url'>;
}

export interface TagsDeleteRequest {
    tagId: string;
}

export interface TagsDocumentsListRequest {
    tagId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface TagsListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface TagsPartialUpdateRequest {
    tagId: string;
    data: Omit<Tag, 'documents_url'|'id'|'url'>;
}

export interface TagsReadRequest {
    tagId: string;
}

export interface TagsUpdateRequest {
    tagId: string;
    data: Omit<Tag, 'documents_url'|'id'|'url'>;
}

/**
 * 
 */
export class TagsApi extends runtime.BaseAPI {

    /**
     * Create a new tag.
     */
    async tagsCreateRaw(requestParameters: TagsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling tagsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/tags/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TagToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     * Create a new tag.
     */
    async tagsCreate(requestParameters: TagsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tag> {
        const response = await this.tagsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected tag.
     */
    async tagsDeleteRaw(requestParameters: TagsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling tagsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/tags/{tag_id}/`;
        urlPath = urlPath.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected tag.
     */
    async tagsDelete(requestParameters: TagsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tagsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all the documents tagged by a particular tag.
     */
    async tagsDocumentsListRaw(requestParameters: TagsDocumentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CabinetsDocumentsList200Response>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling tagsDocumentsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/tags/{tag_id}/documents/`;
        urlPath = urlPath.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CabinetsDocumentsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the documents tagged by a particular tag.
     */
    async tagsDocumentsList(requestParameters: TagsDocumentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CabinetsDocumentsList200Response> {
        const response = await this.tagsDocumentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all the tags.
     */
    async tagsListRaw(requestParameters: TagsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentsTagsList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/tags/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentsTagsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the tags.
     */
    async tagsList(requestParameters: TagsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentsTagsList200Response> {
        const response = await this.tagsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected tag.
     */
    async tagsPartialUpdateRaw(requestParameters: TagsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling tagsPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling tagsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/tags/{tag_id}/`;
        urlPath = urlPath.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TagToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     * Edit the selected tag.
     */
    async tagsPartialUpdate(requestParameters: TagsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tag> {
        const response = await this.tagsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the details of the selected tag.
     */
    async tagsReadRaw(requestParameters: TagsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling tagsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/tags/{tag_id}/`;
        urlPath = urlPath.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     * Return the details of the selected tag.
     */
    async tagsRead(requestParameters: TagsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tag> {
        const response = await this.tagsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected tag.
     */
    async tagsUpdateRaw(requestParameters: TagsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling tagsUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling tagsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/tags/{tag_id}/`;
        urlPath = urlPath.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TagToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     * Edit the selected tag.
     */
    async tagsUpdate(requestParameters: TagsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tag> {
        const response = await this.tagsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
