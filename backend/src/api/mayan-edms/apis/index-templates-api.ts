/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DocumentTypeAdd } from '../models';
// @ts-ignore
import type { DocumentTypeRemove } from '../models';
// @ts-ignore
import type { DocumentTypesList200Response } from '../models';
// @ts-ignore
import type { IndexTemplate } from '../models';
// @ts-ignore
import type { IndexTemplateNode } from '../models';
// @ts-ignore
import type { IndexTemplateNodeWrite } from '../models';
// @ts-ignore
import type { IndexTemplatesList200Response } from '../models';
// @ts-ignore
import type { IndexTemplatesNodesList200Response } from '../models';
/**
 * IndexTemplatesApi - axios parameter creator
 * @export
 */
export const IndexTemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new index template.
         * @param {IndexTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesCreate: async (data: IndexTemplate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('indexTemplatesCreate', 'data', data)
            const localVarPath = `/index_templates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the selected index template.
         * @param {string} indexTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesDelete: async (indexTemplateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexTemplateId' is not null or undefined
            assertParamExists('indexTemplatesDelete', 'indexTemplateId', indexTemplateId)
            const localVarPath = `/index_templates/{index_template_id}/`
                .replace(`{${"index_template_id"}}`, encodeURIComponent(String(indexTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a document type to an index template.
         * @param {string} indexTemplateId 
         * @param {DocumentTypeAdd} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesDocumentTypesAddCreate: async (indexTemplateId: string, data: DocumentTypeAdd, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexTemplateId' is not null or undefined
            assertParamExists('indexTemplatesDocumentTypesAddCreate', 'indexTemplateId', indexTemplateId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('indexTemplatesDocumentTypesAddCreate', 'data', data)
            const localVarPath = `/index_templates/{index_template_id}/document_types/add/`
                .replace(`{${"index_template_id"}}`, encodeURIComponent(String(indexTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of the document types associated with this index template.
         * @param {string} indexTemplateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesDocumentTypesList: async (indexTemplateId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexTemplateId' is not null or undefined
            assertParamExists('indexTemplatesDocumentTypesList', 'indexTemplateId', indexTemplateId)
            const localVarPath = `/index_templates/{index_template_id}/document_types/`
                .replace(`{${"index_template_id"}}`, encodeURIComponent(String(indexTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a document type from an index template.
         * @param {string} indexTemplateId 
         * @param {DocumentTypeRemove} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesDocumentTypesRemoveCreate: async (indexTemplateId: string, data: DocumentTypeRemove, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexTemplateId' is not null or undefined
            assertParamExists('indexTemplatesDocumentTypesRemoveCreate', 'indexTemplateId', indexTemplateId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('indexTemplatesDocumentTypesRemoveCreate', 'data', data)
            const localVarPath = `/index_templates/{index_template_id}/document_types/remove/`
                .replace(`{${"index_template_id"}}`, encodeURIComponent(String(indexTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the defined indexes template.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesList: async (ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index_templates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new index template node.
         * @param {string} indexTemplateId 
         * @param {IndexTemplateNodeWrite} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesNodesCreate: async (indexTemplateId: string, data: IndexTemplateNodeWrite, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexTemplateId' is not null or undefined
            assertParamExists('indexTemplatesNodesCreate', 'indexTemplateId', indexTemplateId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('indexTemplatesNodesCreate', 'data', data)
            const localVarPath = `/index_templates/{index_template_id}/nodes/`
                .replace(`{${"index_template_id"}}`, encodeURIComponent(String(indexTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the selected index template node.
         * @param {string} indexTemplateId 
         * @param {string} indexTemplateNodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesNodesDelete: async (indexTemplateId: string, indexTemplateNodeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexTemplateId' is not null or undefined
            assertParamExists('indexTemplatesNodesDelete', 'indexTemplateId', indexTemplateId)
            // verify required parameter 'indexTemplateNodeId' is not null or undefined
            assertParamExists('indexTemplatesNodesDelete', 'indexTemplateNodeId', indexTemplateNodeId)
            const localVarPath = `/index_templates/{index_template_id}/nodes/{index_template_node_id}/`
                .replace(`{${"index_template_id"}}`, encodeURIComponent(String(indexTemplateId)))
                .replace(`{${"index_template_node_id"}}`, encodeURIComponent(String(indexTemplateNodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the template nodes for the selected index.
         * @param {string} indexTemplateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesNodesList: async (indexTemplateId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexTemplateId' is not null or undefined
            assertParamExists('indexTemplatesNodesList', 'indexTemplateId', indexTemplateId)
            const localVarPath = `/index_templates/{index_template_id}/nodes/`
                .replace(`{${"index_template_id"}}`, encodeURIComponent(String(indexTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially edit an index template node.
         * @param {string} indexTemplateId 
         * @param {string} indexTemplateNodeId 
         * @param {IndexTemplateNodeWrite} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesNodesPartialUpdate: async (indexTemplateId: string, indexTemplateNodeId: string, data: IndexTemplateNodeWrite, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexTemplateId' is not null or undefined
            assertParamExists('indexTemplatesNodesPartialUpdate', 'indexTemplateId', indexTemplateId)
            // verify required parameter 'indexTemplateNodeId' is not null or undefined
            assertParamExists('indexTemplatesNodesPartialUpdate', 'indexTemplateNodeId', indexTemplateNodeId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('indexTemplatesNodesPartialUpdate', 'data', data)
            const localVarPath = `/index_templates/{index_template_id}/nodes/{index_template_node_id}/`
                .replace(`{${"index_template_id"}}`, encodeURIComponent(String(indexTemplateId)))
                .replace(`{${"index_template_node_id"}}`, encodeURIComponent(String(indexTemplateNodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of the selected index template node.
         * @param {string} indexTemplateId 
         * @param {string} indexTemplateNodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesNodesRead: async (indexTemplateId: string, indexTemplateNodeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexTemplateId' is not null or undefined
            assertParamExists('indexTemplatesNodesRead', 'indexTemplateId', indexTemplateId)
            // verify required parameter 'indexTemplateNodeId' is not null or undefined
            assertParamExists('indexTemplatesNodesRead', 'indexTemplateNodeId', indexTemplateNodeId)
            const localVarPath = `/index_templates/{index_template_id}/nodes/{index_template_node_id}/`
                .replace(`{${"index_template_id"}}`, encodeURIComponent(String(indexTemplateId)))
                .replace(`{${"index_template_node_id"}}`, encodeURIComponent(String(indexTemplateNodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit an index template node.
         * @param {string} indexTemplateId 
         * @param {string} indexTemplateNodeId 
         * @param {IndexTemplateNodeWrite} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesNodesUpdate: async (indexTemplateId: string, indexTemplateNodeId: string, data: IndexTemplateNodeWrite, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexTemplateId' is not null or undefined
            assertParamExists('indexTemplatesNodesUpdate', 'indexTemplateId', indexTemplateId)
            // verify required parameter 'indexTemplateNodeId' is not null or undefined
            assertParamExists('indexTemplatesNodesUpdate', 'indexTemplateNodeId', indexTemplateNodeId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('indexTemplatesNodesUpdate', 'data', data)
            const localVarPath = `/index_templates/{index_template_id}/nodes/{index_template_node_id}/`
                .replace(`{${"index_template_id"}}`, encodeURIComponent(String(indexTemplateId)))
                .replace(`{${"index_template_node_id"}}`, encodeURIComponent(String(indexTemplateNodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially edit an index template.
         * @param {string} indexTemplateId 
         * @param {IndexTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesPartialUpdate: async (indexTemplateId: string, data: IndexTemplate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexTemplateId' is not null or undefined
            assertParamExists('indexTemplatesPartialUpdate', 'indexTemplateId', indexTemplateId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('indexTemplatesPartialUpdate', 'data', data)
            const localVarPath = `/index_templates/{index_template_id}/`
                .replace(`{${"index_template_id"}}`, encodeURIComponent(String(indexTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of the selected index template.
         * @param {string} indexTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesRead: async (indexTemplateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexTemplateId' is not null or undefined
            assertParamExists('indexTemplatesRead', 'indexTemplateId', indexTemplateId)
            const localVarPath = `/index_templates/{index_template_id}/`
                .replace(`{${"index_template_id"}}`, encodeURIComponent(String(indexTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rebuild the selected index template.
         * @param {string} indexTemplateId 
         * @param {object} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesRebuildCreate: async (indexTemplateId: string, data: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexTemplateId' is not null or undefined
            assertParamExists('indexTemplatesRebuildCreate', 'indexTemplateId', indexTemplateId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('indexTemplatesRebuildCreate', 'data', data)
            const localVarPath = `/index_templates/{index_template_id}/rebuild/`
                .replace(`{${"index_template_id"}}`, encodeURIComponent(String(indexTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reset the selected index template.
         * @param {string} indexTemplateId 
         * @param {object} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesResetCreate: async (indexTemplateId: string, data: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexTemplateId' is not null or undefined
            assertParamExists('indexTemplatesResetCreate', 'indexTemplateId', indexTemplateId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('indexTemplatesResetCreate', 'data', data)
            const localVarPath = `/index_templates/{index_template_id}/reset/`
                .replace(`{${"index_template_id"}}`, encodeURIComponent(String(indexTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit an index template.
         * @param {string} indexTemplateId 
         * @param {IndexTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesUpdate: async (indexTemplateId: string, data: IndexTemplate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexTemplateId' is not null or undefined
            assertParamExists('indexTemplatesUpdate', 'indexTemplateId', indexTemplateId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('indexTemplatesUpdate', 'data', data)
            const localVarPath = `/index_templates/{index_template_id}/`
                .replace(`{${"index_template_id"}}`, encodeURIComponent(String(indexTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IndexTemplatesApi - functional programming interface
 * @export
 */
export const IndexTemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IndexTemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new index template.
         * @param {IndexTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexTemplatesCreate(data: IndexTemplate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexTemplatesCreate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexTemplatesApi.indexTemplatesCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete the selected index template.
         * @param {string} indexTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexTemplatesDelete(indexTemplateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexTemplatesDelete(indexTemplateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexTemplatesApi.indexTemplatesDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add a document type to an index template.
         * @param {string} indexTemplateId 
         * @param {DocumentTypeAdd} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexTemplatesDocumentTypesAddCreate(indexTemplateId: string, data: DocumentTypeAdd, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypeAdd>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexTemplatesDocumentTypesAddCreate(indexTemplateId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexTemplatesApi.indexTemplatesDocumentTypesAddCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of the document types associated with this index template.
         * @param {string} indexTemplateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexTemplatesDocumentTypesList(indexTemplateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexTemplatesDocumentTypesList(indexTemplateId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexTemplatesApi.indexTemplatesDocumentTypesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove a document type from an index template.
         * @param {string} indexTemplateId 
         * @param {DocumentTypeRemove} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexTemplatesDocumentTypesRemoveCreate(indexTemplateId: string, data: DocumentTypeRemove, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypeRemove>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexTemplatesDocumentTypesRemoveCreate(indexTemplateId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexTemplatesApi.indexTemplatesDocumentTypesRemoveCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the defined indexes template.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexTemplatesList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexTemplatesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexTemplatesList(ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexTemplatesApi.indexTemplatesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new index template node.
         * @param {string} indexTemplateId 
         * @param {IndexTemplateNodeWrite} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexTemplatesNodesCreate(indexTemplateId: string, data: IndexTemplateNodeWrite, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexTemplateNodeWrite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexTemplatesNodesCreate(indexTemplateId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexTemplatesApi.indexTemplatesNodesCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete the selected index template node.
         * @param {string} indexTemplateId 
         * @param {string} indexTemplateNodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexTemplatesNodesDelete(indexTemplateId: string, indexTemplateNodeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexTemplatesNodesDelete(indexTemplateId, indexTemplateNodeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexTemplatesApi.indexTemplatesNodesDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the template nodes for the selected index.
         * @param {string} indexTemplateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexTemplatesNodesList(indexTemplateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexTemplatesNodesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexTemplatesNodesList(indexTemplateId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexTemplatesApi.indexTemplatesNodesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Partially edit an index template node.
         * @param {string} indexTemplateId 
         * @param {string} indexTemplateNodeId 
         * @param {IndexTemplateNodeWrite} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexTemplatesNodesPartialUpdate(indexTemplateId: string, indexTemplateNodeId: string, data: IndexTemplateNodeWrite, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexTemplateNodeWrite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexTemplatesNodesPartialUpdate(indexTemplateId, indexTemplateNodeId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexTemplatesApi.indexTemplatesNodesPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the details of the selected index template node.
         * @param {string} indexTemplateId 
         * @param {string} indexTemplateNodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexTemplatesNodesRead(indexTemplateId: string, indexTemplateNodeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexTemplateNode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexTemplatesNodesRead(indexTemplateId, indexTemplateNodeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexTemplatesApi.indexTemplatesNodesRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit an index template node.
         * @param {string} indexTemplateId 
         * @param {string} indexTemplateNodeId 
         * @param {IndexTemplateNodeWrite} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexTemplatesNodesUpdate(indexTemplateId: string, indexTemplateNodeId: string, data: IndexTemplateNodeWrite, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexTemplateNodeWrite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexTemplatesNodesUpdate(indexTemplateId, indexTemplateNodeId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexTemplatesApi.indexTemplatesNodesUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Partially edit an index template.
         * @param {string} indexTemplateId 
         * @param {IndexTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexTemplatesPartialUpdate(indexTemplateId: string, data: IndexTemplate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexTemplatesPartialUpdate(indexTemplateId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexTemplatesApi.indexTemplatesPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the details of the selected index template.
         * @param {string} indexTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexTemplatesRead(indexTemplateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexTemplatesRead(indexTemplateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexTemplatesApi.indexTemplatesRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Rebuild the selected index template.
         * @param {string} indexTemplateId 
         * @param {object} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexTemplatesRebuildCreate(indexTemplateId: string, data: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexTemplatesRebuildCreate(indexTemplateId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexTemplatesApi.indexTemplatesRebuildCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Reset the selected index template.
         * @param {string} indexTemplateId 
         * @param {object} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexTemplatesResetCreate(indexTemplateId: string, data: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexTemplatesResetCreate(indexTemplateId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexTemplatesApi.indexTemplatesResetCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit an index template.
         * @param {string} indexTemplateId 
         * @param {IndexTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexTemplatesUpdate(indexTemplateId: string, data: IndexTemplate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexTemplatesUpdate(indexTemplateId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexTemplatesApi.indexTemplatesUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IndexTemplatesApi - factory interface
 * @export
 */
export const IndexTemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IndexTemplatesApiFp(configuration)
    return {
        /**
         * Create a new index template.
         * @param {IndexTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesCreate(data: IndexTemplate, options?: RawAxiosRequestConfig): AxiosPromise<IndexTemplate> {
            return localVarFp.indexTemplatesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the selected index template.
         * @param {string} indexTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesDelete(indexTemplateId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.indexTemplatesDelete(indexTemplateId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a document type to an index template.
         * @param {string} indexTemplateId 
         * @param {DocumentTypeAdd} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesDocumentTypesAddCreate(indexTemplateId: string, data: DocumentTypeAdd, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypeAdd> {
            return localVarFp.indexTemplatesDocumentTypesAddCreate(indexTemplateId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of the document types associated with this index template.
         * @param {string} indexTemplateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesDocumentTypesList(indexTemplateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypesList200Response> {
            return localVarFp.indexTemplatesDocumentTypesList(indexTemplateId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a document type from an index template.
         * @param {string} indexTemplateId 
         * @param {DocumentTypeRemove} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesDocumentTypesRemoveCreate(indexTemplateId: string, data: DocumentTypeRemove, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypeRemove> {
            return localVarFp.indexTemplatesDocumentTypesRemoveCreate(indexTemplateId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the defined indexes template.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<IndexTemplatesList200Response> {
            return localVarFp.indexTemplatesList(ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new index template node.
         * @param {string} indexTemplateId 
         * @param {IndexTemplateNodeWrite} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesNodesCreate(indexTemplateId: string, data: IndexTemplateNodeWrite, options?: RawAxiosRequestConfig): AxiosPromise<IndexTemplateNodeWrite> {
            return localVarFp.indexTemplatesNodesCreate(indexTemplateId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the selected index template node.
         * @param {string} indexTemplateId 
         * @param {string} indexTemplateNodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesNodesDelete(indexTemplateId: string, indexTemplateNodeId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.indexTemplatesNodesDelete(indexTemplateId, indexTemplateNodeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the template nodes for the selected index.
         * @param {string} indexTemplateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesNodesList(indexTemplateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<IndexTemplatesNodesList200Response> {
            return localVarFp.indexTemplatesNodesList(indexTemplateId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially edit an index template node.
         * @param {string} indexTemplateId 
         * @param {string} indexTemplateNodeId 
         * @param {IndexTemplateNodeWrite} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesNodesPartialUpdate(indexTemplateId: string, indexTemplateNodeId: string, data: IndexTemplateNodeWrite, options?: RawAxiosRequestConfig): AxiosPromise<IndexTemplateNodeWrite> {
            return localVarFp.indexTemplatesNodesPartialUpdate(indexTemplateId, indexTemplateNodeId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of the selected index template node.
         * @param {string} indexTemplateId 
         * @param {string} indexTemplateNodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesNodesRead(indexTemplateId: string, indexTemplateNodeId: string, options?: RawAxiosRequestConfig): AxiosPromise<IndexTemplateNode> {
            return localVarFp.indexTemplatesNodesRead(indexTemplateId, indexTemplateNodeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit an index template node.
         * @param {string} indexTemplateId 
         * @param {string} indexTemplateNodeId 
         * @param {IndexTemplateNodeWrite} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesNodesUpdate(indexTemplateId: string, indexTemplateNodeId: string, data: IndexTemplateNodeWrite, options?: RawAxiosRequestConfig): AxiosPromise<IndexTemplateNodeWrite> {
            return localVarFp.indexTemplatesNodesUpdate(indexTemplateId, indexTemplateNodeId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially edit an index template.
         * @param {string} indexTemplateId 
         * @param {IndexTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesPartialUpdate(indexTemplateId: string, data: IndexTemplate, options?: RawAxiosRequestConfig): AxiosPromise<IndexTemplate> {
            return localVarFp.indexTemplatesPartialUpdate(indexTemplateId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of the selected index template.
         * @param {string} indexTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesRead(indexTemplateId: string, options?: RawAxiosRequestConfig): AxiosPromise<IndexTemplate> {
            return localVarFp.indexTemplatesRead(indexTemplateId, options).then((request) => request(axios, basePath));
        },
        /**
         * Rebuild the selected index template.
         * @param {string} indexTemplateId 
         * @param {object} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesRebuildCreate(indexTemplateId: string, data: object, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.indexTemplatesRebuildCreate(indexTemplateId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Reset the selected index template.
         * @param {string} indexTemplateId 
         * @param {object} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesResetCreate(indexTemplateId: string, data: object, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.indexTemplatesResetCreate(indexTemplateId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit an index template.
         * @param {string} indexTemplateId 
         * @param {IndexTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexTemplatesUpdate(indexTemplateId: string, data: IndexTemplate, options?: RawAxiosRequestConfig): AxiosPromise<IndexTemplate> {
            return localVarFp.indexTemplatesUpdate(indexTemplateId, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IndexTemplatesApi - object-oriented interface
 * @export
 * @class IndexTemplatesApi
 * @extends {BaseAPI}
 */
export class IndexTemplatesApi extends BaseAPI {
    /**
     * Create a new index template.
     * @param {IndexTemplate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexTemplatesApi
     */
    public indexTemplatesCreate(data: IndexTemplate, options?: RawAxiosRequestConfig) {
        return IndexTemplatesApiFp(this.configuration).indexTemplatesCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the selected index template.
     * @param {string} indexTemplateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexTemplatesApi
     */
    public indexTemplatesDelete(indexTemplateId: string, options?: RawAxiosRequestConfig) {
        return IndexTemplatesApiFp(this.configuration).indexTemplatesDelete(indexTemplateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a document type to an index template.
     * @param {string} indexTemplateId 
     * @param {DocumentTypeAdd} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexTemplatesApi
     */
    public indexTemplatesDocumentTypesAddCreate(indexTemplateId: string, data: DocumentTypeAdd, options?: RawAxiosRequestConfig) {
        return IndexTemplatesApiFp(this.configuration).indexTemplatesDocumentTypesAddCreate(indexTemplateId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of the document types associated with this index template.
     * @param {string} indexTemplateId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexTemplatesApi
     */
    public indexTemplatesDocumentTypesList(indexTemplateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return IndexTemplatesApiFp(this.configuration).indexTemplatesDocumentTypesList(indexTemplateId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a document type from an index template.
     * @param {string} indexTemplateId 
     * @param {DocumentTypeRemove} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexTemplatesApi
     */
    public indexTemplatesDocumentTypesRemoveCreate(indexTemplateId: string, data: DocumentTypeRemove, options?: RawAxiosRequestConfig) {
        return IndexTemplatesApiFp(this.configuration).indexTemplatesDocumentTypesRemoveCreate(indexTemplateId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the defined indexes template.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexTemplatesApi
     */
    public indexTemplatesList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return IndexTemplatesApiFp(this.configuration).indexTemplatesList(ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new index template node.
     * @param {string} indexTemplateId 
     * @param {IndexTemplateNodeWrite} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexTemplatesApi
     */
    public indexTemplatesNodesCreate(indexTemplateId: string, data: IndexTemplateNodeWrite, options?: RawAxiosRequestConfig) {
        return IndexTemplatesApiFp(this.configuration).indexTemplatesNodesCreate(indexTemplateId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the selected index template node.
     * @param {string} indexTemplateId 
     * @param {string} indexTemplateNodeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexTemplatesApi
     */
    public indexTemplatesNodesDelete(indexTemplateId: string, indexTemplateNodeId: string, options?: RawAxiosRequestConfig) {
        return IndexTemplatesApiFp(this.configuration).indexTemplatesNodesDelete(indexTemplateId, indexTemplateNodeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the template nodes for the selected index.
     * @param {string} indexTemplateId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexTemplatesApi
     */
    public indexTemplatesNodesList(indexTemplateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return IndexTemplatesApiFp(this.configuration).indexTemplatesNodesList(indexTemplateId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially edit an index template node.
     * @param {string} indexTemplateId 
     * @param {string} indexTemplateNodeId 
     * @param {IndexTemplateNodeWrite} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexTemplatesApi
     */
    public indexTemplatesNodesPartialUpdate(indexTemplateId: string, indexTemplateNodeId: string, data: IndexTemplateNodeWrite, options?: RawAxiosRequestConfig) {
        return IndexTemplatesApiFp(this.configuration).indexTemplatesNodesPartialUpdate(indexTemplateId, indexTemplateNodeId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of the selected index template node.
     * @param {string} indexTemplateId 
     * @param {string} indexTemplateNodeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexTemplatesApi
     */
    public indexTemplatesNodesRead(indexTemplateId: string, indexTemplateNodeId: string, options?: RawAxiosRequestConfig) {
        return IndexTemplatesApiFp(this.configuration).indexTemplatesNodesRead(indexTemplateId, indexTemplateNodeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit an index template node.
     * @param {string} indexTemplateId 
     * @param {string} indexTemplateNodeId 
     * @param {IndexTemplateNodeWrite} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexTemplatesApi
     */
    public indexTemplatesNodesUpdate(indexTemplateId: string, indexTemplateNodeId: string, data: IndexTemplateNodeWrite, options?: RawAxiosRequestConfig) {
        return IndexTemplatesApiFp(this.configuration).indexTemplatesNodesUpdate(indexTemplateId, indexTemplateNodeId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially edit an index template.
     * @param {string} indexTemplateId 
     * @param {IndexTemplate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexTemplatesApi
     */
    public indexTemplatesPartialUpdate(indexTemplateId: string, data: IndexTemplate, options?: RawAxiosRequestConfig) {
        return IndexTemplatesApiFp(this.configuration).indexTemplatesPartialUpdate(indexTemplateId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of the selected index template.
     * @param {string} indexTemplateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexTemplatesApi
     */
    public indexTemplatesRead(indexTemplateId: string, options?: RawAxiosRequestConfig) {
        return IndexTemplatesApiFp(this.configuration).indexTemplatesRead(indexTemplateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Rebuild the selected index template.
     * @param {string} indexTemplateId 
     * @param {object} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexTemplatesApi
     */
    public indexTemplatesRebuildCreate(indexTemplateId: string, data: object, options?: RawAxiosRequestConfig) {
        return IndexTemplatesApiFp(this.configuration).indexTemplatesRebuildCreate(indexTemplateId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reset the selected index template.
     * @param {string} indexTemplateId 
     * @param {object} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexTemplatesApi
     */
    public indexTemplatesResetCreate(indexTemplateId: string, data: object, options?: RawAxiosRequestConfig) {
        return IndexTemplatesApiFp(this.configuration).indexTemplatesResetCreate(indexTemplateId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit an index template.
     * @param {string} indexTemplateId 
     * @param {IndexTemplate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexTemplatesApi
     */
    public indexTemplatesUpdate(indexTemplateId: string, data: IndexTemplate, options?: RawAxiosRequestConfig) {
        return IndexTemplatesApiFp(this.configuration).indexTemplatesUpdate(indexTemplateId, data, options).then((request) => request(this.axios, this.basePath));
    }
}

