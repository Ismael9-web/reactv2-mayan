/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CabinetsDocumentsList200Response,
  DocumentTypesList200Response,
  DocumentsWorkflowInstancesLogEntriesTransitionsList200Response,
  WorkflowTemplate,
  WorkflowTemplateDocumentTypeAdd,
  WorkflowTemplateDocumentTypeRemove,
  WorkflowTemplateState,
  WorkflowTemplateStateAction,
  WorkflowTemplateStateEscalation,
  WorkflowTemplateTransition,
  WorkflowTemplateTransitionTrigger,
  WorkflowTemplatesList200Response,
  WorkflowTemplatesStatesActionsList200Response,
  WorkflowTemplatesStatesEscalationsList200Response,
  WorkflowTemplatesStatesList200Response,
  WorkflowTemplatesTransitionsFieldsList200Response,
  WorkflowTemplatesTransitionsTriggersList200Response,
  WorkflowTransitionField,
} from '../models/index';
import {
    CabinetsDocumentsList200ResponseFromJSON,
    CabinetsDocumentsList200ResponseToJSON,
    DocumentTypesList200ResponseFromJSON,
    DocumentTypesList200ResponseToJSON,
    DocumentsWorkflowInstancesLogEntriesTransitionsList200ResponseFromJSON,
    DocumentsWorkflowInstancesLogEntriesTransitionsList200ResponseToJSON,
    WorkflowTemplateFromJSON,
    WorkflowTemplateToJSON,
    WorkflowTemplateDocumentTypeAddFromJSON,
    WorkflowTemplateDocumentTypeAddToJSON,
    WorkflowTemplateDocumentTypeRemoveFromJSON,
    WorkflowTemplateDocumentTypeRemoveToJSON,
    WorkflowTemplateStateFromJSON,
    WorkflowTemplateStateToJSON,
    WorkflowTemplateStateActionFromJSON,
    WorkflowTemplateStateActionToJSON,
    WorkflowTemplateStateEscalationFromJSON,
    WorkflowTemplateStateEscalationToJSON,
    WorkflowTemplateTransitionFromJSON,
    WorkflowTemplateTransitionToJSON,
    WorkflowTemplateTransitionTriggerFromJSON,
    WorkflowTemplateTransitionTriggerToJSON,
    WorkflowTemplatesList200ResponseFromJSON,
    WorkflowTemplatesList200ResponseToJSON,
    WorkflowTemplatesStatesActionsList200ResponseFromJSON,
    WorkflowTemplatesStatesActionsList200ResponseToJSON,
    WorkflowTemplatesStatesEscalationsList200ResponseFromJSON,
    WorkflowTemplatesStatesEscalationsList200ResponseToJSON,
    WorkflowTemplatesStatesList200ResponseFromJSON,
    WorkflowTemplatesStatesList200ResponseToJSON,
    WorkflowTemplatesTransitionsFieldsList200ResponseFromJSON,
    WorkflowTemplatesTransitionsFieldsList200ResponseToJSON,
    WorkflowTemplatesTransitionsTriggersList200ResponseFromJSON,
    WorkflowTemplatesTransitionsTriggersList200ResponseToJSON,
    WorkflowTransitionFieldFromJSON,
    WorkflowTransitionFieldToJSON,
} from '../models/index';

export interface WorkflowTemplatesCreateRequest {
    data: Omit<WorkflowTemplate, 'document_types_add_url'|'document_types_remove_url'|'document_types_url'|'documents_url'|'id'|'image_url'|'states_url'|'transitions_url'|'url'>;
}

export interface WorkflowTemplatesDeleteRequest {
    workflowTemplateId: string;
}

export interface WorkflowTemplatesDocumentTypesAddCreateRequest {
    workflowTemplateId: string;
    data: WorkflowTemplateDocumentTypeAdd;
}

export interface WorkflowTemplatesDocumentTypesListRequest {
    workflowTemplateId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface WorkflowTemplatesDocumentTypesRemoveCreateRequest {
    workflowTemplateId: string;
    data: WorkflowTemplateDocumentTypeRemove;
}

export interface WorkflowTemplatesDocumentsListRequest {
    workflowTemplateId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface WorkflowTemplatesImageReadRequest {
    workflowTemplateId: string;
}

export interface WorkflowTemplatesListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface WorkflowTemplatesPartialUpdateRequest {
    workflowTemplateId: string;
    data: Omit<WorkflowTemplate, 'document_types_add_url'|'document_types_remove_url'|'document_types_url'|'documents_url'|'id'|'image_url'|'states_url'|'transitions_url'|'url'>;
}

export interface WorkflowTemplatesReadRequest {
    workflowTemplateId: string;
}

export interface WorkflowTemplatesStatesActionsCreateRequest {
    workflowTemplateId: string;
    workflowTemplateStateId: string;
    data: Omit<WorkflowTemplateStateAction, 'id'|'url'|'workflow_template_state_id'|'workflow_template_state_url'>;
}

export interface WorkflowTemplatesStatesActionsDeleteRequest {
    workflowTemplateId: string;
    workflowTemplateStateId: string;
    workflowTemplateStateActionId: string;
}

export interface WorkflowTemplatesStatesActionsListRequest {
    workflowTemplateId: string;
    workflowTemplateStateId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface WorkflowTemplatesStatesActionsPartialUpdateRequest {
    workflowTemplateId: string;
    workflowTemplateStateId: string;
    workflowTemplateStateActionId: string;
    data: Omit<WorkflowTemplateStateAction, 'id'|'url'|'workflow_template_state_id'|'workflow_template_state_url'>;
}

export interface WorkflowTemplatesStatesActionsReadRequest {
    workflowTemplateId: string;
    workflowTemplateStateId: string;
    workflowTemplateStateActionId: string;
}

export interface WorkflowTemplatesStatesActionsUpdateRequest {
    workflowTemplateId: string;
    workflowTemplateStateId: string;
    workflowTemplateStateActionId: string;
    data: Omit<WorkflowTemplateStateAction, 'id'|'url'|'workflow_template_state_id'|'workflow_template_state_url'>;
}

export interface WorkflowTemplatesStatesCreateRequest {
    workflowTemplateId: string;
    data: Omit<WorkflowTemplateState, 'actions_url'|'documents_url'|'escalations_url'|'id'|'url'|'workflow_template_id'|'workflow_template_url'>;
}

export interface WorkflowTemplatesStatesDeleteRequest {
    workflowTemplateId: string;
    workflowTemplateStateId: string;
}

export interface WorkflowTemplatesStatesDocumentsListRequest {
    workflowTemplateId: string;
    workflowTemplateStateId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface WorkflowTemplatesStatesEscalationsCreateRequest {
    workflowTemplateId: string;
    workflowTemplateStateId: string;
    data: Omit<WorkflowTemplateStateEscalation, 'id'|'url'|'workflow_template_state_id'|'workflow_template_state_url'|'workflow_template_transition_url'>;
}

export interface WorkflowTemplatesStatesEscalationsDeleteRequest {
    workflowTemplateId: string;
    workflowTemplateStateId: string;
    workflowTemplateStateEscalationId: string;
}

export interface WorkflowTemplatesStatesEscalationsListRequest {
    workflowTemplateId: string;
    workflowTemplateStateId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface WorkflowTemplatesStatesEscalationsPartialUpdateRequest {
    workflowTemplateId: string;
    workflowTemplateStateId: string;
    workflowTemplateStateEscalationId: string;
    data: Omit<WorkflowTemplateStateEscalation, 'id'|'url'|'workflow_template_state_id'|'workflow_template_state_url'|'workflow_template_transition_url'>;
}

export interface WorkflowTemplatesStatesEscalationsReadRequest {
    workflowTemplateId: string;
    workflowTemplateStateId: string;
    workflowTemplateStateEscalationId: string;
}

export interface WorkflowTemplatesStatesEscalationsUpdateRequest {
    workflowTemplateId: string;
    workflowTemplateStateId: string;
    workflowTemplateStateEscalationId: string;
    data: Omit<WorkflowTemplateStateEscalation, 'id'|'url'|'workflow_template_state_id'|'workflow_template_state_url'|'workflow_template_transition_url'>;
}

export interface WorkflowTemplatesStatesListRequest {
    workflowTemplateId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface WorkflowTemplatesStatesPartialUpdateRequest {
    workflowTemplateId: string;
    workflowTemplateStateId: string;
    data: Omit<WorkflowTemplateState, 'actions_url'|'documents_url'|'escalations_url'|'id'|'url'|'workflow_template_id'|'workflow_template_url'>;
}

export interface WorkflowTemplatesStatesReadRequest {
    workflowTemplateId: string;
    workflowTemplateStateId: string;
}

export interface WorkflowTemplatesStatesUpdateRequest {
    workflowTemplateId: string;
    workflowTemplateStateId: string;
    data: Omit<WorkflowTemplateState, 'actions_url'|'documents_url'|'escalations_url'|'id'|'url'|'workflow_template_id'|'workflow_template_url'>;
}

export interface WorkflowTemplatesTransitionsCreateRequest {
    workflowTemplateId: string;
    data: Omit<WorkflowTemplateTransition, 'field_list_url'|'id'|'trigger_list_url'|'url'|'workflow_template_id'|'workflow_template_url'>;
}

export interface WorkflowTemplatesTransitionsDeleteRequest {
    workflowTemplateId: string;
    workflowTemplateTransitionId: string;
}

export interface WorkflowTemplatesTransitionsFieldsCreateRequest {
    workflowTemplateId: string;
    workflowTemplateTransitionId: string;
    data: Omit<WorkflowTransitionField, 'id'|'url'|'workflow_template_url'|'workflow_transition_id'|'workflow_transition_url'>;
}

export interface WorkflowTemplatesTransitionsFieldsDeleteRequest {
    workflowTemplateId: string;
    workflowTemplateTransitionId: string;
    workflowTemplateTransitionFieldId: string;
}

export interface WorkflowTemplatesTransitionsFieldsListRequest {
    workflowTemplateId: string;
    workflowTemplateTransitionId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface WorkflowTemplatesTransitionsFieldsPartialUpdateRequest {
    workflowTemplateId: string;
    workflowTemplateTransitionId: string;
    workflowTemplateTransitionFieldId: string;
    data: Omit<WorkflowTransitionField, 'id'|'url'|'workflow_template_url'|'workflow_transition_id'|'workflow_transition_url'>;
}

export interface WorkflowTemplatesTransitionsFieldsReadRequest {
    workflowTemplateId: string;
    workflowTemplateTransitionId: string;
    workflowTemplateTransitionFieldId: string;
}

export interface WorkflowTemplatesTransitionsFieldsUpdateRequest {
    workflowTemplateId: string;
    workflowTemplateTransitionId: string;
    workflowTemplateTransitionFieldId: string;
    data: Omit<WorkflowTransitionField, 'id'|'url'|'workflow_template_url'|'workflow_transition_id'|'workflow_transition_url'>;
}

export interface WorkflowTemplatesTransitionsListRequest {
    workflowTemplateId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface WorkflowTemplatesTransitionsPartialUpdateRequest {
    workflowTemplateId: string;
    workflowTemplateTransitionId: string;
    data: Omit<WorkflowTemplateTransition, 'field_list_url'|'id'|'trigger_list_url'|'url'|'workflow_template_id'|'workflow_template_url'>;
}

export interface WorkflowTemplatesTransitionsReadRequest {
    workflowTemplateId: string;
    workflowTemplateTransitionId: string;
}

export interface WorkflowTemplatesTransitionsTriggersCreateRequest {
    workflowTemplateId: string;
    workflowTemplateTransitionId: string;
    data: Omit<WorkflowTemplateTransitionTrigger, 'id'|'url'|'workflow_template_url'|'workflow_transition_id'|'workflow_transition_url'>;
}

export interface WorkflowTemplatesTransitionsTriggersDeleteRequest {
    workflowTemplateId: string;
    workflowTemplateTransitionId: string;
    workflowTemplateTransitionTriggerId: string;
}

export interface WorkflowTemplatesTransitionsTriggersListRequest {
    workflowTemplateId: string;
    workflowTemplateTransitionId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface WorkflowTemplatesTransitionsTriggersPartialUpdateRequest {
    workflowTemplateId: string;
    workflowTemplateTransitionId: string;
    workflowTemplateTransitionTriggerId: string;
    data: Omit<WorkflowTemplateTransitionTrigger, 'id'|'url'|'workflow_template_url'|'workflow_transition_id'|'workflow_transition_url'>;
}

export interface WorkflowTemplatesTransitionsTriggersReadRequest {
    workflowTemplateId: string;
    workflowTemplateTransitionId: string;
    workflowTemplateTransitionTriggerId: string;
}

export interface WorkflowTemplatesTransitionsTriggersUpdateRequest {
    workflowTemplateId: string;
    workflowTemplateTransitionId: string;
    workflowTemplateTransitionTriggerId: string;
    data: Omit<WorkflowTemplateTransitionTrigger, 'id'|'url'|'workflow_template_url'|'workflow_transition_id'|'workflow_transition_url'>;
}

export interface WorkflowTemplatesTransitionsUpdateRequest {
    workflowTemplateId: string;
    workflowTemplateTransitionId: string;
    data: Omit<WorkflowTemplateTransition, 'field_list_url'|'id'|'trigger_list_url'|'url'|'workflow_template_id'|'workflow_template_url'>;
}

export interface WorkflowTemplatesUpdateRequest {
    workflowTemplateId: string;
    data: Omit<WorkflowTemplate, 'document_types_add_url'|'document_types_remove_url'|'document_types_url'|'documents_url'|'id'|'image_url'|'states_url'|'transitions_url'|'url'>;
}

/**
 * 
 */
export class WorkflowTemplatesApi extends runtime.BaseAPI {

    /**
     * Create a new workflow template.
     */
    async workflowTemplatesCreateRaw(requestParameters: WorkflowTemplatesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplate>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateFromJSON(jsonValue));
    }

    /**
     * Create a new workflow template.
     */
    async workflowTemplatesCreate(requestParameters: WorkflowTemplatesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplate> {
        const response = await this.workflowTemplatesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected workflow template.
     */
    async workflowTemplatesDeleteRaw(requestParameters: WorkflowTemplatesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected workflow template.
     */
    async workflowTemplatesDelete(requestParameters: WorkflowTemplatesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workflowTemplatesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Add a document type to a workflow template.
     */
    async workflowTemplatesDocumentTypesAddCreateRaw(requestParameters: WorkflowTemplatesDocumentTypesAddCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateDocumentTypeAdd>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesDocumentTypesAddCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesDocumentTypesAddCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/document_types/add/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateDocumentTypeAddToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateDocumentTypeAddFromJSON(jsonValue));
    }

    /**
     * Add a document type to a workflow template.
     */
    async workflowTemplatesDocumentTypesAddCreate(requestParameters: WorkflowTemplatesDocumentTypesAddCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateDocumentTypeAdd> {
        const response = await this.workflowTemplatesDocumentTypesAddCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all the document types attached to a workflow template.
     */
    async workflowTemplatesDocumentTypesListRaw(requestParameters: WorkflowTemplatesDocumentTypesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentTypesList200Response>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesDocumentTypesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/document_types/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentTypesList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the document types attached to a workflow template.
     */
    async workflowTemplatesDocumentTypesList(requestParameters: WorkflowTemplatesDocumentTypesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentTypesList200Response> {
        const response = await this.workflowTemplatesDocumentTypesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a document type from a workflow template.
     */
    async workflowTemplatesDocumentTypesRemoveCreateRaw(requestParameters: WorkflowTemplatesDocumentTypesRemoveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateDocumentTypeRemove>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesDocumentTypesRemoveCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesDocumentTypesRemoveCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/document_types/remove/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateDocumentTypeRemoveToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateDocumentTypeRemoveFromJSON(jsonValue));
    }

    /**
     * Remove a document type from a workflow template.
     */
    async workflowTemplatesDocumentTypesRemoveCreate(requestParameters: WorkflowTemplatesDocumentTypesRemoveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateDocumentTypeRemove> {
        const response = await this.workflowTemplatesDocumentTypesRemoveCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a list of all the document executing a specific workflow template.
     */
    async workflowTemplatesDocumentsListRaw(requestParameters: WorkflowTemplatesDocumentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CabinetsDocumentsList200Response>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesDocumentsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/documents/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CabinetsDocumentsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Return a list of all the document executing a specific workflow template.
     */
    async workflowTemplatesDocumentsList(requestParameters: WorkflowTemplatesDocumentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CabinetsDocumentsList200Response> {
        const response = await this.workflowTemplatesDocumentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an image representation of the selected workflow template.
     */
    async workflowTemplatesImageReadRaw(requestParameters: WorkflowTemplatesImageReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesImageRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/image/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns an image representation of the selected workflow template.
     */
    async workflowTemplatesImageRead(requestParameters: WorkflowTemplatesImageReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workflowTemplatesImageReadRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all the workflow templates.
     */
    async workflowTemplatesListRaw(requestParameters: WorkflowTemplatesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplatesList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplatesList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the workflow templates.
     */
    async workflowTemplatesList(requestParameters: WorkflowTemplatesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplatesList200Response> {
        const response = await this.workflowTemplatesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected workflow template.
     */
    async workflowTemplatesPartialUpdateRaw(requestParameters: WorkflowTemplatesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplate>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateFromJSON(jsonValue));
    }

    /**
     * Edit the selected workflow template.
     */
    async workflowTemplatesPartialUpdate(requestParameters: WorkflowTemplatesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplate> {
        const response = await this.workflowTemplatesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the details of the selected workflow template.
     */
    async workflowTemplatesReadRaw(requestParameters: WorkflowTemplatesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplate>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateFromJSON(jsonValue));
    }

    /**
     * Return the details of the selected workflow template.
     */
    async workflowTemplatesRead(requestParameters: WorkflowTemplatesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplate> {
        const response = await this.workflowTemplatesReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new workflow template state action.
     */
    async workflowTemplatesStatesActionsCreateRaw(requestParameters: WorkflowTemplatesStatesActionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateStateAction>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesActionsCreate().'
            );
        }

        if (requestParameters['workflowTemplateStateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateId',
                'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesActionsCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesStatesActionsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/actions/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateStateActionToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateStateActionFromJSON(jsonValue));
    }

    /**
     * Create a new workflow template state action.
     */
    async workflowTemplatesStatesActionsCreate(requestParameters: WorkflowTemplatesStatesActionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateStateAction> {
        const response = await this.workflowTemplatesStatesActionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected workflow template state action.
     */
    async workflowTemplatesStatesActionsDeleteRaw(requestParameters: WorkflowTemplatesStatesActionsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesActionsDelete().'
            );
        }

        if (requestParameters['workflowTemplateStateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateId',
                'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesActionsDelete().'
            );
        }

        if (requestParameters['workflowTemplateStateActionId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateActionId',
                'Required parameter "workflowTemplateStateActionId" was null or undefined when calling workflowTemplatesStatesActionsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/actions/{workflow_template_state_action_id}/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_action_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateActionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected workflow template state action.
     */
    async workflowTemplatesStatesActionsDelete(requestParameters: WorkflowTemplatesStatesActionsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workflowTemplatesStatesActionsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all the workflow template state actions.
     */
    async workflowTemplatesStatesActionsListRaw(requestParameters: WorkflowTemplatesStatesActionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplatesStatesActionsList200Response>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesActionsList().'
            );
        }

        if (requestParameters['workflowTemplateStateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateId',
                'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesActionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/actions/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplatesStatesActionsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the workflow template state actions.
     */
    async workflowTemplatesStatesActionsList(requestParameters: WorkflowTemplatesStatesActionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplatesStatesActionsList200Response> {
        const response = await this.workflowTemplatesStatesActionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected workflow template state action.
     */
    async workflowTemplatesStatesActionsPartialUpdateRaw(requestParameters: WorkflowTemplatesStatesActionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateStateAction>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesActionsPartialUpdate().'
            );
        }

        if (requestParameters['workflowTemplateStateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateId',
                'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesActionsPartialUpdate().'
            );
        }

        if (requestParameters['workflowTemplateStateActionId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateActionId',
                'Required parameter "workflowTemplateStateActionId" was null or undefined when calling workflowTemplatesStatesActionsPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesStatesActionsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/actions/{workflow_template_state_action_id}/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_action_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateActionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateStateActionToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateStateActionFromJSON(jsonValue));
    }

    /**
     * Edit the selected workflow template state action.
     */
    async workflowTemplatesStatesActionsPartialUpdate(requestParameters: WorkflowTemplatesStatesActionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateStateAction> {
        const response = await this.workflowTemplatesStatesActionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the details of the selected workflow template state action.
     */
    async workflowTemplatesStatesActionsReadRaw(requestParameters: WorkflowTemplatesStatesActionsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateStateAction>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesActionsRead().'
            );
        }

        if (requestParameters['workflowTemplateStateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateId',
                'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesActionsRead().'
            );
        }

        if (requestParameters['workflowTemplateStateActionId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateActionId',
                'Required parameter "workflowTemplateStateActionId" was null or undefined when calling workflowTemplatesStatesActionsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/actions/{workflow_template_state_action_id}/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_action_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateActionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateStateActionFromJSON(jsonValue));
    }

    /**
     * Return the details of the selected workflow template state action.
     */
    async workflowTemplatesStatesActionsRead(requestParameters: WorkflowTemplatesStatesActionsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateStateAction> {
        const response = await this.workflowTemplatesStatesActionsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected workflow template state action.
     */
    async workflowTemplatesStatesActionsUpdateRaw(requestParameters: WorkflowTemplatesStatesActionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateStateAction>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesActionsUpdate().'
            );
        }

        if (requestParameters['workflowTemplateStateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateId',
                'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesActionsUpdate().'
            );
        }

        if (requestParameters['workflowTemplateStateActionId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateActionId',
                'Required parameter "workflowTemplateStateActionId" was null or undefined when calling workflowTemplatesStatesActionsUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesStatesActionsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/actions/{workflow_template_state_action_id}/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_action_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateActionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateStateActionToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateStateActionFromJSON(jsonValue));
    }

    /**
     * Edit the selected workflow template state action.
     */
    async workflowTemplatesStatesActionsUpdate(requestParameters: WorkflowTemplatesStatesActionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateStateAction> {
        const response = await this.workflowTemplatesStatesActionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new workflow template state.
     */
    async workflowTemplatesStatesCreateRaw(requestParameters: WorkflowTemplatesStatesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateState>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesStatesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/states/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateStateToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateStateFromJSON(jsonValue));
    }

    /**
     * Create a new workflow template state.
     */
    async workflowTemplatesStatesCreate(requestParameters: WorkflowTemplatesStatesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateState> {
        const response = await this.workflowTemplatesStatesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected workflow template state.
     */
    async workflowTemplatesStatesDeleteRaw(requestParameters: WorkflowTemplatesStatesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesDelete().'
            );
        }

        if (requestParameters['workflowTemplateStateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateId',
                'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected workflow template state.
     */
    async workflowTemplatesStatesDelete(requestParameters: WorkflowTemplatesStatesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workflowTemplatesStatesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Return a list of all the documents at a specific workflow template state.
     */
    async workflowTemplatesStatesDocumentsListRaw(requestParameters: WorkflowTemplatesStatesDocumentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CabinetsDocumentsList200Response>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesDocumentsList().'
            );
        }

        if (requestParameters['workflowTemplateStateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateId',
                'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesDocumentsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/documents/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CabinetsDocumentsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Return a list of all the documents at a specific workflow template state.
     */
    async workflowTemplatesStatesDocumentsList(requestParameters: WorkflowTemplatesStatesDocumentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CabinetsDocumentsList200Response> {
        const response = await this.workflowTemplatesStatesDocumentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new workflow template state escalation.
     */
    async workflowTemplatesStatesEscalationsCreateRaw(requestParameters: WorkflowTemplatesStatesEscalationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateStateEscalation>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesEscalationsCreate().'
            );
        }

        if (requestParameters['workflowTemplateStateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateId',
                'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesEscalationsCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesStatesEscalationsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/escalations/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateStateEscalationToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateStateEscalationFromJSON(jsonValue));
    }

    /**
     * Create a new workflow template state escalation.
     */
    async workflowTemplatesStatesEscalationsCreate(requestParameters: WorkflowTemplatesStatesEscalationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateStateEscalation> {
        const response = await this.workflowTemplatesStatesEscalationsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected workflow template state escalation.
     */
    async workflowTemplatesStatesEscalationsDeleteRaw(requestParameters: WorkflowTemplatesStatesEscalationsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesEscalationsDelete().'
            );
        }

        if (requestParameters['workflowTemplateStateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateId',
                'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesEscalationsDelete().'
            );
        }

        if (requestParameters['workflowTemplateStateEscalationId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateEscalationId',
                'Required parameter "workflowTemplateStateEscalationId" was null or undefined when calling workflowTemplatesStatesEscalationsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/escalations/{workflow_template_state_escalation_id}/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_escalation_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateEscalationId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected workflow template state escalation.
     */
    async workflowTemplatesStatesEscalationsDelete(requestParameters: WorkflowTemplatesStatesEscalationsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workflowTemplatesStatesEscalationsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all the workflow template state escalations.
     */
    async workflowTemplatesStatesEscalationsListRaw(requestParameters: WorkflowTemplatesStatesEscalationsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplatesStatesEscalationsList200Response>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesEscalationsList().'
            );
        }

        if (requestParameters['workflowTemplateStateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateId',
                'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesEscalationsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/escalations/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplatesStatesEscalationsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the workflow template state escalations.
     */
    async workflowTemplatesStatesEscalationsList(requestParameters: WorkflowTemplatesStatesEscalationsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplatesStatesEscalationsList200Response> {
        const response = await this.workflowTemplatesStatesEscalationsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected workflow template state escalation.
     */
    async workflowTemplatesStatesEscalationsPartialUpdateRaw(requestParameters: WorkflowTemplatesStatesEscalationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateStateEscalation>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesEscalationsPartialUpdate().'
            );
        }

        if (requestParameters['workflowTemplateStateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateId',
                'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesEscalationsPartialUpdate().'
            );
        }

        if (requestParameters['workflowTemplateStateEscalationId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateEscalationId',
                'Required parameter "workflowTemplateStateEscalationId" was null or undefined when calling workflowTemplatesStatesEscalationsPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesStatesEscalationsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/escalations/{workflow_template_state_escalation_id}/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_escalation_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateEscalationId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateStateEscalationToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateStateEscalationFromJSON(jsonValue));
    }

    /**
     * Edit the selected workflow template state escalation.
     */
    async workflowTemplatesStatesEscalationsPartialUpdate(requestParameters: WorkflowTemplatesStatesEscalationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateStateEscalation> {
        const response = await this.workflowTemplatesStatesEscalationsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the details of the selected workflow template state escalation.
     */
    async workflowTemplatesStatesEscalationsReadRaw(requestParameters: WorkflowTemplatesStatesEscalationsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateStateEscalation>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesEscalationsRead().'
            );
        }

        if (requestParameters['workflowTemplateStateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateId',
                'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesEscalationsRead().'
            );
        }

        if (requestParameters['workflowTemplateStateEscalationId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateEscalationId',
                'Required parameter "workflowTemplateStateEscalationId" was null or undefined when calling workflowTemplatesStatesEscalationsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/escalations/{workflow_template_state_escalation_id}/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_escalation_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateEscalationId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateStateEscalationFromJSON(jsonValue));
    }

    /**
     * Return the details of the selected workflow template state escalation.
     */
    async workflowTemplatesStatesEscalationsRead(requestParameters: WorkflowTemplatesStatesEscalationsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateStateEscalation> {
        const response = await this.workflowTemplatesStatesEscalationsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected workflow template state escalation.
     */
    async workflowTemplatesStatesEscalationsUpdateRaw(requestParameters: WorkflowTemplatesStatesEscalationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateStateEscalation>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesEscalationsUpdate().'
            );
        }

        if (requestParameters['workflowTemplateStateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateId',
                'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesEscalationsUpdate().'
            );
        }

        if (requestParameters['workflowTemplateStateEscalationId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateEscalationId',
                'Required parameter "workflowTemplateStateEscalationId" was null or undefined when calling workflowTemplatesStatesEscalationsUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesStatesEscalationsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/escalations/{workflow_template_state_escalation_id}/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_escalation_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateEscalationId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateStateEscalationToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateStateEscalationFromJSON(jsonValue));
    }

    /**
     * Edit the selected workflow template state escalation.
     */
    async workflowTemplatesStatesEscalationsUpdate(requestParameters: WorkflowTemplatesStatesEscalationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateStateEscalation> {
        const response = await this.workflowTemplatesStatesEscalationsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all the workflow template states.
     */
    async workflowTemplatesStatesListRaw(requestParameters: WorkflowTemplatesStatesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplatesStatesList200Response>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/states/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplatesStatesList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the workflow template states.
     */
    async workflowTemplatesStatesList(requestParameters: WorkflowTemplatesStatesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplatesStatesList200Response> {
        const response = await this.workflowTemplatesStatesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected workflow template state.
     */
    async workflowTemplatesStatesPartialUpdateRaw(requestParameters: WorkflowTemplatesStatesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateState>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesPartialUpdate().'
            );
        }

        if (requestParameters['workflowTemplateStateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateId',
                'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesStatesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateStateToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateStateFromJSON(jsonValue));
    }

    /**
     * Edit the selected workflow template state.
     */
    async workflowTemplatesStatesPartialUpdate(requestParameters: WorkflowTemplatesStatesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateState> {
        const response = await this.workflowTemplatesStatesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the details of the selected workflow template state.
     */
    async workflowTemplatesStatesReadRaw(requestParameters: WorkflowTemplatesStatesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateState>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesRead().'
            );
        }

        if (requestParameters['workflowTemplateStateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateId',
                'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateStateFromJSON(jsonValue));
    }

    /**
     * Return the details of the selected workflow template state.
     */
    async workflowTemplatesStatesRead(requestParameters: WorkflowTemplatesStatesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateState> {
        const response = await this.workflowTemplatesStatesReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected workflow template state.
     */
    async workflowTemplatesStatesUpdateRaw(requestParameters: WorkflowTemplatesStatesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateState>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesUpdate().'
            );
        }

        if (requestParameters['workflowTemplateStateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateStateId',
                'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesStatesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateStateToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateStateFromJSON(jsonValue));
    }

    /**
     * Edit the selected workflow template state.
     */
    async workflowTemplatesStatesUpdate(requestParameters: WorkflowTemplatesStatesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateState> {
        const response = await this.workflowTemplatesStatesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new workflow template transition.
     */
    async workflowTemplatesTransitionsCreateRaw(requestParameters: WorkflowTemplatesTransitionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateTransition>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesTransitionsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/transitions/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateTransitionToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateTransitionFromJSON(jsonValue));
    }

    /**
     * Create a new workflow template transition.
     */
    async workflowTemplatesTransitionsCreate(requestParameters: WorkflowTemplatesTransitionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateTransition> {
        const response = await this.workflowTemplatesTransitionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected workflow template transition.
     */
    async workflowTemplatesTransitionsDeleteRaw(requestParameters: WorkflowTemplatesTransitionsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsDelete().'
            );
        }

        if (requestParameters['workflowTemplateTransitionId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionId',
                'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected workflow template transition.
     */
    async workflowTemplatesTransitionsDelete(requestParameters: WorkflowTemplatesTransitionsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workflowTemplatesTransitionsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new workflow template transition field.
     */
    async workflowTemplatesTransitionsFieldsCreateRaw(requestParameters: WorkflowTemplatesTransitionsFieldsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTransitionField>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsFieldsCreate().'
            );
        }

        if (requestParameters['workflowTemplateTransitionId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionId',
                'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsFieldsCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesTransitionsFieldsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/fields/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTransitionFieldToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTransitionFieldFromJSON(jsonValue));
    }

    /**
     * Create a new workflow template transition field.
     */
    async workflowTemplatesTransitionsFieldsCreate(requestParameters: WorkflowTemplatesTransitionsFieldsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTransitionField> {
        const response = await this.workflowTemplatesTransitionsFieldsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected workflow template transition field.
     */
    async workflowTemplatesTransitionsFieldsDeleteRaw(requestParameters: WorkflowTemplatesTransitionsFieldsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsFieldsDelete().'
            );
        }

        if (requestParameters['workflowTemplateTransitionId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionId',
                'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsFieldsDelete().'
            );
        }

        if (requestParameters['workflowTemplateTransitionFieldId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionFieldId',
                'Required parameter "workflowTemplateTransitionFieldId" was null or undefined when calling workflowTemplatesTransitionsFieldsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/fields/{workflow_template_transition_field_id}`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_field_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionFieldId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected workflow template transition field.
     */
    async workflowTemplatesTransitionsFieldsDelete(requestParameters: WorkflowTemplatesTransitionsFieldsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workflowTemplatesTransitionsFieldsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all the workflow template transition fields.
     */
    async workflowTemplatesTransitionsFieldsListRaw(requestParameters: WorkflowTemplatesTransitionsFieldsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplatesTransitionsFieldsList200Response>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsFieldsList().'
            );
        }

        if (requestParameters['workflowTemplateTransitionId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionId',
                'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsFieldsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/fields/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplatesTransitionsFieldsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the workflow template transition fields.
     */
    async workflowTemplatesTransitionsFieldsList(requestParameters: WorkflowTemplatesTransitionsFieldsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplatesTransitionsFieldsList200Response> {
        const response = await this.workflowTemplatesTransitionsFieldsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected workflow template transition field.
     */
    async workflowTemplatesTransitionsFieldsPartialUpdateRaw(requestParameters: WorkflowTemplatesTransitionsFieldsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTransitionField>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsFieldsPartialUpdate().'
            );
        }

        if (requestParameters['workflowTemplateTransitionId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionId',
                'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsFieldsPartialUpdate().'
            );
        }

        if (requestParameters['workflowTemplateTransitionFieldId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionFieldId',
                'Required parameter "workflowTemplateTransitionFieldId" was null or undefined when calling workflowTemplatesTransitionsFieldsPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesTransitionsFieldsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/fields/{workflow_template_transition_field_id}`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_field_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionFieldId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTransitionFieldToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTransitionFieldFromJSON(jsonValue));
    }

    /**
     * Edit the selected workflow template transition field.
     */
    async workflowTemplatesTransitionsFieldsPartialUpdate(requestParameters: WorkflowTemplatesTransitionsFieldsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTransitionField> {
        const response = await this.workflowTemplatesTransitionsFieldsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the details of the selected workflow template transition field.
     */
    async workflowTemplatesTransitionsFieldsReadRaw(requestParameters: WorkflowTemplatesTransitionsFieldsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTransitionField>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsFieldsRead().'
            );
        }

        if (requestParameters['workflowTemplateTransitionId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionId',
                'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsFieldsRead().'
            );
        }

        if (requestParameters['workflowTemplateTransitionFieldId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionFieldId',
                'Required parameter "workflowTemplateTransitionFieldId" was null or undefined when calling workflowTemplatesTransitionsFieldsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/fields/{workflow_template_transition_field_id}`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_field_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionFieldId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTransitionFieldFromJSON(jsonValue));
    }

    /**
     * Return the details of the selected workflow template transition field.
     */
    async workflowTemplatesTransitionsFieldsRead(requestParameters: WorkflowTemplatesTransitionsFieldsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTransitionField> {
        const response = await this.workflowTemplatesTransitionsFieldsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected workflow template transition field.
     */
    async workflowTemplatesTransitionsFieldsUpdateRaw(requestParameters: WorkflowTemplatesTransitionsFieldsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTransitionField>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsFieldsUpdate().'
            );
        }

        if (requestParameters['workflowTemplateTransitionId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionId',
                'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsFieldsUpdate().'
            );
        }

        if (requestParameters['workflowTemplateTransitionFieldId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionFieldId',
                'Required parameter "workflowTemplateTransitionFieldId" was null or undefined when calling workflowTemplatesTransitionsFieldsUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesTransitionsFieldsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/fields/{workflow_template_transition_field_id}`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_field_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionFieldId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTransitionFieldToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTransitionFieldFromJSON(jsonValue));
    }

    /**
     * Edit the selected workflow template transition field.
     */
    async workflowTemplatesTransitionsFieldsUpdate(requestParameters: WorkflowTemplatesTransitionsFieldsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTransitionField> {
        const response = await this.workflowTemplatesTransitionsFieldsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all the workflow template transitions.
     */
    async workflowTemplatesTransitionsListRaw(requestParameters: WorkflowTemplatesTransitionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentsWorkflowInstancesLogEntriesTransitionsList200Response>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/transitions/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentsWorkflowInstancesLogEntriesTransitionsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the workflow template transitions.
     */
    async workflowTemplatesTransitionsList(requestParameters: WorkflowTemplatesTransitionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentsWorkflowInstancesLogEntriesTransitionsList200Response> {
        const response = await this.workflowTemplatesTransitionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected workflow template transition.
     */
    async workflowTemplatesTransitionsPartialUpdateRaw(requestParameters: WorkflowTemplatesTransitionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateTransition>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsPartialUpdate().'
            );
        }

        if (requestParameters['workflowTemplateTransitionId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionId',
                'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesTransitionsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateTransitionToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateTransitionFromJSON(jsonValue));
    }

    /**
     * Edit the selected workflow template transition.
     */
    async workflowTemplatesTransitionsPartialUpdate(requestParameters: WorkflowTemplatesTransitionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateTransition> {
        const response = await this.workflowTemplatesTransitionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the details of the selected workflow template transition.
     */
    async workflowTemplatesTransitionsReadRaw(requestParameters: WorkflowTemplatesTransitionsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateTransition>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsRead().'
            );
        }

        if (requestParameters['workflowTemplateTransitionId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionId',
                'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateTransitionFromJSON(jsonValue));
    }

    /**
     * Return the details of the selected workflow template transition.
     */
    async workflowTemplatesTransitionsRead(requestParameters: WorkflowTemplatesTransitionsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateTransition> {
        const response = await this.workflowTemplatesTransitionsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new workflow template transition trigger.
     */
    async workflowTemplatesTransitionsTriggersCreateRaw(requestParameters: WorkflowTemplatesTransitionsTriggersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateTransitionTrigger>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsTriggersCreate().'
            );
        }

        if (requestParameters['workflowTemplateTransitionId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionId',
                'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsTriggersCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesTransitionsTriggersCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/triggers/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateTransitionTriggerToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateTransitionTriggerFromJSON(jsonValue));
    }

    /**
     * Create a new workflow template transition trigger.
     */
    async workflowTemplatesTransitionsTriggersCreate(requestParameters: WorkflowTemplatesTransitionsTriggersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateTransitionTrigger> {
        const response = await this.workflowTemplatesTransitionsTriggersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected workflow template transition trigger.
     */
    async workflowTemplatesTransitionsTriggersDeleteRaw(requestParameters: WorkflowTemplatesTransitionsTriggersDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsTriggersDelete().'
            );
        }

        if (requestParameters['workflowTemplateTransitionId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionId',
                'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsTriggersDelete().'
            );
        }

        if (requestParameters['workflowTemplateTransitionTriggerId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionTriggerId',
                'Required parameter "workflowTemplateTransitionTriggerId" was null or undefined when calling workflowTemplatesTransitionsTriggersDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/triggers/{workflow_template_transition_trigger_id}`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_trigger_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionTriggerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected workflow template transition trigger.
     */
    async workflowTemplatesTransitionsTriggersDelete(requestParameters: WorkflowTemplatesTransitionsTriggersDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workflowTemplatesTransitionsTriggersDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all the workflow template transition triggers.
     */
    async workflowTemplatesTransitionsTriggersListRaw(requestParameters: WorkflowTemplatesTransitionsTriggersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplatesTransitionsTriggersList200Response>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsTriggersList().'
            );
        }

        if (requestParameters['workflowTemplateTransitionId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionId',
                'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsTriggersList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/triggers/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplatesTransitionsTriggersList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the workflow template transition triggers.
     */
    async workflowTemplatesTransitionsTriggersList(requestParameters: WorkflowTemplatesTransitionsTriggersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplatesTransitionsTriggersList200Response> {
        const response = await this.workflowTemplatesTransitionsTriggersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected workflow template transition trigger.
     */
    async workflowTemplatesTransitionsTriggersPartialUpdateRaw(requestParameters: WorkflowTemplatesTransitionsTriggersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateTransitionTrigger>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsTriggersPartialUpdate().'
            );
        }

        if (requestParameters['workflowTemplateTransitionId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionId',
                'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsTriggersPartialUpdate().'
            );
        }

        if (requestParameters['workflowTemplateTransitionTriggerId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionTriggerId',
                'Required parameter "workflowTemplateTransitionTriggerId" was null or undefined when calling workflowTemplatesTransitionsTriggersPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesTransitionsTriggersPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/triggers/{workflow_template_transition_trigger_id}`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_trigger_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionTriggerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateTransitionTriggerToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateTransitionTriggerFromJSON(jsonValue));
    }

    /**
     * Edit the selected workflow template transition trigger.
     */
    async workflowTemplatesTransitionsTriggersPartialUpdate(requestParameters: WorkflowTemplatesTransitionsTriggersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateTransitionTrigger> {
        const response = await this.workflowTemplatesTransitionsTriggersPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the details of the selected workflow template transition trigger.
     */
    async workflowTemplatesTransitionsTriggersReadRaw(requestParameters: WorkflowTemplatesTransitionsTriggersReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateTransitionTrigger>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsTriggersRead().'
            );
        }

        if (requestParameters['workflowTemplateTransitionId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionId',
                'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsTriggersRead().'
            );
        }

        if (requestParameters['workflowTemplateTransitionTriggerId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionTriggerId',
                'Required parameter "workflowTemplateTransitionTriggerId" was null or undefined when calling workflowTemplatesTransitionsTriggersRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/triggers/{workflow_template_transition_trigger_id}`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_trigger_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionTriggerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateTransitionTriggerFromJSON(jsonValue));
    }

    /**
     * Return the details of the selected workflow template transition trigger.
     */
    async workflowTemplatesTransitionsTriggersRead(requestParameters: WorkflowTemplatesTransitionsTriggersReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateTransitionTrigger> {
        const response = await this.workflowTemplatesTransitionsTriggersReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected workflow template transition trigger.
     */
    async workflowTemplatesTransitionsTriggersUpdateRaw(requestParameters: WorkflowTemplatesTransitionsTriggersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateTransitionTrigger>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsTriggersUpdate().'
            );
        }

        if (requestParameters['workflowTemplateTransitionId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionId',
                'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsTriggersUpdate().'
            );
        }

        if (requestParameters['workflowTemplateTransitionTriggerId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionTriggerId',
                'Required parameter "workflowTemplateTransitionTriggerId" was null or undefined when calling workflowTemplatesTransitionsTriggersUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesTransitionsTriggersUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/triggers/{workflow_template_transition_trigger_id}`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_trigger_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionTriggerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateTransitionTriggerToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateTransitionTriggerFromJSON(jsonValue));
    }

    /**
     * Edit the selected workflow template transition trigger.
     */
    async workflowTemplatesTransitionsTriggersUpdate(requestParameters: WorkflowTemplatesTransitionsTriggersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateTransitionTrigger> {
        const response = await this.workflowTemplatesTransitionsTriggersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected workflow template transition.
     */
    async workflowTemplatesTransitionsUpdateRaw(requestParameters: WorkflowTemplatesTransitionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateTransition>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsUpdate().'
            );
        }

        if (requestParameters['workflowTemplateTransitionId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateTransitionId',
                'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesTransitionsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
        urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateTransitionToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateTransitionFromJSON(jsonValue));
    }

    /**
     * Edit the selected workflow template transition.
     */
    async workflowTemplatesTransitionsUpdate(requestParameters: WorkflowTemplatesTransitionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateTransition> {
        const response = await this.workflowTemplatesTransitionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected workflow template.
     */
    async workflowTemplatesUpdateRaw(requestParameters: WorkflowTemplatesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplate>> {
        if (requestParameters['workflowTemplateId'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateId',
                'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling workflowTemplatesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/workflow_templates/{workflow_template_id}/`;
        urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateFromJSON(jsonValue));
    }

    /**
     * Edit the selected workflow template.
     */
    async workflowTemplatesUpdate(requestParameters: WorkflowTemplatesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplate> {
        const response = await this.workflowTemplatesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
