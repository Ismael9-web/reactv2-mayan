/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DocumentTypesList200Response } from '../models';
// @ts-ignore
import type { SmartLink } from '../models';
// @ts-ignore
import type { SmartLinkCondition } from '../models';
// @ts-ignore
import type { SmartLinkDocumentTypeAdd } from '../models';
// @ts-ignore
import type { SmartLinkDocumentTypeRemove } from '../models';
// @ts-ignore
import type { SmartLinksConditionsList200Response } from '../models';
// @ts-ignore
import type { SmartLinksList200Response } from '../models';
/**
 * SmartLinksApi - axios parameter creator
 * @export
 */
export const SmartLinksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new smart link condition.
         * @param {string} smartLinkId 
         * @param {SmartLinkCondition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksConditionsCreate: async (smartLinkId: string, data: SmartLinkCondition, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'smartLinkId' is not null or undefined
            assertParamExists('smartLinksConditionsCreate', 'smartLinkId', smartLinkId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('smartLinksConditionsCreate', 'data', data)
            const localVarPath = `/smart_links/{smart_link_id}/conditions/`
                .replace(`{${"smart_link_id"}}`, encodeURIComponent(String(smartLinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the selected smart link condition.
         * @param {string} smartLinkId 
         * @param {string} smartLinkConditionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksConditionsDelete: async (smartLinkId: string, smartLinkConditionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'smartLinkId' is not null or undefined
            assertParamExists('smartLinksConditionsDelete', 'smartLinkId', smartLinkId)
            // verify required parameter 'smartLinkConditionId' is not null or undefined
            assertParamExists('smartLinksConditionsDelete', 'smartLinkConditionId', smartLinkConditionId)
            const localVarPath = `/smart_links/{smart_link_id}/conditions/{smart_link_condition_id}/`
                .replace(`{${"smart_link_id"}}`, encodeURIComponent(String(smartLinkId)))
                .replace(`{${"smart_link_condition_id"}}`, encodeURIComponent(String(smartLinkConditionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the smart link conditions.
         * @param {string} smartLinkId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksConditionsList: async (smartLinkId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'smartLinkId' is not null or undefined
            assertParamExists('smartLinksConditionsList', 'smartLinkId', smartLinkId)
            const localVarPath = `/smart_links/{smart_link_id}/conditions/`
                .replace(`{${"smart_link_id"}}`, encodeURIComponent(String(smartLinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected smart link condition.
         * @param {string} smartLinkId 
         * @param {string} smartLinkConditionId 
         * @param {SmartLinkCondition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksConditionsPartialUpdate: async (smartLinkId: string, smartLinkConditionId: string, data: SmartLinkCondition, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'smartLinkId' is not null or undefined
            assertParamExists('smartLinksConditionsPartialUpdate', 'smartLinkId', smartLinkId)
            // verify required parameter 'smartLinkConditionId' is not null or undefined
            assertParamExists('smartLinksConditionsPartialUpdate', 'smartLinkConditionId', smartLinkConditionId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('smartLinksConditionsPartialUpdate', 'data', data)
            const localVarPath = `/smart_links/{smart_link_id}/conditions/{smart_link_condition_id}/`
                .replace(`{${"smart_link_id"}}`, encodeURIComponent(String(smartLinkId)))
                .replace(`{${"smart_link_condition_id"}}`, encodeURIComponent(String(smartLinkConditionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the details of the selected smart link condition.
         * @param {string} smartLinkId 
         * @param {string} smartLinkConditionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksConditionsRead: async (smartLinkId: string, smartLinkConditionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'smartLinkId' is not null or undefined
            assertParamExists('smartLinksConditionsRead', 'smartLinkId', smartLinkId)
            // verify required parameter 'smartLinkConditionId' is not null or undefined
            assertParamExists('smartLinksConditionsRead', 'smartLinkConditionId', smartLinkConditionId)
            const localVarPath = `/smart_links/{smart_link_id}/conditions/{smart_link_condition_id}/`
                .replace(`{${"smart_link_id"}}`, encodeURIComponent(String(smartLinkId)))
                .replace(`{${"smart_link_condition_id"}}`, encodeURIComponent(String(smartLinkConditionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected smart link condition.
         * @param {string} smartLinkId 
         * @param {string} smartLinkConditionId 
         * @param {SmartLinkCondition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksConditionsUpdate: async (smartLinkId: string, smartLinkConditionId: string, data: SmartLinkCondition, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'smartLinkId' is not null or undefined
            assertParamExists('smartLinksConditionsUpdate', 'smartLinkId', smartLinkId)
            // verify required parameter 'smartLinkConditionId' is not null or undefined
            assertParamExists('smartLinksConditionsUpdate', 'smartLinkConditionId', smartLinkConditionId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('smartLinksConditionsUpdate', 'data', data)
            const localVarPath = `/smart_links/{smart_link_id}/conditions/{smart_link_condition_id}/`
                .replace(`{${"smart_link_id"}}`, encodeURIComponent(String(smartLinkId)))
                .replace(`{${"smart_link_condition_id"}}`, encodeURIComponent(String(smartLinkConditionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new smart link.
         * @param {SmartLink} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksCreate: async (data: SmartLink, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('smartLinksCreate', 'data', data)
            const localVarPath = `/smart_links/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the selected smart link.
         * @param {string} smartLinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksDelete: async (smartLinkId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'smartLinkId' is not null or undefined
            assertParamExists('smartLinksDelete', 'smartLinkId', smartLinkId)
            const localVarPath = `/smart_links/{smart_link_id}/`
                .replace(`{${"smart_link_id"}}`, encodeURIComponent(String(smartLinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a document type to a smart link.
         * @param {string} smartLinkId 
         * @param {SmartLinkDocumentTypeAdd} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksDocumentTypesAddCreate: async (smartLinkId: string, data: SmartLinkDocumentTypeAdd, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'smartLinkId' is not null or undefined
            assertParamExists('smartLinksDocumentTypesAddCreate', 'smartLinkId', smartLinkId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('smartLinksDocumentTypesAddCreate', 'data', data)
            const localVarPath = `/smart_links/{smart_link_id}/document_types/add/`
                .replace(`{${"smart_link_id"}}`, encodeURIComponent(String(smartLinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of the selected smart link document types.
         * @param {string} smartLinkId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksDocumentTypesList: async (smartLinkId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'smartLinkId' is not null or undefined
            assertParamExists('smartLinksDocumentTypesList', 'smartLinkId', smartLinkId)
            const localVarPath = `/smart_links/{smart_link_id}/document_types/`
                .replace(`{${"smart_link_id"}}`, encodeURIComponent(String(smartLinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a document type from a smart link.
         * @param {string} smartLinkId 
         * @param {SmartLinkDocumentTypeRemove} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksDocumentTypesRemoveCreate: async (smartLinkId: string, data: SmartLinkDocumentTypeRemove, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'smartLinkId' is not null or undefined
            assertParamExists('smartLinksDocumentTypesRemoveCreate', 'smartLinkId', smartLinkId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('smartLinksDocumentTypesRemoveCreate', 'data', data)
            const localVarPath = `/smart_links/{smart_link_id}/document_types/remove/`
                .replace(`{${"smart_link_id"}}`, encodeURIComponent(String(smartLinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the smart links.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksList: async (ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/smart_links/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected smart link.
         * @param {string} smartLinkId 
         * @param {SmartLink} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksPartialUpdate: async (smartLinkId: string, data: SmartLink, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'smartLinkId' is not null or undefined
            assertParamExists('smartLinksPartialUpdate', 'smartLinkId', smartLinkId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('smartLinksPartialUpdate', 'data', data)
            const localVarPath = `/smart_links/{smart_link_id}/`
                .replace(`{${"smart_link_id"}}`, encodeURIComponent(String(smartLinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the details of the selected smart link.
         * @param {string} smartLinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksRead: async (smartLinkId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'smartLinkId' is not null or undefined
            assertParamExists('smartLinksRead', 'smartLinkId', smartLinkId)
            const localVarPath = `/smart_links/{smart_link_id}/`
                .replace(`{${"smart_link_id"}}`, encodeURIComponent(String(smartLinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected smart link.
         * @param {string} smartLinkId 
         * @param {SmartLink} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksUpdate: async (smartLinkId: string, data: SmartLink, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'smartLinkId' is not null or undefined
            assertParamExists('smartLinksUpdate', 'smartLinkId', smartLinkId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('smartLinksUpdate', 'data', data)
            const localVarPath = `/smart_links/{smart_link_id}/`
                .replace(`{${"smart_link_id"}}`, encodeURIComponent(String(smartLinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SmartLinksApi - functional programming interface
 * @export
 */
export const SmartLinksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SmartLinksApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new smart link condition.
         * @param {string} smartLinkId 
         * @param {SmartLinkCondition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartLinksConditionsCreate(smartLinkId: string, data: SmartLinkCondition, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmartLinkCondition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartLinksConditionsCreate(smartLinkId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SmartLinksApi.smartLinksConditionsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete the selected smart link condition.
         * @param {string} smartLinkId 
         * @param {string} smartLinkConditionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartLinksConditionsDelete(smartLinkId: string, smartLinkConditionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartLinksConditionsDelete(smartLinkId, smartLinkConditionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SmartLinksApi.smartLinksConditionsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the smart link conditions.
         * @param {string} smartLinkId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartLinksConditionsList(smartLinkId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmartLinksConditionsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartLinksConditionsList(smartLinkId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SmartLinksApi.smartLinksConditionsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected smart link condition.
         * @param {string} smartLinkId 
         * @param {string} smartLinkConditionId 
         * @param {SmartLinkCondition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartLinksConditionsPartialUpdate(smartLinkId: string, smartLinkConditionId: string, data: SmartLinkCondition, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmartLinkCondition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartLinksConditionsPartialUpdate(smartLinkId, smartLinkConditionId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SmartLinksApi.smartLinksConditionsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the details of the selected smart link condition.
         * @param {string} smartLinkId 
         * @param {string} smartLinkConditionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartLinksConditionsRead(smartLinkId: string, smartLinkConditionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmartLinkCondition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartLinksConditionsRead(smartLinkId, smartLinkConditionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SmartLinksApi.smartLinksConditionsRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected smart link condition.
         * @param {string} smartLinkId 
         * @param {string} smartLinkConditionId 
         * @param {SmartLinkCondition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartLinksConditionsUpdate(smartLinkId: string, smartLinkConditionId: string, data: SmartLinkCondition, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmartLinkCondition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartLinksConditionsUpdate(smartLinkId, smartLinkConditionId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SmartLinksApi.smartLinksConditionsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new smart link.
         * @param {SmartLink} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartLinksCreate(data: SmartLink, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmartLink>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartLinksCreate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SmartLinksApi.smartLinksCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete the selected smart link.
         * @param {string} smartLinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartLinksDelete(smartLinkId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartLinksDelete(smartLinkId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SmartLinksApi.smartLinksDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add a document type to a smart link.
         * @param {string} smartLinkId 
         * @param {SmartLinkDocumentTypeAdd} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartLinksDocumentTypesAddCreate(smartLinkId: string, data: SmartLinkDocumentTypeAdd, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmartLinkDocumentTypeAdd>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartLinksDocumentTypesAddCreate(smartLinkId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SmartLinksApi.smartLinksDocumentTypesAddCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return a list of the selected smart link document types.
         * @param {string} smartLinkId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartLinksDocumentTypesList(smartLinkId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartLinksDocumentTypesList(smartLinkId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SmartLinksApi.smartLinksDocumentTypesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove a document type from a smart link.
         * @param {string} smartLinkId 
         * @param {SmartLinkDocumentTypeRemove} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartLinksDocumentTypesRemoveCreate(smartLinkId: string, data: SmartLinkDocumentTypeRemove, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmartLinkDocumentTypeRemove>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartLinksDocumentTypesRemoveCreate(smartLinkId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SmartLinksApi.smartLinksDocumentTypesRemoveCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the smart links.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartLinksList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmartLinksList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartLinksList(ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SmartLinksApi.smartLinksList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected smart link.
         * @param {string} smartLinkId 
         * @param {SmartLink} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartLinksPartialUpdate(smartLinkId: string, data: SmartLink, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmartLink>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartLinksPartialUpdate(smartLinkId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SmartLinksApi.smartLinksPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the details of the selected smart link.
         * @param {string} smartLinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartLinksRead(smartLinkId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmartLink>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartLinksRead(smartLinkId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SmartLinksApi.smartLinksRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected smart link.
         * @param {string} smartLinkId 
         * @param {SmartLink} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartLinksUpdate(smartLinkId: string, data: SmartLink, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmartLink>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartLinksUpdate(smartLinkId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SmartLinksApi.smartLinksUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SmartLinksApi - factory interface
 * @export
 */
export const SmartLinksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SmartLinksApiFp(configuration)
    return {
        /**
         * Create a new smart link condition.
         * @param {string} smartLinkId 
         * @param {SmartLinkCondition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksConditionsCreate(smartLinkId: string, data: SmartLinkCondition, options?: RawAxiosRequestConfig): AxiosPromise<SmartLinkCondition> {
            return localVarFp.smartLinksConditionsCreate(smartLinkId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the selected smart link condition.
         * @param {string} smartLinkId 
         * @param {string} smartLinkConditionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksConditionsDelete(smartLinkId: string, smartLinkConditionId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.smartLinksConditionsDelete(smartLinkId, smartLinkConditionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the smart link conditions.
         * @param {string} smartLinkId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksConditionsList(smartLinkId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<SmartLinksConditionsList200Response> {
            return localVarFp.smartLinksConditionsList(smartLinkId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected smart link condition.
         * @param {string} smartLinkId 
         * @param {string} smartLinkConditionId 
         * @param {SmartLinkCondition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksConditionsPartialUpdate(smartLinkId: string, smartLinkConditionId: string, data: SmartLinkCondition, options?: RawAxiosRequestConfig): AxiosPromise<SmartLinkCondition> {
            return localVarFp.smartLinksConditionsPartialUpdate(smartLinkId, smartLinkConditionId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the details of the selected smart link condition.
         * @param {string} smartLinkId 
         * @param {string} smartLinkConditionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksConditionsRead(smartLinkId: string, smartLinkConditionId: string, options?: RawAxiosRequestConfig): AxiosPromise<SmartLinkCondition> {
            return localVarFp.smartLinksConditionsRead(smartLinkId, smartLinkConditionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected smart link condition.
         * @param {string} smartLinkId 
         * @param {string} smartLinkConditionId 
         * @param {SmartLinkCondition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksConditionsUpdate(smartLinkId: string, smartLinkConditionId: string, data: SmartLinkCondition, options?: RawAxiosRequestConfig): AxiosPromise<SmartLinkCondition> {
            return localVarFp.smartLinksConditionsUpdate(smartLinkId, smartLinkConditionId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new smart link.
         * @param {SmartLink} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksCreate(data: SmartLink, options?: RawAxiosRequestConfig): AxiosPromise<SmartLink> {
            return localVarFp.smartLinksCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the selected smart link.
         * @param {string} smartLinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksDelete(smartLinkId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.smartLinksDelete(smartLinkId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a document type to a smart link.
         * @param {string} smartLinkId 
         * @param {SmartLinkDocumentTypeAdd} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksDocumentTypesAddCreate(smartLinkId: string, data: SmartLinkDocumentTypeAdd, options?: RawAxiosRequestConfig): AxiosPromise<SmartLinkDocumentTypeAdd> {
            return localVarFp.smartLinksDocumentTypesAddCreate(smartLinkId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of the selected smart link document types.
         * @param {string} smartLinkId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksDocumentTypesList(smartLinkId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypesList200Response> {
            return localVarFp.smartLinksDocumentTypesList(smartLinkId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a document type from a smart link.
         * @param {string} smartLinkId 
         * @param {SmartLinkDocumentTypeRemove} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksDocumentTypesRemoveCreate(smartLinkId: string, data: SmartLinkDocumentTypeRemove, options?: RawAxiosRequestConfig): AxiosPromise<SmartLinkDocumentTypeRemove> {
            return localVarFp.smartLinksDocumentTypesRemoveCreate(smartLinkId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the smart links.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<SmartLinksList200Response> {
            return localVarFp.smartLinksList(ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected smart link.
         * @param {string} smartLinkId 
         * @param {SmartLink} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksPartialUpdate(smartLinkId: string, data: SmartLink, options?: RawAxiosRequestConfig): AxiosPromise<SmartLink> {
            return localVarFp.smartLinksPartialUpdate(smartLinkId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the details of the selected smart link.
         * @param {string} smartLinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksRead(smartLinkId: string, options?: RawAxiosRequestConfig): AxiosPromise<SmartLink> {
            return localVarFp.smartLinksRead(smartLinkId, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected smart link.
         * @param {string} smartLinkId 
         * @param {SmartLink} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartLinksUpdate(smartLinkId: string, data: SmartLink, options?: RawAxiosRequestConfig): AxiosPromise<SmartLink> {
            return localVarFp.smartLinksUpdate(smartLinkId, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SmartLinksApi - object-oriented interface
 * @export
 * @class SmartLinksApi
 * @extends {BaseAPI}
 */
export class SmartLinksApi extends BaseAPI {
    /**
     * Create a new smart link condition.
     * @param {string} smartLinkId 
     * @param {SmartLinkCondition} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartLinksApi
     */
    public smartLinksConditionsCreate(smartLinkId: string, data: SmartLinkCondition, options?: RawAxiosRequestConfig) {
        return SmartLinksApiFp(this.configuration).smartLinksConditionsCreate(smartLinkId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the selected smart link condition.
     * @param {string} smartLinkId 
     * @param {string} smartLinkConditionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartLinksApi
     */
    public smartLinksConditionsDelete(smartLinkId: string, smartLinkConditionId: string, options?: RawAxiosRequestConfig) {
        return SmartLinksApiFp(this.configuration).smartLinksConditionsDelete(smartLinkId, smartLinkConditionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the smart link conditions.
     * @param {string} smartLinkId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartLinksApi
     */
    public smartLinksConditionsList(smartLinkId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SmartLinksApiFp(this.configuration).smartLinksConditionsList(smartLinkId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected smart link condition.
     * @param {string} smartLinkId 
     * @param {string} smartLinkConditionId 
     * @param {SmartLinkCondition} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartLinksApi
     */
    public smartLinksConditionsPartialUpdate(smartLinkId: string, smartLinkConditionId: string, data: SmartLinkCondition, options?: RawAxiosRequestConfig) {
        return SmartLinksApiFp(this.configuration).smartLinksConditionsPartialUpdate(smartLinkId, smartLinkConditionId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the details of the selected smart link condition.
     * @param {string} smartLinkId 
     * @param {string} smartLinkConditionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartLinksApi
     */
    public smartLinksConditionsRead(smartLinkId: string, smartLinkConditionId: string, options?: RawAxiosRequestConfig) {
        return SmartLinksApiFp(this.configuration).smartLinksConditionsRead(smartLinkId, smartLinkConditionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected smart link condition.
     * @param {string} smartLinkId 
     * @param {string} smartLinkConditionId 
     * @param {SmartLinkCondition} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartLinksApi
     */
    public smartLinksConditionsUpdate(smartLinkId: string, smartLinkConditionId: string, data: SmartLinkCondition, options?: RawAxiosRequestConfig) {
        return SmartLinksApiFp(this.configuration).smartLinksConditionsUpdate(smartLinkId, smartLinkConditionId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new smart link.
     * @param {SmartLink} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartLinksApi
     */
    public smartLinksCreate(data: SmartLink, options?: RawAxiosRequestConfig) {
        return SmartLinksApiFp(this.configuration).smartLinksCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the selected smart link.
     * @param {string} smartLinkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartLinksApi
     */
    public smartLinksDelete(smartLinkId: string, options?: RawAxiosRequestConfig) {
        return SmartLinksApiFp(this.configuration).smartLinksDelete(smartLinkId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a document type to a smart link.
     * @param {string} smartLinkId 
     * @param {SmartLinkDocumentTypeAdd} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartLinksApi
     */
    public smartLinksDocumentTypesAddCreate(smartLinkId: string, data: SmartLinkDocumentTypeAdd, options?: RawAxiosRequestConfig) {
        return SmartLinksApiFp(this.configuration).smartLinksDocumentTypesAddCreate(smartLinkId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a list of the selected smart link document types.
     * @param {string} smartLinkId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartLinksApi
     */
    public smartLinksDocumentTypesList(smartLinkId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SmartLinksApiFp(this.configuration).smartLinksDocumentTypesList(smartLinkId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a document type from a smart link.
     * @param {string} smartLinkId 
     * @param {SmartLinkDocumentTypeRemove} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartLinksApi
     */
    public smartLinksDocumentTypesRemoveCreate(smartLinkId: string, data: SmartLinkDocumentTypeRemove, options?: RawAxiosRequestConfig) {
        return SmartLinksApiFp(this.configuration).smartLinksDocumentTypesRemoveCreate(smartLinkId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the smart links.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartLinksApi
     */
    public smartLinksList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SmartLinksApiFp(this.configuration).smartLinksList(ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected smart link.
     * @param {string} smartLinkId 
     * @param {SmartLink} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartLinksApi
     */
    public smartLinksPartialUpdate(smartLinkId: string, data: SmartLink, options?: RawAxiosRequestConfig) {
        return SmartLinksApiFp(this.configuration).smartLinksPartialUpdate(smartLinkId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the details of the selected smart link.
     * @param {string} smartLinkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartLinksApi
     */
    public smartLinksRead(smartLinkId: string, options?: RawAxiosRequestConfig) {
        return SmartLinksApiFp(this.configuration).smartLinksRead(smartLinkId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected smart link.
     * @param {string} smartLinkId 
     * @param {SmartLink} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartLinksApi
     */
    public smartLinksUpdate(smartLinkId: string, data: SmartLink, options?: RawAxiosRequestConfig) {
        return SmartLinksApiFp(this.configuration).smartLinksUpdate(smartLinkId, data, options).then((request) => request(this.axios, this.basePath));
    }
}

