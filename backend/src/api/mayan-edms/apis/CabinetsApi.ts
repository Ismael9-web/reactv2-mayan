/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Cabinet,
  CabinetDocumentAdd,
  CabinetDocumentRemove,
  CabinetsDocumentsList200Response,
  CabinetsList200Response,
} from '../models/index';
import {
    CabinetFromJSON,
    CabinetToJSON,
    CabinetDocumentAddFromJSON,
    CabinetDocumentAddToJSON,
    CabinetDocumentRemoveFromJSON,
    CabinetDocumentRemoveToJSON,
    CabinetsDocumentsList200ResponseFromJSON,
    CabinetsDocumentsList200ResponseToJSON,
    CabinetsList200ResponseFromJSON,
    CabinetsList200ResponseToJSON,
} from '../models/index';

export interface CabinetsCreateRequest {
    data: Omit<Cabinet, 'documents_url'|'full_path'|'id'|'parent_id'|'parent_url'|'url'>;
}

export interface CabinetsDeleteRequest {
    cabinetId: string;
}

export interface CabinetsDocumentsAddCreateRequest {
    cabinetId: string;
    data: CabinetDocumentAdd;
}

export interface CabinetsDocumentsListRequest {
    cabinetId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface CabinetsDocumentsRemoveCreateRequest {
    cabinetId: string;
    data: CabinetDocumentRemove;
}

export interface CabinetsListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface CabinetsPartialUpdateRequest {
    cabinetId: string;
    data: Omit<Cabinet, 'documents_url'|'full_path'|'id'|'parent_id'|'parent_url'|'url'>;
}

export interface CabinetsReadRequest {
    cabinetId: string;
}

export interface CabinetsUpdateRequest {
    cabinetId: string;
    data: Omit<Cabinet, 'documents_url'|'full_path'|'id'|'parent_id'|'parent_url'|'url'>;
}

/**
 * 
 */
export class CabinetsApi extends runtime.BaseAPI {

    /**
     * Create a new cabinet.
     */
    async cabinetsCreateRaw(requestParameters: CabinetsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cabinet>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling cabinetsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/cabinets/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CabinetToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CabinetFromJSON(jsonValue));
    }

    /**
     * Create a new cabinet.
     */
    async cabinetsCreate(requestParameters: CabinetsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cabinet> {
        const response = await this.cabinetsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected cabinet.
     */
    async cabinetsDeleteRaw(requestParameters: CabinetsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cabinetId'] == null) {
            throw new runtime.RequiredError(
                'cabinetId',
                'Required parameter "cabinetId" was null or undefined when calling cabinetsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/cabinets/{cabinet_id}/`;
        urlPath = urlPath.replace(`{${"cabinet_id"}}`, encodeURIComponent(String(requestParameters['cabinetId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected cabinet.
     */
    async cabinetsDelete(requestParameters: CabinetsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cabinetsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Add a document to a cabinet.
     */
    async cabinetsDocumentsAddCreateRaw(requestParameters: CabinetsDocumentsAddCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CabinetDocumentAdd>> {
        if (requestParameters['cabinetId'] == null) {
            throw new runtime.RequiredError(
                'cabinetId',
                'Required parameter "cabinetId" was null or undefined when calling cabinetsDocumentsAddCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling cabinetsDocumentsAddCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/cabinets/{cabinet_id}/documents/add/`;
        urlPath = urlPath.replace(`{${"cabinet_id"}}`, encodeURIComponent(String(requestParameters['cabinetId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CabinetDocumentAddToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CabinetDocumentAddFromJSON(jsonValue));
    }

    /**
     * Add a document to a cabinet.
     */
    async cabinetsDocumentsAddCreate(requestParameters: CabinetsDocumentsAddCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CabinetDocumentAdd> {
        const response = await this.cabinetsDocumentsAddCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all the documents contained in a particular cabinet.
     */
    async cabinetsDocumentsListRaw(requestParameters: CabinetsDocumentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CabinetsDocumentsList200Response>> {
        if (requestParameters['cabinetId'] == null) {
            throw new runtime.RequiredError(
                'cabinetId',
                'Required parameter "cabinetId" was null or undefined when calling cabinetsDocumentsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/cabinets/{cabinet_id}/documents/`;
        urlPath = urlPath.replace(`{${"cabinet_id"}}`, encodeURIComponent(String(requestParameters['cabinetId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CabinetsDocumentsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the documents contained in a particular cabinet.
     */
    async cabinetsDocumentsList(requestParameters: CabinetsDocumentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CabinetsDocumentsList200Response> {
        const response = await this.cabinetsDocumentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a document from a cabinet.
     */
    async cabinetsDocumentsRemoveCreateRaw(requestParameters: CabinetsDocumentsRemoveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CabinetDocumentRemove>> {
        if (requestParameters['cabinetId'] == null) {
            throw new runtime.RequiredError(
                'cabinetId',
                'Required parameter "cabinetId" was null or undefined when calling cabinetsDocumentsRemoveCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling cabinetsDocumentsRemoveCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/cabinets/{cabinet_id}/documents/remove/`;
        urlPath = urlPath.replace(`{${"cabinet_id"}}`, encodeURIComponent(String(requestParameters['cabinetId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CabinetDocumentRemoveToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CabinetDocumentRemoveFromJSON(jsonValue));
    }

    /**
     * Remove a document from a cabinet.
     */
    async cabinetsDocumentsRemoveCreate(requestParameters: CabinetsDocumentsRemoveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CabinetDocumentRemove> {
        const response = await this.cabinetsDocumentsRemoveCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all the cabinets.
     */
    async cabinetsListRaw(requestParameters: CabinetsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CabinetsList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/cabinets/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CabinetsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the cabinets.
     */
    async cabinetsList(requestParameters: CabinetsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CabinetsList200Response> {
        const response = await this.cabinetsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected cabinet.
     */
    async cabinetsPartialUpdateRaw(requestParameters: CabinetsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cabinet>> {
        if (requestParameters['cabinetId'] == null) {
            throw new runtime.RequiredError(
                'cabinetId',
                'Required parameter "cabinetId" was null or undefined when calling cabinetsPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling cabinetsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/cabinets/{cabinet_id}/`;
        urlPath = urlPath.replace(`{${"cabinet_id"}}`, encodeURIComponent(String(requestParameters['cabinetId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CabinetToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CabinetFromJSON(jsonValue));
    }

    /**
     * Edit the selected cabinet.
     */
    async cabinetsPartialUpdate(requestParameters: CabinetsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cabinet> {
        const response = await this.cabinetsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the details of the selected cabinet.
     */
    async cabinetsReadRaw(requestParameters: CabinetsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cabinet>> {
        if (requestParameters['cabinetId'] == null) {
            throw new runtime.RequiredError(
                'cabinetId',
                'Required parameter "cabinetId" was null or undefined when calling cabinetsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/cabinets/{cabinet_id}/`;
        urlPath = urlPath.replace(`{${"cabinet_id"}}`, encodeURIComponent(String(requestParameters['cabinetId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CabinetFromJSON(jsonValue));
    }

    /**
     * Returns the details of the selected cabinet.
     */
    async cabinetsRead(requestParameters: CabinetsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cabinet> {
        const response = await this.cabinetsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected cabinet.
     */
    async cabinetsUpdateRaw(requestParameters: CabinetsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cabinet>> {
        if (requestParameters['cabinetId'] == null) {
            throw new runtime.RequiredError(
                'cabinetId',
                'Required parameter "cabinetId" was null or undefined when calling cabinetsUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling cabinetsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/cabinets/{cabinet_id}/`;
        urlPath = urlPath.replace(`{${"cabinet_id"}}`, encodeURIComponent(String(requestParameters['cabinetId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CabinetToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CabinetFromJSON(jsonValue));
    }

    /**
     * Edit the selected cabinet.
     */
    async cabinetsUpdate(requestParameters: CabinetsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cabinet> {
        const response = await this.cabinetsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
