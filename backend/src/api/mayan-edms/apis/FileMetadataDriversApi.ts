/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FileMetadataDriversList200Response,
  StoredDriver,
} from '../models/index';
import {
    FileMetadataDriversList200ResponseFromJSON,
    FileMetadataDriversList200ResponseToJSON,
    StoredDriverFromJSON,
    StoredDriverToJSON,
} from '../models/index';

export interface FileMetadataDriversListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface FileMetadataDriversReadRequest {
    storedDriverId: string;
}

/**
 * 
 */
export class FileMetadataDriversApi extends runtime.BaseAPI {

    /**
     * Returns a list of file metadata drivers.
     */
    async fileMetadataDriversListRaw(requestParameters: FileMetadataDriversListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileMetadataDriversList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/file_metadata_drivers/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileMetadataDriversList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of file metadata drivers.
     */
    async fileMetadataDriversList(requestParameters: FileMetadataDriversListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileMetadataDriversList200Response> {
        const response = await this.fileMetadataDriversListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the details of the selected file metadata driver.
     */
    async fileMetadataDriversReadRaw(requestParameters: FileMetadataDriversReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoredDriver>> {
        if (requestParameters['storedDriverId'] == null) {
            throw new runtime.RequiredError(
                'storedDriverId',
                'Required parameter "storedDriverId" was null or undefined when calling fileMetadataDriversRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/file_metadata_drivers/{stored_driver_id}/`;
        urlPath = urlPath.replace(`{${"stored_driver_id"}}`, encodeURIComponent(String(requestParameters['storedDriverId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoredDriverFromJSON(jsonValue));
    }

    /**
     * Returns the details of the selected file metadata driver.
     */
    async fileMetadataDriversRead(requestParameters: FileMetadataDriversReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoredDriver> {
        const response = await this.fileMetadataDriversReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
