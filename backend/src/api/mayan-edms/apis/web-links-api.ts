/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DocumentTypesList200Response } from '../models';
// @ts-ignore
import type { WebLink } from '../models';
// @ts-ignore
import type { WebLinkDocumentTypeAdd } from '../models';
// @ts-ignore
import type { WebLinkDocumentTypeRemove } from '../models';
// @ts-ignore
import type { WebLinksList200Response } from '../models';
/**
 * WebLinksApi - axios parameter creator
 * @export
 */
export const WebLinksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new web link.
         * @param {WebLink} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLinksCreate: async (data: WebLink, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('webLinksCreate', 'data', data)
            const localVarPath = `/web_links/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the selected web link.
         * @param {string} webLinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLinksDelete: async (webLinkId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webLinkId' is not null or undefined
            assertParamExists('webLinksDelete', 'webLinkId', webLinkId)
            const localVarPath = `/web_links/{web_link_id}/`
                .replace(`{${"web_link_id"}}`, encodeURIComponent(String(webLinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a document type to a web link.
         * @param {string} webLinkId 
         * @param {WebLinkDocumentTypeAdd} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLinksDocumentTypesAddCreate: async (webLinkId: string, data: WebLinkDocumentTypeAdd, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webLinkId' is not null or undefined
            assertParamExists('webLinksDocumentTypesAddCreate', 'webLinkId', webLinkId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('webLinksDocumentTypesAddCreate', 'data', data)
            const localVarPath = `/web_links/{web_link_id}/document_types/add/`
                .replace(`{${"web_link_id"}}`, encodeURIComponent(String(webLinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of the selected web link document types.
         * @param {string} webLinkId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLinksDocumentTypesList: async (webLinkId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webLinkId' is not null or undefined
            assertParamExists('webLinksDocumentTypesList', 'webLinkId', webLinkId)
            const localVarPath = `/web_links/{web_link_id}/document_types/`
                .replace(`{${"web_link_id"}}`, encodeURIComponent(String(webLinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a document type from a web link.
         * @param {string} webLinkId 
         * @param {WebLinkDocumentTypeRemove} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLinksDocumentTypesRemoveCreate: async (webLinkId: string, data: WebLinkDocumentTypeRemove, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webLinkId' is not null or undefined
            assertParamExists('webLinksDocumentTypesRemoveCreate', 'webLinkId', webLinkId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('webLinksDocumentTypesRemoveCreate', 'data', data)
            const localVarPath = `/web_links/{web_link_id}/document_types/remove/`
                .replace(`{${"web_link_id"}}`, encodeURIComponent(String(webLinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the web links.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLinksList: async (ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/web_links/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected web link.
         * @param {string} webLinkId 
         * @param {WebLink} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLinksPartialUpdate: async (webLinkId: string, data: WebLink, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webLinkId' is not null or undefined
            assertParamExists('webLinksPartialUpdate', 'webLinkId', webLinkId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('webLinksPartialUpdate', 'data', data)
            const localVarPath = `/web_links/{web_link_id}/`
                .replace(`{${"web_link_id"}}`, encodeURIComponent(String(webLinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the details of the selected web link.
         * @param {string} webLinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLinksRead: async (webLinkId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webLinkId' is not null or undefined
            assertParamExists('webLinksRead', 'webLinkId', webLinkId)
            const localVarPath = `/web_links/{web_link_id}/`
                .replace(`{${"web_link_id"}}`, encodeURIComponent(String(webLinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected web link.
         * @param {string} webLinkId 
         * @param {WebLink} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLinksUpdate: async (webLinkId: string, data: WebLink, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webLinkId' is not null or undefined
            assertParamExists('webLinksUpdate', 'webLinkId', webLinkId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('webLinksUpdate', 'data', data)
            const localVarPath = `/web_links/{web_link_id}/`
                .replace(`{${"web_link_id"}}`, encodeURIComponent(String(webLinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebLinksApi - functional programming interface
 * @export
 */
export const WebLinksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebLinksApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new web link.
         * @param {WebLink} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webLinksCreate(data: WebLink, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebLink>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webLinksCreate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebLinksApi.webLinksCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete the selected web link.
         * @param {string} webLinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webLinksDelete(webLinkId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webLinksDelete(webLinkId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebLinksApi.webLinksDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add a document type to a web link.
         * @param {string} webLinkId 
         * @param {WebLinkDocumentTypeAdd} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webLinksDocumentTypesAddCreate(webLinkId: string, data: WebLinkDocumentTypeAdd, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebLinkDocumentTypeAdd>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webLinksDocumentTypesAddCreate(webLinkId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebLinksApi.webLinksDocumentTypesAddCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return a list of the selected web link document types.
         * @param {string} webLinkId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webLinksDocumentTypesList(webLinkId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webLinksDocumentTypesList(webLinkId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebLinksApi.webLinksDocumentTypesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove a document type from a web link.
         * @param {string} webLinkId 
         * @param {WebLinkDocumentTypeRemove} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webLinksDocumentTypesRemoveCreate(webLinkId: string, data: WebLinkDocumentTypeRemove, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebLinkDocumentTypeRemove>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webLinksDocumentTypesRemoveCreate(webLinkId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebLinksApi.webLinksDocumentTypesRemoveCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the web links.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webLinksList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebLinksList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webLinksList(ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebLinksApi.webLinksList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected web link.
         * @param {string} webLinkId 
         * @param {WebLink} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webLinksPartialUpdate(webLinkId: string, data: WebLink, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebLink>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webLinksPartialUpdate(webLinkId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebLinksApi.webLinksPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the details of the selected web link.
         * @param {string} webLinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webLinksRead(webLinkId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebLink>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webLinksRead(webLinkId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebLinksApi.webLinksRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected web link.
         * @param {string} webLinkId 
         * @param {WebLink} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webLinksUpdate(webLinkId: string, data: WebLink, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebLink>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webLinksUpdate(webLinkId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebLinksApi.webLinksUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WebLinksApi - factory interface
 * @export
 */
export const WebLinksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebLinksApiFp(configuration)
    return {
        /**
         * Create a new web link.
         * @param {WebLink} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLinksCreate(data: WebLink, options?: RawAxiosRequestConfig): AxiosPromise<WebLink> {
            return localVarFp.webLinksCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the selected web link.
         * @param {string} webLinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLinksDelete(webLinkId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.webLinksDelete(webLinkId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a document type to a web link.
         * @param {string} webLinkId 
         * @param {WebLinkDocumentTypeAdd} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLinksDocumentTypesAddCreate(webLinkId: string, data: WebLinkDocumentTypeAdd, options?: RawAxiosRequestConfig): AxiosPromise<WebLinkDocumentTypeAdd> {
            return localVarFp.webLinksDocumentTypesAddCreate(webLinkId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of the selected web link document types.
         * @param {string} webLinkId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLinksDocumentTypesList(webLinkId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypesList200Response> {
            return localVarFp.webLinksDocumentTypesList(webLinkId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a document type from a web link.
         * @param {string} webLinkId 
         * @param {WebLinkDocumentTypeRemove} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLinksDocumentTypesRemoveCreate(webLinkId: string, data: WebLinkDocumentTypeRemove, options?: RawAxiosRequestConfig): AxiosPromise<WebLinkDocumentTypeRemove> {
            return localVarFp.webLinksDocumentTypesRemoveCreate(webLinkId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the web links.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLinksList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<WebLinksList200Response> {
            return localVarFp.webLinksList(ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected web link.
         * @param {string} webLinkId 
         * @param {WebLink} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLinksPartialUpdate(webLinkId: string, data: WebLink, options?: RawAxiosRequestConfig): AxiosPromise<WebLink> {
            return localVarFp.webLinksPartialUpdate(webLinkId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the details of the selected web link.
         * @param {string} webLinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLinksRead(webLinkId: string, options?: RawAxiosRequestConfig): AxiosPromise<WebLink> {
            return localVarFp.webLinksRead(webLinkId, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected web link.
         * @param {string} webLinkId 
         * @param {WebLink} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLinksUpdate(webLinkId: string, data: WebLink, options?: RawAxiosRequestConfig): AxiosPromise<WebLink> {
            return localVarFp.webLinksUpdate(webLinkId, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebLinksApi - object-oriented interface
 * @export
 * @class WebLinksApi
 * @extends {BaseAPI}
 */
export class WebLinksApi extends BaseAPI {
    /**
     * Create a new web link.
     * @param {WebLink} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebLinksApi
     */
    public webLinksCreate(data: WebLink, options?: RawAxiosRequestConfig) {
        return WebLinksApiFp(this.configuration).webLinksCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the selected web link.
     * @param {string} webLinkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebLinksApi
     */
    public webLinksDelete(webLinkId: string, options?: RawAxiosRequestConfig) {
        return WebLinksApiFp(this.configuration).webLinksDelete(webLinkId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a document type to a web link.
     * @param {string} webLinkId 
     * @param {WebLinkDocumentTypeAdd} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebLinksApi
     */
    public webLinksDocumentTypesAddCreate(webLinkId: string, data: WebLinkDocumentTypeAdd, options?: RawAxiosRequestConfig) {
        return WebLinksApiFp(this.configuration).webLinksDocumentTypesAddCreate(webLinkId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a list of the selected web link document types.
     * @param {string} webLinkId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebLinksApi
     */
    public webLinksDocumentTypesList(webLinkId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return WebLinksApiFp(this.configuration).webLinksDocumentTypesList(webLinkId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a document type from a web link.
     * @param {string} webLinkId 
     * @param {WebLinkDocumentTypeRemove} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebLinksApi
     */
    public webLinksDocumentTypesRemoveCreate(webLinkId: string, data: WebLinkDocumentTypeRemove, options?: RawAxiosRequestConfig) {
        return WebLinksApiFp(this.configuration).webLinksDocumentTypesRemoveCreate(webLinkId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the web links.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebLinksApi
     */
    public webLinksList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return WebLinksApiFp(this.configuration).webLinksList(ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected web link.
     * @param {string} webLinkId 
     * @param {WebLink} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebLinksApi
     */
    public webLinksPartialUpdate(webLinkId: string, data: WebLink, options?: RawAxiosRequestConfig) {
        return WebLinksApiFp(this.configuration).webLinksPartialUpdate(webLinkId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the details of the selected web link.
     * @param {string} webLinkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebLinksApi
     */
    public webLinksRead(webLinkId: string, options?: RawAxiosRequestConfig) {
        return WebLinksApiFp(this.configuration).webLinksRead(webLinkId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected web link.
     * @param {string} webLinkId 
     * @param {WebLink} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebLinksApi
     */
    public webLinksUpdate(webLinkId: string, data: WebLink, options?: RawAxiosRequestConfig) {
        return WebLinksApiFp(this.configuration).webLinksUpdate(webLinkId, data, options).then((request) => request(this.axios, this.basePath));
    }
}

