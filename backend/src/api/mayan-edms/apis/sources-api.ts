/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Source } from '../models';
// @ts-ignore
import type { SourceBackendAction } from '../models';
// @ts-ignore
import type { SourcesActionsList200Response } from '../models';
// @ts-ignore
import type { SourcesList200Response } from '../models';
/**
 * SourcesApi - axios parameter creator
 * @export
 */
export const SourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Execute a source action with confirmation.
         * @param {string} sourceId 
         * @param {string} actionName 
         * @param {SourceBackendAction} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesActionsExecuteCreate: async (sourceId: string, actionName: string, data: SourceBackendAction, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('sourcesActionsExecuteCreate', 'sourceId', sourceId)
            // verify required parameter 'actionName' is not null or undefined
            assertParamExists('sourcesActionsExecuteCreate', 'actionName', actionName)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('sourcesActionsExecuteCreate', 'data', data)
            const localVarPath = `/sources/{source_id}/actions/{action_name}/execute/`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId)))
                .replace(`{${"action_name"}}`, encodeURIComponent(String(actionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Execute a source action without confirmation.
         * @param {string} sourceId 
         * @param {string} actionName 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesActionsExecuteList: async (sourceId: string, actionName: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('sourcesActionsExecuteList', 'sourceId', sourceId)
            // verify required parameter 'actionName' is not null or undefined
            assertParamExists('sourcesActionsExecuteList', 'actionName', actionName)
            const localVarPath = `/sources/{source_id}/actions/{action_name}/execute/`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId)))
                .replace(`{${"action_name"}}`, encodeURIComponent(String(actionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Source action list view.
         * @param {string} sourceId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesActionsList: async (sourceId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('sourcesActionsList', 'sourceId', sourceId)
            const localVarPath = `/sources/{source_id}/actions/`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Source action detail view.
         * @param {string} sourceId 
         * @param {string} actionName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesActionsRead: async (sourceId: string, actionName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('sourcesActionsRead', 'sourceId', sourceId)
            // verify required parameter 'actionName' is not null or undefined
            assertParamExists('sourcesActionsRead', 'actionName', actionName)
            const localVarPath = `/sources/{source_id}/actions/{action_name}/`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId)))
                .replace(`{${"action_name"}}`, encodeURIComponent(String(actionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new source.
         * @param {Source} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesCreate: async (data: Source, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('sourcesCreate', 'data', data)
            const localVarPath = `/sources/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the selected source.
         * @param {string} sourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesDelete: async (sourceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('sourcesDelete', 'sourceId', sourceId)
            const localVarPath = `/sources/{source_id}/`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the source.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesList: async (ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sources/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected source.
         * @param {string} sourceId 
         * @param {Source} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesPartialUpdate: async (sourceId: string, data: Source, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('sourcesPartialUpdate', 'sourceId', sourceId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('sourcesPartialUpdate', 'data', data)
            const localVarPath = `/sources/{source_id}/`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Details of the selected source.
         * @param {string} sourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesRead: async (sourceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('sourcesRead', 'sourceId', sourceId)
            const localVarPath = `/sources/{source_id}/`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected source.
         * @param {string} sourceId 
         * @param {Source} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesUpdate: async (sourceId: string, data: Source, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('sourcesUpdate', 'sourceId', sourceId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('sourcesUpdate', 'data', data)
            const localVarPath = `/sources/{source_id}/`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SourcesApi - functional programming interface
 * @export
 */
export const SourcesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SourcesApiAxiosParamCreator(configuration)
    return {
        /**
         * Execute a source action with confirmation.
         * @param {string} sourceId 
         * @param {string} actionName 
         * @param {SourceBackendAction} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sourcesActionsExecuteCreate(sourceId: string, actionName: string, data: SourceBackendAction, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceBackendAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sourcesActionsExecuteCreate(sourceId, actionName, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.sourcesActionsExecuteCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Execute a source action without confirmation.
         * @param {string} sourceId 
         * @param {string} actionName 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sourcesActionsExecuteList(sourceId: string, actionName: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourcesActionsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sourcesActionsExecuteList(sourceId, actionName, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.sourcesActionsExecuteList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Source action list view.
         * @param {string} sourceId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sourcesActionsList(sourceId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourcesActionsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sourcesActionsList(sourceId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.sourcesActionsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Source action detail view.
         * @param {string} sourceId 
         * @param {string} actionName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sourcesActionsRead(sourceId: string, actionName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceBackendAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sourcesActionsRead(sourceId, actionName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.sourcesActionsRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new source.
         * @param {Source} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sourcesCreate(data: Source, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Source>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sourcesCreate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.sourcesCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete the selected source.
         * @param {string} sourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sourcesDelete(sourceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sourcesDelete(sourceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.sourcesDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the source.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sourcesList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourcesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sourcesList(ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.sourcesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected source.
         * @param {string} sourceId 
         * @param {Source} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sourcesPartialUpdate(sourceId: string, data: Source, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Source>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sourcesPartialUpdate(sourceId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.sourcesPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Details of the selected source.
         * @param {string} sourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sourcesRead(sourceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Source>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sourcesRead(sourceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.sourcesRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected source.
         * @param {string} sourceId 
         * @param {Source} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sourcesUpdate(sourceId: string, data: Source, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Source>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sourcesUpdate(sourceId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.sourcesUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SourcesApi - factory interface
 * @export
 */
export const SourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SourcesApiFp(configuration)
    return {
        /**
         * Execute a source action with confirmation.
         * @param {string} sourceId 
         * @param {string} actionName 
         * @param {SourceBackendAction} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesActionsExecuteCreate(sourceId: string, actionName: string, data: SourceBackendAction, options?: RawAxiosRequestConfig): AxiosPromise<SourceBackendAction> {
            return localVarFp.sourcesActionsExecuteCreate(sourceId, actionName, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Execute a source action without confirmation.
         * @param {string} sourceId 
         * @param {string} actionName 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesActionsExecuteList(sourceId: string, actionName: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<SourcesActionsList200Response> {
            return localVarFp.sourcesActionsExecuteList(sourceId, actionName, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Source action list view.
         * @param {string} sourceId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesActionsList(sourceId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<SourcesActionsList200Response> {
            return localVarFp.sourcesActionsList(sourceId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Source action detail view.
         * @param {string} sourceId 
         * @param {string} actionName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesActionsRead(sourceId: string, actionName: string, options?: RawAxiosRequestConfig): AxiosPromise<SourceBackendAction> {
            return localVarFp.sourcesActionsRead(sourceId, actionName, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new source.
         * @param {Source} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesCreate(data: Source, options?: RawAxiosRequestConfig): AxiosPromise<Source> {
            return localVarFp.sourcesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the selected source.
         * @param {string} sourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesDelete(sourceId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sourcesDelete(sourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the source.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<SourcesList200Response> {
            return localVarFp.sourcesList(ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected source.
         * @param {string} sourceId 
         * @param {Source} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesPartialUpdate(sourceId: string, data: Source, options?: RawAxiosRequestConfig): AxiosPromise<Source> {
            return localVarFp.sourcesPartialUpdate(sourceId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Details of the selected source.
         * @param {string} sourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesRead(sourceId: string, options?: RawAxiosRequestConfig): AxiosPromise<Source> {
            return localVarFp.sourcesRead(sourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected source.
         * @param {string} sourceId 
         * @param {Source} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesUpdate(sourceId: string, data: Source, options?: RawAxiosRequestConfig): AxiosPromise<Source> {
            return localVarFp.sourcesUpdate(sourceId, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SourcesApi - object-oriented interface
 * @export
 * @class SourcesApi
 * @extends {BaseAPI}
 */
export class SourcesApi extends BaseAPI {
    /**
     * Execute a source action with confirmation.
     * @param {string} sourceId 
     * @param {string} actionName 
     * @param {SourceBackendAction} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public sourcesActionsExecuteCreate(sourceId: string, actionName: string, data: SourceBackendAction, options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).sourcesActionsExecuteCreate(sourceId, actionName, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Execute a source action without confirmation.
     * @param {string} sourceId 
     * @param {string} actionName 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public sourcesActionsExecuteList(sourceId: string, actionName: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).sourcesActionsExecuteList(sourceId, actionName, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Source action list view.
     * @param {string} sourceId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public sourcesActionsList(sourceId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).sourcesActionsList(sourceId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Source action detail view.
     * @param {string} sourceId 
     * @param {string} actionName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public sourcesActionsRead(sourceId: string, actionName: string, options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).sourcesActionsRead(sourceId, actionName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new source.
     * @param {Source} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public sourcesCreate(data: Source, options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).sourcesCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the selected source.
     * @param {string} sourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public sourcesDelete(sourceId: string, options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).sourcesDelete(sourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the source.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public sourcesList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).sourcesList(ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected source.
     * @param {string} sourceId 
     * @param {Source} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public sourcesPartialUpdate(sourceId: string, data: Source, options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).sourcesPartialUpdate(sourceId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Details of the selected source.
     * @param {string} sourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public sourcesRead(sourceId: string, options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).sourcesRead(sourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected source.
     * @param {string} sourceId 
     * @param {Source} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public sourcesUpdate(sourceId: string, data: Source, options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).sourcesUpdate(sourceId, data, options).then((request) => request(this.axios, this.basePath));
    }
}

