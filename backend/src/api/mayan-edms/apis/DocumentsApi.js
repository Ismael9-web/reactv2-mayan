"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentsApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class DocumentsApi extends runtime.BaseAPI {
    /**
     * Return a list of the recently accessed documents for the current user.
     */
    documentsAccessedListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/accessed/`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsAccessedList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Return a list of the recently accessed documents for the current user.
     */
    documentsAccessedList() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.documentsAccessedListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a list of all the cabinets to which a document belongs.
     */
    documentsCabinetsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsCabinetsList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/cabinets/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CabinetsList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the cabinets to which a document belongs.
     */
    documentsCabinetsList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsCabinetsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Check in the selected document.
     */
    documentsCheckoutDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsCheckoutDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/checkout/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Check in the selected document.
     */
    documentsCheckoutDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.documentsCheckoutDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Retrieve the checkout details of the selected document entry.
     */
    documentsCheckoutReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsCheckoutRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/checkout/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentCheckoutFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve the checkout details of the selected document entry.
     */
    documentsCheckoutRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsCheckoutReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new document comment.
     */
    documentsCommentsCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsCommentsCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsCommentsCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/comments/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CommentToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CommentFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new document comment.
     */
    documentsCommentsCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsCommentsCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the selected document comment.
     */
    documentsCommentsDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsCommentsDelete().');
            }
            if (requestParameters['commentId'] == null) {
                throw new runtime.RequiredError('commentId', 'Required parameter "commentId" was null or undefined when calling documentsCommentsDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/comments/{comment_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"comment_id"}}`, encodeURIComponent(String(requestParameters['commentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the selected document comment.
     */
    documentsCommentsDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.documentsCommentsDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Returns a list of all the document comments.
     */
    documentsCommentsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsCommentsList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/comments/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsCommentsList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the document comments.
     */
    documentsCommentsList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsCommentsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    documentsCommentsPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsCommentsPartialUpdate().');
            }
            if (requestParameters['commentId'] == null) {
                throw new runtime.RequiredError('commentId', 'Required parameter "commentId" was null or undefined when calling documentsCommentsPartialUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsCommentsPartialUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/comments/{comment_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"comment_id"}}`, encodeURIComponent(String(requestParameters['commentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CommentToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CommentFromJSON)(jsonValue));
        });
    }
    /**
     */
    documentsCommentsPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsCommentsPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the details of the selected document comment.
     */
    documentsCommentsReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsCommentsRead().');
            }
            if (requestParameters['commentId'] == null) {
                throw new runtime.RequiredError('commentId', 'Required parameter "commentId" was null or undefined when calling documentsCommentsRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/comments/{comment_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"comment_id"}}`, encodeURIComponent(String(requestParameters['commentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CommentFromJSON)(jsonValue));
        });
    }
    /**
     * Returns the details of the selected document comment.
     */
    documentsCommentsRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsCommentsReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    documentsCommentsUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsCommentsUpdate().');
            }
            if (requestParameters['commentId'] == null) {
                throw new runtime.RequiredError('commentId', 'Required parameter "commentId" was null or undefined when calling documentsCommentsUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsCommentsUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/comments/{comment_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"comment_id"}}`, encodeURIComponent(String(requestParameters['commentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CommentToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CommentFromJSON)(jsonValue));
        });
    }
    /**
     */
    documentsCommentsUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsCommentsUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new document.
     */
    documentsCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new document.
     */
    documentsCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return a list of the recently created documents.
     */
    documentsCreatedListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/created/`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CabinetsDocumentsList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Return a list of the recently created documents.
     */
    documentsCreatedList() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.documentsCreatedListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Move the selected document to the thrash.
     */
    documentsDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Move the selected document to the thrash.
     */
    documentsDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.documentsDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Return a list of duplicated documents.
     */
    documentsDuplicatedListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/duplicated/`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CabinetsDocumentsList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Return a list of duplicated documents.
     */
    documentsDuplicatedList() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.documentsDuplicatedListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return a list of the selected document\'s duplicates.
     */
    documentsDuplicatesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsDuplicatesList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/duplicates/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsDuplicatesList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Return a list of the selected document\'s duplicates.
     */
    documentsDuplicatesList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsDuplicatesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Add a new document to the list of favorite documents for the current user.
     */
    documentsFavoritesCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsFavoritesCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/favorites/`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FavoriteDocumentToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FavoriteDocumentFromJSON)(jsonValue));
        });
    }
    /**
     * Add a new document to the list of favorite documents for the current user.
     */
    documentsFavoritesCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFavoritesCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the selected favorite document.
     */
    documentsFavoritesDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['favoriteDocumentId'] == null) {
                throw new runtime.RequiredError('favoriteDocumentId', 'Required parameter "favoriteDocumentId" was null or undefined when calling documentsFavoritesDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/favorites/{favorite_document_id}/`;
            urlPath = urlPath.replace(`{${"favorite_document_id"}}`, encodeURIComponent(String(requestParameters['favoriteDocumentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the selected favorite document.
     */
    documentsFavoritesDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.documentsFavoritesDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Return a list of the favorite documents for the current user.
     */
    documentsFavoritesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/favorites/`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsFavoritesList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Return a list of the favorite documents for the current user.
     */
    documentsFavoritesList() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.documentsFavoritesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the details of the selected favorite document.
     */
    documentsFavoritesReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['favoriteDocumentId'] == null) {
                throw new runtime.RequiredError('favoriteDocumentId', 'Required parameter "favoriteDocumentId" was null or undefined when calling documentsFavoritesRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/favorites/{favorite_document_id}/`;
            urlPath = urlPath.replace(`{${"favorite_document_id"}}`, encodeURIComponent(String(requestParameters['favoriteDocumentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FavoriteDocumentFromJSON)(jsonValue));
        });
    }
    /**
     * Return the details of the selected favorite document.
     */
    documentsFavoritesRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFavoritesReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new document file.
     */
    documentsFilesCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsFilesCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentFileToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentFileFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new document file.
     */
    documentsFilesCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the selected document file.
     */
    documentsFilesDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesDelete().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the selected document file.
     */
    documentsFilesDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.documentsFilesDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Download a document file.
     */
    documentsFilesDownloadReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesDownloadRead().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesDownloadRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/download/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Download a document file.
     */
    documentsFilesDownloadRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.documentsFilesDownloadReadRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Return the list of file metadata entries for the selected driver.
     */
    documentsFilesFileMetadataDriversEntriesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesFileMetadataDriversEntriesList().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesFileMetadataDriversEntriesList().');
            }
            if (requestParameters['driverId'] == null) {
                throw new runtime.RequiredError('driverId', 'Required parameter "driverId" was null or undefined when calling documentsFilesFileMetadataDriversEntriesList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/file_metadata/drivers/{driver_id}/entries/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            urlPath = urlPath.replace(`{${"driver_id"}}`, encodeURIComponent(String(requestParameters['driverId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsFilesFileMetadataDriversEntriesList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Return the list of file metadata entries for the selected driver.
     */
    documentsFilesFileMetadataDriversEntriesList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesFileMetadataDriversEntriesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the detail of selected document file metadata entry.
     */
    documentsFilesFileMetadataDriversEntriesReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesFileMetadataDriversEntriesRead().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesFileMetadataDriversEntriesRead().');
            }
            if (requestParameters['driverId'] == null) {
                throw new runtime.RequiredError('driverId', 'Required parameter "driverId" was null or undefined when calling documentsFilesFileMetadataDriversEntriesRead().');
            }
            if (requestParameters['entryId'] == null) {
                throw new runtime.RequiredError('entryId', 'Required parameter "entryId" was null or undefined when calling documentsFilesFileMetadataDriversEntriesRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/file_metadata/drivers/{driver_id}/entries/{entry_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            urlPath = urlPath.replace(`{${"driver_id"}}`, encodeURIComponent(String(requestParameters['driverId'])));
            urlPath = urlPath.replace(`{${"entry_id"}}`, encodeURIComponent(String(requestParameters['entryId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentFileMetadataEntryFromJSON)(jsonValue));
        });
    }
    /**
     * Return the detail of selected document file metadata entry.
     */
    documentsFilesFileMetadataDriversEntriesRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesFileMetadataDriversEntriesReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a list of selected document\'s file metadata drivers.
     */
    documentsFilesFileMetadataDriversListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesFileMetadataDriversList().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesFileMetadataDriversList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/file_metadata/drivers/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsFilesFileMetadataDriversList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of selected document\'s file metadata drivers.
     */
    documentsFilesFileMetadataDriversList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesFileMetadataDriversListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the details of the document file metadata driver.
     */
    documentsFilesFileMetadataDriversReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesFileMetadataDriversRead().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesFileMetadataDriversRead().');
            }
            if (requestParameters['driverId'] == null) {
                throw new runtime.RequiredError('driverId', 'Required parameter "driverId" was null or undefined when calling documentsFilesFileMetadataDriversRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/file_metadata/drivers/{driver_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            urlPath = urlPath.replace(`{${"driver_id"}}`, encodeURIComponent(String(requestParameters['driverId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentFileMetadataDriverEntryFromJSON)(jsonValue));
        });
    }
    /**
     * Returns the details of the document file metadata driver.
     */
    documentsFilesFileMetadataDriversRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesFileMetadataDriversReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Submit a document file for file metadata processing.
     */
    documentsFilesFileMetadataSubmitCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesFileMetadataSubmitCreate().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesFileMetadataSubmitCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsFilesFileMetadataSubmitCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/file_metadata/submit/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['data'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Submit a document file for file metadata processing.
     */
    documentsFilesFileMetadataSubmitCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesFileMetadataSubmitCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return a list of the selected document\'s files.
     */
    documentsFilesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsFilesList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Return a list of the selected document\'s files.
     */
    documentsFilesList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the content of the selected document page.
     */
    documentsFilesPagesContentReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesPagesContentRead().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesPagesContentRead().');
            }
            if (requestParameters['documentFilePageId'] == null) {
                throw new runtime.RequiredError('documentFilePageId', 'Required parameter "documentFilePageId" was null or undefined when calling documentsFilesPagesContentRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/pages/{document_file_page_id}/content/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            urlPath = urlPath.replace(`{${"document_file_page_id"}}`, encodeURIComponent(String(requestParameters['documentFilePageId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentFilePageContentFromJSON)(jsonValue));
        });
    }
    /**
     * Returns the content of the selected document page.
     */
    documentsFilesPagesContentRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesPagesContentReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns an image representation of the selected document.
     */
    documentsFilesPagesImageReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesPagesImageRead().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesPagesImageRead().');
            }
            if (requestParameters['documentFilePageId'] == null) {
                throw new runtime.RequiredError('documentFilePageId', 'Required parameter "documentFilePageId" was null or undefined when calling documentsFilesPagesImageRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/pages/{document_file_page_id}/image/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            urlPath = urlPath.replace(`{${"document_file_page_id"}}`, encodeURIComponent(String(requestParameters['documentFilePageId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Returns an image representation of the selected document.
     */
    documentsFilesPagesImageRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.documentsFilesPagesImageReadRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    documentsFilesPagesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesPagesList().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesPagesList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/pages/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsFilesPagesList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    documentsFilesPagesList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesPagesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the selected document page details.
     */
    documentsFilesPagesReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesPagesRead().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesPagesRead().');
            }
            if (requestParameters['documentFilePageId'] == null) {
                throw new runtime.RequiredError('documentFilePageId', 'Required parameter "documentFilePageId" was null or undefined when calling documentsFilesPagesRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/pages/{document_file_page_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            urlPath = urlPath.replace(`{${"document_file_page_id"}}`, encodeURIComponent(String(requestParameters['documentFilePageId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentFilePageFromJSON)(jsonValue));
        });
    }
    /**
     * Returns the selected document page details.
     */
    documentsFilesPagesRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesPagesReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    documentsFilesPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesPartialUpdate().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesPartialUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsFilesPartialUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentFileToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentFileFromJSON)(jsonValue));
        });
    }
    /**
     */
    documentsFilesPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the selected document file details.
     */
    documentsFilesReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesRead().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentFileFromJSON)(jsonValue));
        });
    }
    /**
     * Returns the selected document file details.
     */
    documentsFilesRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete an detached signature of the selected document.
     */
    documentsFilesSignaturesDetachedDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesSignaturesDetachedDelete().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesSignaturesDetachedDelete().');
            }
            if (requestParameters['detachedSignatureId'] == null) {
                throw new runtime.RequiredError('detachedSignatureId', 'Required parameter "detachedSignatureId" was null or undefined when calling documentsFilesSignaturesDetachedDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/signatures/detached/{detached_signature_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            urlPath = urlPath.replace(`{${"detached_signature_id"}}`, encodeURIComponent(String(requestParameters['detachedSignatureId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete an detached signature of the selected document.
     */
    documentsFilesSignaturesDetachedDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.documentsFilesSignaturesDetachedDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Returns a list of all the detached signatures of a document file.
     */
    documentsFilesSignaturesDetachedListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesSignaturesDetachedList().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesSignaturesDetachedList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/signatures/detached/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsFilesSignaturesDetachedList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the detached signatures of a document file.
     */
    documentsFilesSignaturesDetachedList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesSignaturesDetachedListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the details of the selected detached signature.
     */
    documentsFilesSignaturesDetachedReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesSignaturesDetachedRead().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesSignaturesDetachedRead().');
            }
            if (requestParameters['detachedSignatureId'] == null) {
                throw new runtime.RequiredError('detachedSignatureId', 'Required parameter "detachedSignatureId" was null or undefined when calling documentsFilesSignaturesDetachedRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/signatures/detached/{detached_signature_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            urlPath = urlPath.replace(`{${"detached_signature_id"}}`, encodeURIComponent(String(requestParameters['detachedSignatureId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DetachedSignatureFromJSON)(jsonValue));
        });
    }
    /**
     * Returns the details of the selected detached signature.
     */
    documentsFilesSignaturesDetachedRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesSignaturesDetachedReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Sign a document file with a detached signature.
     */
    documentsFilesSignaturesDetachedSignCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesSignaturesDetachedSignCreate().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesSignaturesDetachedSignCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsFilesSignaturesDetachedSignCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/signatures/detached/sign/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SignDetachedToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SignDetachedFromJSON)(jsonValue));
        });
    }
    /**
     * Sign a document file with a detached signature.
     */
    documentsFilesSignaturesDetachedSignCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesSignaturesDetachedSignCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Upload a detached signature file for a document file.
     */
    documentsFilesSignaturesDetachedUploadCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesSignaturesDetachedUploadCreate().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesSignaturesDetachedUploadCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsFilesSignaturesDetachedUploadCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/signatures/detached/upload/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DetachedSignatureUploadToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DetachedSignatureUploadFromJSON)(jsonValue));
        });
    }
    /**
     * Upload a detached signature file for a document file.
     */
    documentsFilesSignaturesDetachedUploadCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesSignaturesDetachedUploadCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a list of all the embedded signatures of a document file.
     */
    documentsFilesSignaturesEmbeddedListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesSignaturesEmbeddedList().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesSignaturesEmbeddedList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/signatures/embedded/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsFilesSignaturesEmbeddedList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the embedded signatures of a document file.
     */
    documentsFilesSignaturesEmbeddedList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesSignaturesEmbeddedListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the details of the selected embedded signature.
     */
    documentsFilesSignaturesEmbeddedReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesSignaturesEmbeddedRead().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesSignaturesEmbeddedRead().');
            }
            if (requestParameters['embeddedSignatureId'] == null) {
                throw new runtime.RequiredError('embeddedSignatureId', 'Required parameter "embeddedSignatureId" was null or undefined when calling documentsFilesSignaturesEmbeddedRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/signatures/embedded/{embedded_signature_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            urlPath = urlPath.replace(`{${"embedded_signature_id"}}`, encodeURIComponent(String(requestParameters['embeddedSignatureId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EmbeddedSignatureFromJSON)(jsonValue));
        });
    }
    /**
     * Returns the details of the selected embedded signature.
     */
    documentsFilesSignaturesEmbeddedRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesSignaturesEmbeddedReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Sign a document file with an embedded signature.
     */
    documentsFilesSignaturesEmbeddedSignCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesSignaturesEmbeddedSignCreate().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesSignaturesEmbeddedSignCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsFilesSignaturesEmbeddedSignCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/signatures/embedded/sign/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SignEmbeddedToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SignEmbeddedFromJSON)(jsonValue));
        });
    }
    /**
     * Sign a document file with an embedded signature.
     */
    documentsFilesSignaturesEmbeddedSignCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesSignaturesEmbeddedSignCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a list of selected document\'s source metadata values.
     */
    documentsFilesSourceMetadataListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesSourceMetadataList().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesSourceMetadataList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/source_metadata/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsFilesSourceMetadataList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of selected document\'s source metadata values.
     */
    documentsFilesSourceMetadataList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesSourceMetadataListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the details of the selected document source metadata.
     */
    documentsFilesSourceMetadataReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesSourceMetadataRead().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesSourceMetadataRead().');
            }
            if (requestParameters['documentFileSourceMetadataId'] == null) {
                throw new runtime.RequiredError('documentFileSourceMetadataId', 'Required parameter "documentFileSourceMetadataId" was null or undefined when calling documentsFilesSourceMetadataRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/source_metadata/{document_file_source_metadata_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            urlPath = urlPath.replace(`{${"document_file_source_metadata_id"}}`, encodeURIComponent(String(requestParameters['documentFileSourceMetadataId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentFileSourceMetadataFromJSON)(jsonValue));
        });
    }
    /**
     * Return the details of the selected document source metadata.
     */
    documentsFilesSourceMetadataRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesSourceMetadataReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    documentsFilesUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsFilesUpdate().');
            }
            if (requestParameters['documentFileId'] == null) {
                throw new runtime.RequiredError('documentFileId', 'Required parameter "documentFileId" was null or undefined when calling documentsFilesUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsFilesUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/files/{document_file_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_file_id"}}`, encodeURIComponent(String(requestParameters['documentFileId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentFileToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentFileFromJSON)(jsonValue));
        });
    }
    /**
     */
    documentsFilesUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsFilesUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a list of all the indexes instance nodes where this document is found.
     */
    documentsIndexesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsIndexesList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/indexes/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsIndexesList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the indexes instance nodes where this document is found.
     */
    documentsIndexesList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsIndexesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a list of all the documents.
     */
    documentsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CabinetsDocumentsList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the documents.
     */
    documentsList() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.documentsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Add an existing metadata type and value to the selected document.
     */
    documentsMetadataCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsMetadataCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsMetadataCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/metadata/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentMetadataToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentMetadataFromJSON)(jsonValue));
        });
    }
    /**
     * Add an existing metadata type and value to the selected document.
     */
    documentsMetadataCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsMetadataCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Remove this metadata entry from the selected document.
     */
    documentsMetadataDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsMetadataDelete().');
            }
            if (requestParameters['metadataId'] == null) {
                throw new runtime.RequiredError('metadataId', 'Required parameter "metadataId" was null or undefined when calling documentsMetadataDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/metadata/{metadata_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"metadata_id"}}`, encodeURIComponent(String(requestParameters['metadataId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Remove this metadata entry from the selected document.
     */
    documentsMetadataDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.documentsMetadataDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Returns a list of selected document\'s metadata types and values.
     */
    documentsMetadataListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsMetadataList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/metadata/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsMetadataList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of selected document\'s metadata types and values.
     */
    documentsMetadataList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsMetadataListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the selected document metadata type and value.
     */
    documentsMetadataPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsMetadataPartialUpdate().');
            }
            if (requestParameters['metadataId'] == null) {
                throw new runtime.RequiredError('metadataId', 'Required parameter "metadataId" was null or undefined when calling documentsMetadataPartialUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsMetadataPartialUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/metadata/{metadata_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"metadata_id"}}`, encodeURIComponent(String(requestParameters['metadataId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentMetadataToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentMetadataFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the selected document metadata type and value.
     */
    documentsMetadataPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsMetadataPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the details of the selected document metadata type and value.
     */
    documentsMetadataReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsMetadataRead().');
            }
            if (requestParameters['metadataId'] == null) {
                throw new runtime.RequiredError('metadataId', 'Required parameter "metadataId" was null or undefined when calling documentsMetadataRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/metadata/{metadata_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"metadata_id"}}`, encodeURIComponent(String(requestParameters['metadataId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentMetadataFromJSON)(jsonValue));
        });
    }
    /**
     * Return the details of the selected document metadata type and value.
     */
    documentsMetadataRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsMetadataReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the selected document metadata type and value.
     */
    documentsMetadataUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsMetadataUpdate().');
            }
            if (requestParameters['metadataId'] == null) {
                throw new runtime.RequiredError('metadataId', 'Required parameter "metadataId" was null or undefined when calling documentsMetadataUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsMetadataUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/metadata/{metadata_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"metadata_id"}}`, encodeURIComponent(String(requestParameters['metadataId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentMetadataToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentMetadataFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the selected document metadata type and value.
     */
    documentsMetadataUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsMetadataUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Submit a document for OCR.
     */
    documentsOcrSubmitCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsOcrSubmitCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/ocr/submit/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Submit a document for OCR.
     */
    documentsOcrSubmitCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.documentsOcrSubmitCreateRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Edit the properties of the selected document.
     */
    documentsPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsPartialUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsPartialUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the properties of the selected document.
     */
    documentsPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the details of the selected document.
     */
    documentsReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentFromJSON)(jsonValue));
        });
    }
    /**
     * Return the details of the selected document.
     */
    documentsRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a list of the smart link documents that apply to the document.
     */
    documentsResolvedSmartLinksDocumentsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsResolvedSmartLinksDocumentsList().');
            }
            if (requestParameters['resolvedSmartLinkId'] == null) {
                throw new runtime.RequiredError('resolvedSmartLinkId', 'Required parameter "resolvedSmartLinkId" was null or undefined when calling documentsResolvedSmartLinksDocumentsList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/resolved_smart_links/{resolved_smart_link_id}/documents/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"resolved_smart_link_id"}}`, encodeURIComponent(String(requestParameters['resolvedSmartLinkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsResolvedSmartLinksDocumentsList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of the smart link documents that apply to the document.
     */
    documentsResolvedSmartLinksDocumentsList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsResolvedSmartLinksDocumentsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a list of the smart links that apply to the document.
     */
    documentsResolvedSmartLinksListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsResolvedSmartLinksList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/resolved_smart_links/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsResolvedSmartLinksList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of the smart links that apply to the document.
     */
    documentsResolvedSmartLinksList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsResolvedSmartLinksListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the details of the selected resolved smart link.
     */
    documentsResolvedSmartLinksReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsResolvedSmartLinksRead().');
            }
            if (requestParameters['resolvedSmartLinkId'] == null) {
                throw new runtime.RequiredError('resolvedSmartLinkId', 'Required parameter "resolvedSmartLinkId" was null or undefined when calling documentsResolvedSmartLinksRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/resolved_smart_links/{resolved_smart_link_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"resolved_smart_link_id"}}`, encodeURIComponent(String(requestParameters['resolvedSmartLinkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ResolvedSmartLinkFromJSON)(jsonValue));
        });
    }
    /**
     * Return the details of the selected resolved smart link.
     */
    documentsResolvedSmartLinksRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsResolvedSmartLinksReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a list of resolved web links for the specified document.
     */
    documentsResolvedWebLinksListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsResolvedWebLinksList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/resolved_web_links/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsResolvedWebLinksList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of resolved web links for the specified document.
     */
    documentsResolvedWebLinksList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsResolvedWebLinksListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Perform a redirection to the target URL of the selected resolved smart link.
     */
    documentsResolvedWebLinksNavigateReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsResolvedWebLinksNavigateRead().');
            }
            if (requestParameters['resolvedWebLinkId'] == null) {
                throw new runtime.RequiredError('resolvedWebLinkId', 'Required parameter "resolvedWebLinkId" was null or undefined when calling documentsResolvedWebLinksNavigateRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/resolved_web_links/{resolved_web_link_id}/navigate/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"resolved_web_link_id"}}`, encodeURIComponent(String(requestParameters['resolvedWebLinkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Perform a redirection to the target URL of the selected resolved smart link.
     */
    documentsResolvedWebLinksNavigateRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsResolvedWebLinksNavigateReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the details of the selected resolved smart link.
     */
    documentsResolvedWebLinksReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsResolvedWebLinksRead().');
            }
            if (requestParameters['resolvedWebLinkId'] == null) {
                throw new runtime.RequiredError('resolvedWebLinkId', 'Required parameter "resolvedWebLinkId" was null or undefined when calling documentsResolvedWebLinksRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/resolved_web_links/{resolved_web_link_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"resolved_web_link_id"}}`, encodeURIComponent(String(requestParameters['resolvedWebLinkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ResolvedWebLinkFromJSON)(jsonValue));
        });
    }
    /**
     * Return the details of the selected resolved smart link.
     */
    documentsResolvedWebLinksRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsResolvedWebLinksReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new signature_capture.
     */
    documentsSignatureCapturesCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsSignatureCapturesCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsSignatureCapturesCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/signature_captures/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SignatureCaptureToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SignatureCaptureFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new signature_capture.
     */
    documentsSignatureCapturesCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsSignatureCapturesCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the selected signature_capture.
     */
    documentsSignatureCapturesDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsSignatureCapturesDelete().');
            }
            if (requestParameters['signatureCaptureId'] == null) {
                throw new runtime.RequiredError('signatureCaptureId', 'Required parameter "signatureCaptureId" was null or undefined when calling documentsSignatureCapturesDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/signature_captures/{signature_capture_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"signature_capture_id"}}`, encodeURIComponent(String(requestParameters['signatureCaptureId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the selected signature_capture.
     */
    documentsSignatureCapturesDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.documentsSignatureCapturesDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Returns an image representation of the selected signature capture.
     */
    documentsSignatureCapturesImageReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsSignatureCapturesImageRead().');
            }
            if (requestParameters['signatureCaptureId'] == null) {
                throw new runtime.RequiredError('signatureCaptureId', 'Required parameter "signatureCaptureId" was null or undefined when calling documentsSignatureCapturesImageRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/signature_captures/{signature_capture_id}/image/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"signature_capture_id"}}`, encodeURIComponent(String(requestParameters['signatureCaptureId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Returns an image representation of the selected signature capture.
     */
    documentsSignatureCapturesImageRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.documentsSignatureCapturesImageReadRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Returns a list of all the signature_captures.
     */
    documentsSignatureCapturesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsSignatureCapturesList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/signature_captures/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsSignatureCapturesList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the signature_captures.
     */
    documentsSignatureCapturesList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsSignatureCapturesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the selected signature_capture.
     */
    documentsSignatureCapturesPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsSignatureCapturesPartialUpdate().');
            }
            if (requestParameters['signatureCaptureId'] == null) {
                throw new runtime.RequiredError('signatureCaptureId', 'Required parameter "signatureCaptureId" was null or undefined when calling documentsSignatureCapturesPartialUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsSignatureCapturesPartialUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/signature_captures/{signature_capture_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"signature_capture_id"}}`, encodeURIComponent(String(requestParameters['signatureCaptureId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SignatureCaptureToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SignatureCaptureFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the selected signature_capture.
     */
    documentsSignatureCapturesPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsSignatureCapturesPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the details of the selected signature_capture.
     */
    documentsSignatureCapturesReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsSignatureCapturesRead().');
            }
            if (requestParameters['signatureCaptureId'] == null) {
                throw new runtime.RequiredError('signatureCaptureId', 'Required parameter "signatureCaptureId" was null or undefined when calling documentsSignatureCapturesRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/signature_captures/{signature_capture_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"signature_capture_id"}}`, encodeURIComponent(String(requestParameters['signatureCaptureId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SignatureCaptureFromJSON)(jsonValue));
        });
    }
    /**
     * Return the details of the selected signature_capture.
     */
    documentsSignatureCapturesRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsSignatureCapturesReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the selected signature_capture.
     */
    documentsSignatureCapturesUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsSignatureCapturesUpdate().');
            }
            if (requestParameters['signatureCaptureId'] == null) {
                throw new runtime.RequiredError('signatureCaptureId', 'Required parameter "signatureCaptureId" was null or undefined when calling documentsSignatureCapturesUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsSignatureCapturesUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/signature_captures/{signature_capture_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"signature_capture_id"}}`, encodeURIComponent(String(requestParameters['signatureCaptureId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SignatureCaptureToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SignatureCaptureFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the selected signature_capture.
     */
    documentsSignatureCapturesUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsSignatureCapturesUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Attach a tag to a document.
     */
    documentsTagsAttachCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsTagsAttachCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsTagsAttachCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/tags/attach/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentTagAttachToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTagAttachFromJSON)(jsonValue));
        });
    }
    /**
     * Attach a tag to a document.
     */
    documentsTagsAttachCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsTagsAttachCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a list of all the tags attached to a document.
     */
    documentsTagsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsTagsList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/tags/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsTagsList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the tags attached to a document.
     */
    documentsTagsList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsTagsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Remove a tag from a document.
     */
    documentsTagsRemoveCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsTagsRemoveCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsTagsRemoveCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/tags/remove/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentTagRemoveToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTagRemoveFromJSON)(jsonValue));
        });
    }
    /**
     * Remove a tag from a document.
     */
    documentsTagsRemoveCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsTagsRemoveCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Change the type of the selected document.
     */
    documentsTypeChangeCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsTypeChangeCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsTypeChangeCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/type/change/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentChangeTypeToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentChangeTypeFromJSON)(jsonValue));
        });
    }
    /**
     * Change the type of the selected document.
     */
    documentsTypeChangeCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsTypeChangeCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the properties of the selected document.
     */
    documentsUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the properties of the selected document.
     */
    documentsUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new document and a new document file.
     */
    documentsUploadCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsUploadCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/upload/`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentUploadToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentUploadFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new document and a new document file.
     */
    documentsUploadCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsUploadCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new document version.
     */
    documentsVersionsCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsVersionsCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsVersionsCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/versions/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentVersionToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentVersionFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new document version.
     */
    documentsVersionsCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsVersionsCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the selected document version.
     */
    documentsVersionsDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsVersionsDelete().');
            }
            if (requestParameters['documentVersionId'] == null) {
                throw new runtime.RequiredError('documentVersionId', 'Required parameter "documentVersionId" was null or undefined when calling documentsVersionsDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/versions/{document_version_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_version_id"}}`, encodeURIComponent(String(requestParameters['documentVersionId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the selected document version.
     */
    documentsVersionsDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.documentsVersionsDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Exports the specified document version.
     */
    documentsVersionsExportCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsVersionsExportCreate().');
            }
            if (requestParameters['documentVersionId'] == null) {
                throw new runtime.RequiredError('documentVersionId', 'Required parameter "documentVersionId" was null or undefined when calling documentsVersionsExportCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsVersionsExportCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/versions/{document_version_id}/export/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_version_id"}}`, encodeURIComponent(String(requestParameters['documentVersionId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['data'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Exports the specified document version.
     */
    documentsVersionsExportCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsVersionsExportCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return a list of the selected document\'s versions.
     */
    documentsVersionsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsVersionsList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/versions/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsVersionsList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Return a list of the selected document\'s versions.
     */
    documentsVersionsList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsVersionsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Execute a modification backend on the selected document version.
     */
    documentsVersionsModifyCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsVersionsModifyCreate().');
            }
            if (requestParameters['documentVersionId'] == null) {
                throw new runtime.RequiredError('documentVersionId', 'Required parameter "documentVersionId" was null or undefined when calling documentsVersionsModifyCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsVersionsModifyCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/versions/{document_version_id}/modify/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_version_id"}}`, encodeURIComponent(String(requestParameters['documentVersionId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentVersionModificationExecuteToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentVersionModificationExecuteFromJSON)(jsonValue));
        });
    }
    /**
     * Execute a modification backend on the selected document version.
     */
    documentsVersionsModifyCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsVersionsModifyCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Submit a document version for OCR.
     */
    documentsVersionsOcrSubmitCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsVersionsOcrSubmitCreate().');
            }
            if (requestParameters['documentVersionId'] == null) {
                throw new runtime.RequiredError('documentVersionId', 'Required parameter "documentVersionId" was null or undefined when calling documentsVersionsOcrSubmitCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/versions/{document_version_id}/ocr/submit/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_version_id"}}`, encodeURIComponent(String(requestParameters['documentVersionId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Submit a document version for OCR.
     */
    documentsVersionsOcrSubmitCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.documentsVersionsOcrSubmitCreateRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Create a new document version page.
     */
    documentsVersionsPagesCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsVersionsPagesCreate().');
            }
            if (requestParameters['documentVersionId'] == null) {
                throw new runtime.RequiredError('documentVersionId', 'Required parameter "documentVersionId" was null or undefined when calling documentsVersionsPagesCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsVersionsPagesCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/versions/{document_version_id}/pages/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_version_id"}}`, encodeURIComponent(String(requestParameters['documentVersionId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentVersionPageToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentVersionPageFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new document version page.
     */
    documentsVersionsPagesCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsVersionsPagesCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the selected document version page.
     */
    documentsVersionsPagesDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsVersionsPagesDelete().');
            }
            if (requestParameters['documentVersionId'] == null) {
                throw new runtime.RequiredError('documentVersionId', 'Required parameter "documentVersionId" was null or undefined when calling documentsVersionsPagesDelete().');
            }
            if (requestParameters['documentVersionPageId'] == null) {
                throw new runtime.RequiredError('documentVersionPageId', 'Required parameter "documentVersionPageId" was null or undefined when calling documentsVersionsPagesDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/versions/{document_version_id}/pages/{document_version_page_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_version_id"}}`, encodeURIComponent(String(requestParameters['documentVersionId'])));
            urlPath = urlPath.replace(`{${"document_version_page_id"}}`, encodeURIComponent(String(requestParameters['documentVersionPageId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the selected document version page.
     */
    documentsVersionsPagesDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.documentsVersionsPagesDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Returns an image representation of the selected document version page.
     */
    documentsVersionsPagesImageReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsVersionsPagesImageRead().');
            }
            if (requestParameters['documentVersionId'] == null) {
                throw new runtime.RequiredError('documentVersionId', 'Required parameter "documentVersionId" was null or undefined when calling documentsVersionsPagesImageRead().');
            }
            if (requestParameters['documentVersionPageId'] == null) {
                throw new runtime.RequiredError('documentVersionPageId', 'Required parameter "documentVersionPageId" was null or undefined when calling documentsVersionsPagesImageRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/versions/{document_version_id}/pages/{document_version_page_id}/image/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_version_id"}}`, encodeURIComponent(String(requestParameters['documentVersionId'])));
            urlPath = urlPath.replace(`{${"document_version_page_id"}}`, encodeURIComponent(String(requestParameters['documentVersionPageId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Returns an image representation of the selected document version page.
     */
    documentsVersionsPagesImageRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.documentsVersionsPagesImageReadRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Returns an list of the pages for the selected document version.
     */
    documentsVersionsPagesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsVersionsPagesList().');
            }
            if (requestParameters['documentVersionId'] == null) {
                throw new runtime.RequiredError('documentVersionId', 'Required parameter "documentVersionId" was null or undefined when calling documentsVersionsPagesList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/versions/{document_version_id}/pages/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_version_id"}}`, encodeURIComponent(String(requestParameters['documentVersionId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsVersionsPagesList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns an list of the pages for the selected document version.
     */
    documentsVersionsPagesList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsVersionsPagesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the OCR content of the selected document page.
     */
    documentsVersionsPagesOcrPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsVersionsPagesOcrPartialUpdate().');
            }
            if (requestParameters['documentVersionId'] == null) {
                throw new runtime.RequiredError('documentVersionId', 'Required parameter "documentVersionId" was null or undefined when calling documentsVersionsPagesOcrPartialUpdate().');
            }
            if (requestParameters['documentVersionPageId'] == null) {
                throw new runtime.RequiredError('documentVersionPageId', 'Required parameter "documentVersionPageId" was null or undefined when calling documentsVersionsPagesOcrPartialUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsVersionsPagesOcrPartialUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/versions/{document_version_id}/pages/{document_version_page_id}/ocr/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_version_id"}}`, encodeURIComponent(String(requestParameters['documentVersionId'])));
            urlPath = urlPath.replace(`{${"document_version_page_id"}}`, encodeURIComponent(String(requestParameters['documentVersionPageId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentVersionPageOCRContentToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentVersionPageOCRContentFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the OCR content of the selected document page.
     */
    documentsVersionsPagesOcrPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsVersionsPagesOcrPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the OCR content of the selected document page.
     */
    documentsVersionsPagesOcrReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsVersionsPagesOcrRead().');
            }
            if (requestParameters['documentVersionId'] == null) {
                throw new runtime.RequiredError('documentVersionId', 'Required parameter "documentVersionId" was null or undefined when calling documentsVersionsPagesOcrRead().');
            }
            if (requestParameters['documentVersionPageId'] == null) {
                throw new runtime.RequiredError('documentVersionPageId', 'Required parameter "documentVersionPageId" was null or undefined when calling documentsVersionsPagesOcrRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/versions/{document_version_id}/pages/{document_version_page_id}/ocr/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_version_id"}}`, encodeURIComponent(String(requestParameters['documentVersionId'])));
            urlPath = urlPath.replace(`{${"document_version_page_id"}}`, encodeURIComponent(String(requestParameters['documentVersionPageId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentVersionPageOCRContentFromJSON)(jsonValue));
        });
    }
    /**
     * Returns the OCR content of the selected document page.
     */
    documentsVersionsPagesOcrRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsVersionsPagesOcrReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the OCR content of the selected document page.
     */
    documentsVersionsPagesOcrUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsVersionsPagesOcrUpdate().');
            }
            if (requestParameters['documentVersionId'] == null) {
                throw new runtime.RequiredError('documentVersionId', 'Required parameter "documentVersionId" was null or undefined when calling documentsVersionsPagesOcrUpdate().');
            }
            if (requestParameters['documentVersionPageId'] == null) {
                throw new runtime.RequiredError('documentVersionPageId', 'Required parameter "documentVersionPageId" was null or undefined when calling documentsVersionsPagesOcrUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsVersionsPagesOcrUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/versions/{document_version_id}/pages/{document_version_page_id}/ocr/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_version_id"}}`, encodeURIComponent(String(requestParameters['documentVersionId'])));
            urlPath = urlPath.replace(`{${"document_version_page_id"}}`, encodeURIComponent(String(requestParameters['documentVersionPageId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentVersionPageOCRContentToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentVersionPageOCRContentFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the OCR content of the selected document page.
     */
    documentsVersionsPagesOcrUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsVersionsPagesOcrUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the properties of the selected document version page.
     */
    documentsVersionsPagesPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsVersionsPagesPartialUpdate().');
            }
            if (requestParameters['documentVersionId'] == null) {
                throw new runtime.RequiredError('documentVersionId', 'Required parameter "documentVersionId" was null or undefined when calling documentsVersionsPagesPartialUpdate().');
            }
            if (requestParameters['documentVersionPageId'] == null) {
                throw new runtime.RequiredError('documentVersionPageId', 'Required parameter "documentVersionPageId" was null or undefined when calling documentsVersionsPagesPartialUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsVersionsPagesPartialUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/versions/{document_version_id}/pages/{document_version_page_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_version_id"}}`, encodeURIComponent(String(requestParameters['documentVersionId'])));
            urlPath = urlPath.replace(`{${"document_version_page_id"}}`, encodeURIComponent(String(requestParameters['documentVersionPageId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentVersionPageToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentVersionPageFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the properties of the selected document version page.
     */
    documentsVersionsPagesPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsVersionsPagesPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the selected document version page details.
     */
    documentsVersionsPagesReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsVersionsPagesRead().');
            }
            if (requestParameters['documentVersionId'] == null) {
                throw new runtime.RequiredError('documentVersionId', 'Required parameter "documentVersionId" was null or undefined when calling documentsVersionsPagesRead().');
            }
            if (requestParameters['documentVersionPageId'] == null) {
                throw new runtime.RequiredError('documentVersionPageId', 'Required parameter "documentVersionPageId" was null or undefined when calling documentsVersionsPagesRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/versions/{document_version_id}/pages/{document_version_page_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_version_id"}}`, encodeURIComponent(String(requestParameters['documentVersionId'])));
            urlPath = urlPath.replace(`{${"document_version_page_id"}}`, encodeURIComponent(String(requestParameters['documentVersionPageId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentVersionPageFromJSON)(jsonValue));
        });
    }
    /**
     * Returns the selected document version page details.
     */
    documentsVersionsPagesRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsVersionsPagesReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the properties of the selected document version page.
     */
    documentsVersionsPagesUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsVersionsPagesUpdate().');
            }
            if (requestParameters['documentVersionId'] == null) {
                throw new runtime.RequiredError('documentVersionId', 'Required parameter "documentVersionId" was null or undefined when calling documentsVersionsPagesUpdate().');
            }
            if (requestParameters['documentVersionPageId'] == null) {
                throw new runtime.RequiredError('documentVersionPageId', 'Required parameter "documentVersionPageId" was null or undefined when calling documentsVersionsPagesUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsVersionsPagesUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/versions/{document_version_id}/pages/{document_version_page_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_version_id"}}`, encodeURIComponent(String(requestParameters['documentVersionId'])));
            urlPath = urlPath.replace(`{${"document_version_page_id"}}`, encodeURIComponent(String(requestParameters['documentVersionPageId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentVersionPageToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentVersionPageFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the properties of the selected document version page.
     */
    documentsVersionsPagesUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsVersionsPagesUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the properties of the selected document version.
     */
    documentsVersionsPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsVersionsPartialUpdate().');
            }
            if (requestParameters['documentVersionId'] == null) {
                throw new runtime.RequiredError('documentVersionId', 'Required parameter "documentVersionId" was null or undefined when calling documentsVersionsPartialUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsVersionsPartialUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/versions/{document_version_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_version_id"}}`, encodeURIComponent(String(requestParameters['documentVersionId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentVersionToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentVersionFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the properties of the selected document version.
     */
    documentsVersionsPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsVersionsPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns the selected document version details.
     */
    documentsVersionsReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsVersionsRead().');
            }
            if (requestParameters['documentVersionId'] == null) {
                throw new runtime.RequiredError('documentVersionId', 'Required parameter "documentVersionId" was null or undefined when calling documentsVersionsRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/versions/{document_version_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_version_id"}}`, encodeURIComponent(String(requestParameters['documentVersionId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentVersionFromJSON)(jsonValue));
        });
    }
    /**
     * Returns the selected document version details.
     */
    documentsVersionsRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsVersionsReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the properties of the selected document version.
     */
    documentsVersionsUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsVersionsUpdate().');
            }
            if (requestParameters['documentVersionId'] == null) {
                throw new runtime.RequiredError('documentVersionId', 'Required parameter "documentVersionId" was null or undefined when calling documentsVersionsUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsVersionsUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/versions/{document_version_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"document_version_id"}}`, encodeURIComponent(String(requestParameters['documentVersionId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentVersionToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentVersionFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the properties of the selected document version.
     */
    documentsVersionsUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsVersionsUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Launch a new workflow instance for the specified document.
     */
    documentsWorkflowInstancesLaunchCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsWorkflowInstancesLaunchCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsWorkflowInstancesLaunchCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/workflow_instances/launch/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowInstanceLaunchToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowInstanceLaunchFromJSON)(jsonValue));
        });
    }
    /**
     * Launch a new workflow instance for the specified document.
     */
    documentsWorkflowInstancesLaunchCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsWorkflowInstancesLaunchCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a list of all the document workflow instances.
     */
    documentsWorkflowInstancesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsWorkflowInstancesList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/workflow_instances/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsWorkflowInstancesList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the document workflow instances.
     */
    documentsWorkflowInstancesList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsWorkflowInstancesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Transition a document workflow by creating a new document workflow instance log entry.
     */
    documentsWorkflowInstancesLogEntriesCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsWorkflowInstancesLogEntriesCreate().');
            }
            if (requestParameters['workflowInstanceId'] == null) {
                throw new runtime.RequiredError('workflowInstanceId', 'Required parameter "workflowInstanceId" was null or undefined when calling documentsWorkflowInstancesLogEntriesCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentsWorkflowInstancesLogEntriesCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/workflow_instances/{workflow_instance_id}/log_entries/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"workflow_instance_id"}}`, encodeURIComponent(String(requestParameters['workflowInstanceId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowInstanceLogEntryToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowInstanceLogEntryFromJSON)(jsonValue));
        });
    }
    /**
     * Transition a document workflow by creating a new document workflow instance log entry.
     */
    documentsWorkflowInstancesLogEntriesCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsWorkflowInstancesLogEntriesCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a list of all the document workflow instances log entries.
     */
    documentsWorkflowInstancesLogEntriesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsWorkflowInstancesLogEntriesList().');
            }
            if (requestParameters['workflowInstanceId'] == null) {
                throw new runtime.RequiredError('workflowInstanceId', 'Required parameter "workflowInstanceId" was null or undefined when calling documentsWorkflowInstancesLogEntriesList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/workflow_instances/{workflow_instance_id}/log_entries/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"workflow_instance_id"}}`, encodeURIComponent(String(requestParameters['workflowInstanceId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsWorkflowInstancesLogEntriesList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the document workflow instances log entries.
     */
    documentsWorkflowInstancesLogEntriesList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsWorkflowInstancesLogEntriesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the details of the selected document instances log entry.
     */
    documentsWorkflowInstancesLogEntriesReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsWorkflowInstancesLogEntriesRead().');
            }
            if (requestParameters['workflowInstanceId'] == null) {
                throw new runtime.RequiredError('workflowInstanceId', 'Required parameter "workflowInstanceId" was null or undefined when calling documentsWorkflowInstancesLogEntriesRead().');
            }
            if (requestParameters['workflowInstanceLogEntryId'] == null) {
                throw new runtime.RequiredError('workflowInstanceLogEntryId', 'Required parameter "workflowInstanceLogEntryId" was null or undefined when calling documentsWorkflowInstancesLogEntriesRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/workflow_instances/{workflow_instance_id}/log_entries/{workflow_instance_log_entry_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"workflow_instance_id"}}`, encodeURIComponent(String(requestParameters['workflowInstanceId'])));
            urlPath = urlPath.replace(`{${"workflow_instance_log_entry_id"}}`, encodeURIComponent(String(requestParameters['workflowInstanceLogEntryId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowInstanceLogEntryFromJSON)(jsonValue));
        });
    }
    /**
     * Return the details of the selected document instances log entry.
     */
    documentsWorkflowInstancesLogEntriesRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsWorkflowInstancesLogEntriesReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a list of all the possible transition choices for the workflow instance.
     */
    documentsWorkflowInstancesLogEntriesTransitionsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsWorkflowInstancesLogEntriesTransitionsList().');
            }
            if (requestParameters['workflowInstanceId'] == null) {
                throw new runtime.RequiredError('workflowInstanceId', 'Required parameter "workflowInstanceId" was null or undefined when calling documentsWorkflowInstancesLogEntriesTransitionsList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/workflow_instances/{workflow_instance_id}/log_entries/transitions/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"workflow_instance_id"}}`, encodeURIComponent(String(requestParameters['workflowInstanceId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsWorkflowInstancesLogEntriesTransitionsList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the possible transition choices for the workflow instance.
     */
    documentsWorkflowInstancesLogEntriesTransitionsList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsWorkflowInstancesLogEntriesTransitionsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the details of the selected document workflow instances.
     */
    documentsWorkflowInstancesReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentId'] == null) {
                throw new runtime.RequiredError('documentId', 'Required parameter "documentId" was null or undefined when calling documentsWorkflowInstancesRead().');
            }
            if (requestParameters['workflowInstanceId'] == null) {
                throw new runtime.RequiredError('workflowInstanceId', 'Required parameter "workflowInstanceId" was null or undefined when calling documentsWorkflowInstancesRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/documents/{document_id}/workflow_instances/{workflow_instance_id}/`;
            urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
            urlPath = urlPath.replace(`{${"workflow_instance_id"}}`, encodeURIComponent(String(requestParameters['workflowInstanceId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowInstanceFromJSON)(jsonValue));
        });
    }
    /**
     * Return the details of the selected document workflow instances.
     */
    documentsWorkflowInstancesRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentsWorkflowInstancesReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.DocumentsApi = DocumentsApi;
