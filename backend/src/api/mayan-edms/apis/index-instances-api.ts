/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CabinetsDocumentsList200Response } from '../models';
// @ts-ignore
import type { DocumentsIndexesList200Response } from '../models';
// @ts-ignore
import type { IndexInstance } from '../models';
// @ts-ignore
import type { IndexInstanceNode } from '../models';
// @ts-ignore
import type { IndexInstancesList200Response } from '../models';
/**
 * IndexInstancesApi - axios parameter creator
 * @export
 */
export const IndexInstancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of all the indexes instances.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexInstancesList: async (ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index_instances/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the documents contained by a particular index instance node.
         * @param {string} indexInstanceId 
         * @param {string} indexInstanceNodeId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexInstancesNodesDocumentsList: async (indexInstanceId: string, indexInstanceNodeId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexInstanceId' is not null or undefined
            assertParamExists('indexInstancesNodesDocumentsList', 'indexInstanceId', indexInstanceId)
            // verify required parameter 'indexInstanceNodeId' is not null or undefined
            assertParamExists('indexInstancesNodesDocumentsList', 'indexInstanceNodeId', indexInstanceNodeId)
            const localVarPath = `/index_instances/{index_instance_id}/nodes/{index_instance_node_id}/documents/`
                .replace(`{${"index_instance_id"}}`, encodeURIComponent(String(indexInstanceId)))
                .replace(`{${"index_instance_node_id"}}`, encodeURIComponent(String(indexInstanceNodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the nodes for the selected index instance.
         * @param {string} indexInstanceId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexInstancesNodesList: async (indexInstanceId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexInstanceId' is not null or undefined
            assertParamExists('indexInstancesNodesList', 'indexInstanceId', indexInstanceId)
            const localVarPath = `/index_instances/{index_instance_id}/nodes/`
                .replace(`{${"index_instance_id"}}`, encodeURIComponent(String(indexInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns list of all the children nodes for the selected index instance node.
         * @param {string} indexInstanceId 
         * @param {string} indexInstanceNodeId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexInstancesNodesNodesList: async (indexInstanceId: string, indexInstanceNodeId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexInstanceId' is not null or undefined
            assertParamExists('indexInstancesNodesNodesList', 'indexInstanceId', indexInstanceId)
            // verify required parameter 'indexInstanceNodeId' is not null or undefined
            assertParamExists('indexInstancesNodesNodesList', 'indexInstanceNodeId', indexInstanceNodeId)
            const localVarPath = `/index_instances/{index_instance_id}/nodes/{index_instance_node_id}/nodes/`
                .replace(`{${"index_instance_id"}}`, encodeURIComponent(String(indexInstanceId)))
                .replace(`{${"index_instance_node_id"}}`, encodeURIComponent(String(indexInstanceNodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of the selected index instance node.
         * @param {string} indexInstanceId 
         * @param {string} indexInstanceNodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexInstancesNodesRead: async (indexInstanceId: string, indexInstanceNodeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexInstanceId' is not null or undefined
            assertParamExists('indexInstancesNodesRead', 'indexInstanceId', indexInstanceId)
            // verify required parameter 'indexInstanceNodeId' is not null or undefined
            assertParamExists('indexInstancesNodesRead', 'indexInstanceNodeId', indexInstanceNodeId)
            const localVarPath = `/index_instances/{index_instance_id}/nodes/{index_instance_node_id}/`
                .replace(`{${"index_instance_id"}}`, encodeURIComponent(String(indexInstanceId)))
                .replace(`{${"index_instance_node_id"}}`, encodeURIComponent(String(indexInstanceNodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of the selected index instance.
         * @param {string} indexInstanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexInstancesRead: async (indexInstanceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexInstanceId' is not null or undefined
            assertParamExists('indexInstancesRead', 'indexInstanceId', indexInstanceId)
            const localVarPath = `/index_instances/{index_instance_id}/`
                .replace(`{${"index_instance_id"}}`, encodeURIComponent(String(indexInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IndexInstancesApi - functional programming interface
 * @export
 */
export const IndexInstancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IndexInstancesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a list of all the indexes instances.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexInstancesList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexInstancesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexInstancesList(ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexInstancesApi.indexInstancesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the documents contained by a particular index instance node.
         * @param {string} indexInstanceId 
         * @param {string} indexInstanceNodeId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexInstancesNodesDocumentsList(indexInstanceId: string, indexInstanceNodeId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CabinetsDocumentsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexInstancesNodesDocumentsList(indexInstanceId, indexInstanceNodeId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexInstancesApi.indexInstancesNodesDocumentsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the nodes for the selected index instance.
         * @param {string} indexInstanceId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexInstancesNodesList(indexInstanceId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentsIndexesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexInstancesNodesList(indexInstanceId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexInstancesApi.indexInstancesNodesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns list of all the children nodes for the selected index instance node.
         * @param {string} indexInstanceId 
         * @param {string} indexInstanceNodeId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexInstancesNodesNodesList(indexInstanceId: string, indexInstanceNodeId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentsIndexesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexInstancesNodesNodesList(indexInstanceId, indexInstanceNodeId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexInstancesApi.indexInstancesNodesNodesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the details of the selected index instance node.
         * @param {string} indexInstanceId 
         * @param {string} indexInstanceNodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexInstancesNodesRead(indexInstanceId: string, indexInstanceNodeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexInstanceNode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexInstancesNodesRead(indexInstanceId, indexInstanceNodeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexInstancesApi.indexInstancesNodesRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the details of the selected index instance.
         * @param {string} indexInstanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexInstancesRead(indexInstanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexInstance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexInstancesRead(indexInstanceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexInstancesApi.indexInstancesRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IndexInstancesApi - factory interface
 * @export
 */
export const IndexInstancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IndexInstancesApiFp(configuration)
    return {
        /**
         * Returns a list of all the indexes instances.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexInstancesList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<IndexInstancesList200Response> {
            return localVarFp.indexInstancesList(ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the documents contained by a particular index instance node.
         * @param {string} indexInstanceId 
         * @param {string} indexInstanceNodeId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexInstancesNodesDocumentsList(indexInstanceId: string, indexInstanceNodeId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<CabinetsDocumentsList200Response> {
            return localVarFp.indexInstancesNodesDocumentsList(indexInstanceId, indexInstanceNodeId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the nodes for the selected index instance.
         * @param {string} indexInstanceId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexInstancesNodesList(indexInstanceId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<DocumentsIndexesList200Response> {
            return localVarFp.indexInstancesNodesList(indexInstanceId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns list of all the children nodes for the selected index instance node.
         * @param {string} indexInstanceId 
         * @param {string} indexInstanceNodeId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexInstancesNodesNodesList(indexInstanceId: string, indexInstanceNodeId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<DocumentsIndexesList200Response> {
            return localVarFp.indexInstancesNodesNodesList(indexInstanceId, indexInstanceNodeId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of the selected index instance node.
         * @param {string} indexInstanceId 
         * @param {string} indexInstanceNodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexInstancesNodesRead(indexInstanceId: string, indexInstanceNodeId: string, options?: RawAxiosRequestConfig): AxiosPromise<IndexInstanceNode> {
            return localVarFp.indexInstancesNodesRead(indexInstanceId, indexInstanceNodeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of the selected index instance.
         * @param {string} indexInstanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexInstancesRead(indexInstanceId: string, options?: RawAxiosRequestConfig): AxiosPromise<IndexInstance> {
            return localVarFp.indexInstancesRead(indexInstanceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IndexInstancesApi - object-oriented interface
 * @export
 * @class IndexInstancesApi
 * @extends {BaseAPI}
 */
export class IndexInstancesApi extends BaseAPI {
    /**
     * Returns a list of all the indexes instances.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexInstancesApi
     */
    public indexInstancesList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return IndexInstancesApiFp(this.configuration).indexInstancesList(ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the documents contained by a particular index instance node.
     * @param {string} indexInstanceId 
     * @param {string} indexInstanceNodeId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexInstancesApi
     */
    public indexInstancesNodesDocumentsList(indexInstanceId: string, indexInstanceNodeId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return IndexInstancesApiFp(this.configuration).indexInstancesNodesDocumentsList(indexInstanceId, indexInstanceNodeId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the nodes for the selected index instance.
     * @param {string} indexInstanceId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexInstancesApi
     */
    public indexInstancesNodesList(indexInstanceId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return IndexInstancesApiFp(this.configuration).indexInstancesNodesList(indexInstanceId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns list of all the children nodes for the selected index instance node.
     * @param {string} indexInstanceId 
     * @param {string} indexInstanceNodeId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexInstancesApi
     */
    public indexInstancesNodesNodesList(indexInstanceId: string, indexInstanceNodeId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return IndexInstancesApiFp(this.configuration).indexInstancesNodesNodesList(indexInstanceId, indexInstanceNodeId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of the selected index instance node.
     * @param {string} indexInstanceId 
     * @param {string} indexInstanceNodeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexInstancesApi
     */
    public indexInstancesNodesRead(indexInstanceId: string, indexInstanceNodeId: string, options?: RawAxiosRequestConfig) {
        return IndexInstancesApiFp(this.configuration).indexInstancesNodesRead(indexInstanceId, indexInstanceNodeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of the selected index instance.
     * @param {string} indexInstanceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexInstancesApi
     */
    public indexInstancesRead(indexInstanceId: string, options?: RawAxiosRequestConfig) {
        return IndexInstancesApiFp(this.configuration).indexInstancesRead(indexInstanceId, options).then((request) => request(this.axios, this.basePath));
    }
}

