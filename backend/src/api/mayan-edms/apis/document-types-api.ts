/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CabinetsDocumentsList200Response } from '../models';
// @ts-ignore
import type { DocumentType } from '../models';
// @ts-ignore
import type { DocumentTypeDriverConfiguration } from '../models';
// @ts-ignore
import type { DocumentTypeMetadataType } from '../models';
// @ts-ignore
import type { DocumentTypeOCRSettings } from '../models';
// @ts-ignore
import type { DocumentTypeParsingSettings } from '../models';
// @ts-ignore
import type { DocumentTypeQuickLabel } from '../models';
// @ts-ignore
import type { DocumentTypesFileMetadataDriversList200Response } from '../models';
// @ts-ignore
import type { DocumentTypesList200Response } from '../models';
// @ts-ignore
import type { DocumentTypesMetadataTypesList200Response } from '../models';
// @ts-ignore
import type { DocumentTypesQuickLabelsList200Response } from '../models';
/**
 * DocumentTypesApi - axios parameter creator
 * @export
 */
export const DocumentTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new document type.
         * @param {DocumentType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesCreate: async (data: DocumentType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('documentTypesCreate', 'data', data)
            const localVarPath = `/document_types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the selected document type.
         * @param {string} documentTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesDelete: async (documentTypeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesDelete', 'documentTypeId', documentTypeId)
            const localVarPath = `/document_types/{document_type_id}/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the documents of the selected document types.
         * @param {string} documentTypeId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesDocumentsList: async (documentTypeId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesDocumentsList', 'documentTypeId', documentTypeId)
            const localVarPath = `/document_types/{document_type_id}/documents/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the list of document type file metadata settings.
         * @param {string} documentTypeId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesFileMetadataDriversList: async (documentTypeId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesFileMetadataDriversList', 'documentTypeId', documentTypeId)
            const localVarPath = `/document_types/{document_type_id}/file_metadata/drivers/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the selected document type file metadata settings.
         * @param {string} documentTypeId 
         * @param {string} driverId 
         * @param {DocumentTypeDriverConfiguration} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesFileMetadataDriversPartialUpdate: async (documentTypeId: string, driverId: string, data: DocumentTypeDriverConfiguration, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesFileMetadataDriversPartialUpdate', 'documentTypeId', documentTypeId)
            // verify required parameter 'driverId' is not null or undefined
            assertParamExists('documentTypesFileMetadataDriversPartialUpdate', 'driverId', driverId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('documentTypesFileMetadataDriversPartialUpdate', 'data', data)
            const localVarPath = `/document_types/{document_type_id}/file_metadata/drivers/{driver_id}/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)))
                .replace(`{${"driver_id"}}`, encodeURIComponent(String(driverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the selected document type file metadata settings.
         * @param {string} documentTypeId 
         * @param {string} driverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesFileMetadataDriversRead: async (documentTypeId: string, driverId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesFileMetadataDriversRead', 'documentTypeId', documentTypeId)
            // verify required parameter 'driverId' is not null or undefined
            assertParamExists('documentTypesFileMetadataDriversRead', 'driverId', driverId)
            const localVarPath = `/document_types/{document_type_id}/file_metadata/drivers/{driver_id}/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)))
                .replace(`{${"driver_id"}}`, encodeURIComponent(String(driverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the selected document type file metadata settings.
         * @param {string} documentTypeId 
         * @param {string} driverId 
         * @param {DocumentTypeDriverConfiguration} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesFileMetadataDriversUpdate: async (documentTypeId: string, driverId: string, data: DocumentTypeDriverConfiguration, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesFileMetadataDriversUpdate', 'documentTypeId', documentTypeId)
            // verify required parameter 'driverId' is not null or undefined
            assertParamExists('documentTypesFileMetadataDriversUpdate', 'driverId', driverId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('documentTypesFileMetadataDriversUpdate', 'data', data)
            const localVarPath = `/document_types/{document_type_id}/file_metadata/drivers/{driver_id}/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)))
                .replace(`{${"driver_id"}}`, encodeURIComponent(String(driverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the document types.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesList: async (ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/document_types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a metadata type to the selected document type.
         * @param {string} documentTypeId 
         * @param {DocumentTypeMetadataType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesMetadataTypesCreate: async (documentTypeId: string, data: DocumentTypeMetadataType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesMetadataTypesCreate', 'documentTypeId', documentTypeId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('documentTypesMetadataTypesCreate', 'data', data)
            const localVarPath = `/document_types/{document_type_id}/metadata_types/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a metadata type from a document type.
         * @param {string} documentTypeId 
         * @param {string} metadataTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesMetadataTypesDelete: async (documentTypeId: string, metadataTypeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesMetadataTypesDelete', 'documentTypeId', documentTypeId)
            // verify required parameter 'metadataTypeId' is not null or undefined
            assertParamExists('documentTypesMetadataTypesDelete', 'metadataTypeId', metadataTypeId)
            const localVarPath = `/document_types/{document_type_id}/metadata_types/{metadata_type_id}/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)))
                .replace(`{${"metadata_type_id"}}`, encodeURIComponent(String(metadataTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of selected document type\'s metadata types.
         * @param {string} documentTypeId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesMetadataTypesList: async (documentTypeId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesMetadataTypesList', 'documentTypeId', documentTypeId)
            const localVarPath = `/document_types/{document_type_id}/metadata_types/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected document type metadata type.
         * @param {string} documentTypeId 
         * @param {string} metadataTypeId 
         * @param {DocumentTypeMetadataType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesMetadataTypesPartialUpdate: async (documentTypeId: string, metadataTypeId: string, data: DocumentTypeMetadataType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesMetadataTypesPartialUpdate', 'documentTypeId', documentTypeId)
            // verify required parameter 'metadataTypeId' is not null or undefined
            assertParamExists('documentTypesMetadataTypesPartialUpdate', 'metadataTypeId', metadataTypeId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('documentTypesMetadataTypesPartialUpdate', 'data', data)
            const localVarPath = `/document_types/{document_type_id}/metadata_types/{metadata_type_id}/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)))
                .replace(`{${"metadata_type_id"}}`, encodeURIComponent(String(metadataTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the details of a document type metadata type.
         * @param {string} documentTypeId 
         * @param {string} metadataTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesMetadataTypesRead: async (documentTypeId: string, metadataTypeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesMetadataTypesRead', 'documentTypeId', documentTypeId)
            // verify required parameter 'metadataTypeId' is not null or undefined
            assertParamExists('documentTypesMetadataTypesRead', 'metadataTypeId', metadataTypeId)
            const localVarPath = `/document_types/{document_type_id}/metadata_types/{metadata_type_id}/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)))
                .replace(`{${"metadata_type_id"}}`, encodeURIComponent(String(metadataTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected document type metadata type.
         * @param {string} documentTypeId 
         * @param {string} metadataTypeId 
         * @param {DocumentTypeMetadataType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesMetadataTypesUpdate: async (documentTypeId: string, metadataTypeId: string, data: DocumentTypeMetadataType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesMetadataTypesUpdate', 'documentTypeId', documentTypeId)
            // verify required parameter 'metadataTypeId' is not null or undefined
            assertParamExists('documentTypesMetadataTypesUpdate', 'metadataTypeId', metadataTypeId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('documentTypesMetadataTypesUpdate', 'data', data)
            const localVarPath = `/document_types/{document_type_id}/metadata_types/{metadata_type_id}/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)))
                .replace(`{${"metadata_type_id"}}`, encodeURIComponent(String(metadataTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the document type OCR settings.
         * @param {string} documentTypeId 
         * @param {DocumentTypeOCRSettings} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesOcrSettingsPartialUpdate: async (documentTypeId: string, data: DocumentTypeOCRSettings, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesOcrSettingsPartialUpdate', 'documentTypeId', documentTypeId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('documentTypesOcrSettingsPartialUpdate', 'data', data)
            const localVarPath = `/document_types/{document_type_id}/ocr/settings/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the document type OCR settings.
         * @param {string} documentTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesOcrSettingsRead: async (documentTypeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesOcrSettingsRead', 'documentTypeId', documentTypeId)
            const localVarPath = `/document_types/{document_type_id}/ocr/settings/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the document type OCR settings.
         * @param {string} documentTypeId 
         * @param {DocumentTypeOCRSettings} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesOcrSettingsUpdate: async (documentTypeId: string, data: DocumentTypeOCRSettings, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesOcrSettingsUpdate', 'documentTypeId', documentTypeId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('documentTypesOcrSettingsUpdate', 'data', data)
            const localVarPath = `/document_types/{document_type_id}/ocr/settings/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the document type parsing settings.
         * @param {string} documentTypeId 
         * @param {DocumentTypeParsingSettings} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesParsingSettingsPartialUpdate: async (documentTypeId: string, data: DocumentTypeParsingSettings, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesParsingSettingsPartialUpdate', 'documentTypeId', documentTypeId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('documentTypesParsingSettingsPartialUpdate', 'data', data)
            const localVarPath = `/document_types/{document_type_id}/parsing/settings/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the document type parsing settings.
         * @param {string} documentTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesParsingSettingsRead: async (documentTypeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesParsingSettingsRead', 'documentTypeId', documentTypeId)
            const localVarPath = `/document_types/{document_type_id}/parsing/settings/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the document type parsing settings.
         * @param {string} documentTypeId 
         * @param {DocumentTypeParsingSettings} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesParsingSettingsUpdate: async (documentTypeId: string, data: DocumentTypeParsingSettings, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesParsingSettingsUpdate', 'documentTypeId', documentTypeId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('documentTypesParsingSettingsUpdate', 'data', data)
            const localVarPath = `/document_types/{document_type_id}/parsing/settings/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the properties of the selected document type.
         * @param {string} documentTypeId 
         * @param {DocumentType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesPartialUpdate: async (documentTypeId: string, data: DocumentType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesPartialUpdate', 'documentTypeId', documentTypeId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('documentTypesPartialUpdate', 'data', data)
            const localVarPath = `/document_types/{document_type_id}/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new document type quick label.
         * @param {string} documentTypeId 
         * @param {DocumentTypeQuickLabel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesQuickLabelsCreate: async (documentTypeId: string, data: DocumentTypeQuickLabel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesQuickLabelsCreate', 'documentTypeId', documentTypeId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('documentTypesQuickLabelsCreate', 'data', data)
            const localVarPath = `/document_types/{document_type_id}/quick_labels/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the selected quick label.
         * @param {string} documentTypeId 
         * @param {string} documentTypeQuickLabelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesQuickLabelsDelete: async (documentTypeId: string, documentTypeQuickLabelId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesQuickLabelsDelete', 'documentTypeId', documentTypeId)
            // verify required parameter 'documentTypeQuickLabelId' is not null or undefined
            assertParamExists('documentTypesQuickLabelsDelete', 'documentTypeQuickLabelId', documentTypeQuickLabelId)
            const localVarPath = `/document_types/{document_type_id}/quick_labels/{document_type_quick_label_id}/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)))
                .replace(`{${"document_type_quick_label_id"}}`, encodeURIComponent(String(documentTypeQuickLabelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the document type quick labels.
         * @param {string} documentTypeId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesQuickLabelsList: async (documentTypeId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesQuickLabelsList', 'documentTypeId', documentTypeId)
            const localVarPath = `/document_types/{document_type_id}/quick_labels/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the properties of the selected quick label.
         * @param {string} documentTypeId 
         * @param {string} documentTypeQuickLabelId 
         * @param {DocumentTypeQuickLabel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesQuickLabelsPartialUpdate: async (documentTypeId: string, documentTypeQuickLabelId: string, data: DocumentTypeQuickLabel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesQuickLabelsPartialUpdate', 'documentTypeId', documentTypeId)
            // verify required parameter 'documentTypeQuickLabelId' is not null or undefined
            assertParamExists('documentTypesQuickLabelsPartialUpdate', 'documentTypeQuickLabelId', documentTypeQuickLabelId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('documentTypesQuickLabelsPartialUpdate', 'data', data)
            const localVarPath = `/document_types/{document_type_id}/quick_labels/{document_type_quick_label_id}/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)))
                .replace(`{${"document_type_quick_label_id"}}`, encodeURIComponent(String(documentTypeQuickLabelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the details of the selected quick label.
         * @param {string} documentTypeId 
         * @param {string} documentTypeQuickLabelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesQuickLabelsRead: async (documentTypeId: string, documentTypeQuickLabelId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesQuickLabelsRead', 'documentTypeId', documentTypeId)
            // verify required parameter 'documentTypeQuickLabelId' is not null or undefined
            assertParamExists('documentTypesQuickLabelsRead', 'documentTypeQuickLabelId', documentTypeQuickLabelId)
            const localVarPath = `/document_types/{document_type_id}/quick_labels/{document_type_quick_label_id}/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)))
                .replace(`{${"document_type_quick_label_id"}}`, encodeURIComponent(String(documentTypeQuickLabelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the properties of the selected quick label.
         * @param {string} documentTypeId 
         * @param {string} documentTypeQuickLabelId 
         * @param {DocumentTypeQuickLabel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesQuickLabelsUpdate: async (documentTypeId: string, documentTypeQuickLabelId: string, data: DocumentTypeQuickLabel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesQuickLabelsUpdate', 'documentTypeId', documentTypeId)
            // verify required parameter 'documentTypeQuickLabelId' is not null or undefined
            assertParamExists('documentTypesQuickLabelsUpdate', 'documentTypeQuickLabelId', documentTypeQuickLabelId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('documentTypesQuickLabelsUpdate', 'data', data)
            const localVarPath = `/document_types/{document_type_id}/quick_labels/{document_type_quick_label_id}/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)))
                .replace(`{${"document_type_quick_label_id"}}`, encodeURIComponent(String(documentTypeQuickLabelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the details of the selected document type.
         * @param {string} documentTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesRead: async (documentTypeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesRead', 'documentTypeId', documentTypeId)
            const localVarPath = `/document_types/{document_type_id}/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the properties of the selected document type.
         * @param {string} documentTypeId 
         * @param {DocumentType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesUpdate: async (documentTypeId: string, data: DocumentType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('documentTypesUpdate', 'documentTypeId', documentTypeId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('documentTypesUpdate', 'data', data)
            const localVarPath = `/document_types/{document_type_id}/`
                .replace(`{${"document_type_id"}}`, encodeURIComponent(String(documentTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentTypesApi - functional programming interface
 * @export
 */
export const DocumentTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new document type.
         * @param {DocumentType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesCreate(data: DocumentType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesCreate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete the selected document type.
         * @param {string} documentTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesDelete(documentTypeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesDelete(documentTypeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the documents of the selected document types.
         * @param {string} documentTypeId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesDocumentsList(documentTypeId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CabinetsDocumentsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesDocumentsList(documentTypeId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesDocumentsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the list of document type file metadata settings.
         * @param {string} documentTypeId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesFileMetadataDriversList(documentTypeId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypesFileMetadataDriversList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesFileMetadataDriversList(documentTypeId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesFileMetadataDriversList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set the selected document type file metadata settings.
         * @param {string} documentTypeId 
         * @param {string} driverId 
         * @param {DocumentTypeDriverConfiguration} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesFileMetadataDriversPartialUpdate(documentTypeId: string, driverId: string, data: DocumentTypeDriverConfiguration, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypeDriverConfiguration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesFileMetadataDriversPartialUpdate(documentTypeId, driverId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesFileMetadataDriversPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the selected document type file metadata settings.
         * @param {string} documentTypeId 
         * @param {string} driverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesFileMetadataDriversRead(documentTypeId: string, driverId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypeDriverConfiguration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesFileMetadataDriversRead(documentTypeId, driverId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesFileMetadataDriversRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set the selected document type file metadata settings.
         * @param {string} documentTypeId 
         * @param {string} driverId 
         * @param {DocumentTypeDriverConfiguration} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesFileMetadataDriversUpdate(documentTypeId: string, driverId: string, data: DocumentTypeDriverConfiguration, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypeDriverConfiguration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesFileMetadataDriversUpdate(documentTypeId, driverId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesFileMetadataDriversUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the document types.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesList(ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add a metadata type to the selected document type.
         * @param {string} documentTypeId 
         * @param {DocumentTypeMetadataType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesMetadataTypesCreate(documentTypeId: string, data: DocumentTypeMetadataType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypeMetadataType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesMetadataTypesCreate(documentTypeId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesMetadataTypesCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove a metadata type from a document type.
         * @param {string} documentTypeId 
         * @param {string} metadataTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesMetadataTypesDelete(documentTypeId: string, metadataTypeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesMetadataTypesDelete(documentTypeId, metadataTypeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesMetadataTypesDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of selected document type\'s metadata types.
         * @param {string} documentTypeId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesMetadataTypesList(documentTypeId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypesMetadataTypesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesMetadataTypesList(documentTypeId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesMetadataTypesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected document type metadata type.
         * @param {string} documentTypeId 
         * @param {string} metadataTypeId 
         * @param {DocumentTypeMetadataType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesMetadataTypesPartialUpdate(documentTypeId: string, metadataTypeId: string, data: DocumentTypeMetadataType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypeMetadataType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesMetadataTypesPartialUpdate(documentTypeId, metadataTypeId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesMetadataTypesPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the details of a document type metadata type.
         * @param {string} documentTypeId 
         * @param {string} metadataTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesMetadataTypesRead(documentTypeId: string, metadataTypeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypeMetadataType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesMetadataTypesRead(documentTypeId, metadataTypeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesMetadataTypesRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected document type metadata type.
         * @param {string} documentTypeId 
         * @param {string} metadataTypeId 
         * @param {DocumentTypeMetadataType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesMetadataTypesUpdate(documentTypeId: string, metadataTypeId: string, data: DocumentTypeMetadataType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypeMetadataType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesMetadataTypesUpdate(documentTypeId, metadataTypeId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesMetadataTypesUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set the document type OCR settings.
         * @param {string} documentTypeId 
         * @param {DocumentTypeOCRSettings} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesOcrSettingsPartialUpdate(documentTypeId: string, data: DocumentTypeOCRSettings, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypeOCRSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesOcrSettingsPartialUpdate(documentTypeId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesOcrSettingsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the document type OCR settings.
         * @param {string} documentTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesOcrSettingsRead(documentTypeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypeOCRSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesOcrSettingsRead(documentTypeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesOcrSettingsRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set the document type OCR settings.
         * @param {string} documentTypeId 
         * @param {DocumentTypeOCRSettings} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesOcrSettingsUpdate(documentTypeId: string, data: DocumentTypeOCRSettings, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypeOCRSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesOcrSettingsUpdate(documentTypeId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesOcrSettingsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set the document type parsing settings.
         * @param {string} documentTypeId 
         * @param {DocumentTypeParsingSettings} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesParsingSettingsPartialUpdate(documentTypeId: string, data: DocumentTypeParsingSettings, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypeParsingSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesParsingSettingsPartialUpdate(documentTypeId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesParsingSettingsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the document type parsing settings.
         * @param {string} documentTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesParsingSettingsRead(documentTypeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypeParsingSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesParsingSettingsRead(documentTypeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesParsingSettingsRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set the document type parsing settings.
         * @param {string} documentTypeId 
         * @param {DocumentTypeParsingSettings} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesParsingSettingsUpdate(documentTypeId: string, data: DocumentTypeParsingSettings, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypeParsingSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesParsingSettingsUpdate(documentTypeId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesParsingSettingsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the properties of the selected document type.
         * @param {string} documentTypeId 
         * @param {DocumentType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesPartialUpdate(documentTypeId: string, data: DocumentType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesPartialUpdate(documentTypeId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new document type quick label.
         * @param {string} documentTypeId 
         * @param {DocumentTypeQuickLabel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesQuickLabelsCreate(documentTypeId: string, data: DocumentTypeQuickLabel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypeQuickLabel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesQuickLabelsCreate(documentTypeId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesQuickLabelsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete the selected quick label.
         * @param {string} documentTypeId 
         * @param {string} documentTypeQuickLabelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesQuickLabelsDelete(documentTypeId: string, documentTypeQuickLabelId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesQuickLabelsDelete(documentTypeId, documentTypeQuickLabelId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesQuickLabelsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the document type quick labels.
         * @param {string} documentTypeId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesQuickLabelsList(documentTypeId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypesQuickLabelsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesQuickLabelsList(documentTypeId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesQuickLabelsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the properties of the selected quick label.
         * @param {string} documentTypeId 
         * @param {string} documentTypeQuickLabelId 
         * @param {DocumentTypeQuickLabel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesQuickLabelsPartialUpdate(documentTypeId: string, documentTypeQuickLabelId: string, data: DocumentTypeQuickLabel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypeQuickLabel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesQuickLabelsPartialUpdate(documentTypeId, documentTypeQuickLabelId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesQuickLabelsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the details of the selected quick label.
         * @param {string} documentTypeId 
         * @param {string} documentTypeQuickLabelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesQuickLabelsRead(documentTypeId: string, documentTypeQuickLabelId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypeQuickLabel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesQuickLabelsRead(documentTypeId, documentTypeQuickLabelId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesQuickLabelsRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the properties of the selected quick label.
         * @param {string} documentTypeId 
         * @param {string} documentTypeQuickLabelId 
         * @param {DocumentTypeQuickLabel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesQuickLabelsUpdate(documentTypeId: string, documentTypeQuickLabelId: string, data: DocumentTypeQuickLabel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypeQuickLabel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesQuickLabelsUpdate(documentTypeId, documentTypeQuickLabelId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesQuickLabelsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the details of the selected document type.
         * @param {string} documentTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesRead(documentTypeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesRead(documentTypeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the properties of the selected document type.
         * @param {string} documentTypeId 
         * @param {DocumentType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentTypesUpdate(documentTypeId: string, data: DocumentType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentTypesUpdate(documentTypeId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentTypesApi.documentTypesUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DocumentTypesApi - factory interface
 * @export
 */
export const DocumentTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentTypesApiFp(configuration)
    return {
        /**
         * Create a new document type.
         * @param {DocumentType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesCreate(data: DocumentType, options?: RawAxiosRequestConfig): AxiosPromise<DocumentType> {
            return localVarFp.documentTypesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the selected document type.
         * @param {string} documentTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesDelete(documentTypeId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.documentTypesDelete(documentTypeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the documents of the selected document types.
         * @param {string} documentTypeId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesDocumentsList(documentTypeId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<CabinetsDocumentsList200Response> {
            return localVarFp.documentTypesDocumentsList(documentTypeId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the list of document type file metadata settings.
         * @param {string} documentTypeId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesFileMetadataDriversList(documentTypeId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypesFileMetadataDriversList200Response> {
            return localVarFp.documentTypesFileMetadataDriversList(documentTypeId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the selected document type file metadata settings.
         * @param {string} documentTypeId 
         * @param {string} driverId 
         * @param {DocumentTypeDriverConfiguration} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesFileMetadataDriversPartialUpdate(documentTypeId: string, driverId: string, data: DocumentTypeDriverConfiguration, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypeDriverConfiguration> {
            return localVarFp.documentTypesFileMetadataDriversPartialUpdate(documentTypeId, driverId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the selected document type file metadata settings.
         * @param {string} documentTypeId 
         * @param {string} driverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesFileMetadataDriversRead(documentTypeId: string, driverId: string, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypeDriverConfiguration> {
            return localVarFp.documentTypesFileMetadataDriversRead(documentTypeId, driverId, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the selected document type file metadata settings.
         * @param {string} documentTypeId 
         * @param {string} driverId 
         * @param {DocumentTypeDriverConfiguration} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesFileMetadataDriversUpdate(documentTypeId: string, driverId: string, data: DocumentTypeDriverConfiguration, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypeDriverConfiguration> {
            return localVarFp.documentTypesFileMetadataDriversUpdate(documentTypeId, driverId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the document types.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypesList200Response> {
            return localVarFp.documentTypesList(ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a metadata type to the selected document type.
         * @param {string} documentTypeId 
         * @param {DocumentTypeMetadataType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesMetadataTypesCreate(documentTypeId: string, data: DocumentTypeMetadataType, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypeMetadataType> {
            return localVarFp.documentTypesMetadataTypesCreate(documentTypeId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a metadata type from a document type.
         * @param {string} documentTypeId 
         * @param {string} metadataTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesMetadataTypesDelete(documentTypeId: string, metadataTypeId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.documentTypesMetadataTypesDelete(documentTypeId, metadataTypeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of selected document type\'s metadata types.
         * @param {string} documentTypeId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesMetadataTypesList(documentTypeId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypesMetadataTypesList200Response> {
            return localVarFp.documentTypesMetadataTypesList(documentTypeId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected document type metadata type.
         * @param {string} documentTypeId 
         * @param {string} metadataTypeId 
         * @param {DocumentTypeMetadataType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesMetadataTypesPartialUpdate(documentTypeId: string, metadataTypeId: string, data: DocumentTypeMetadataType, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypeMetadataType> {
            return localVarFp.documentTypesMetadataTypesPartialUpdate(documentTypeId, metadataTypeId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the details of a document type metadata type.
         * @param {string} documentTypeId 
         * @param {string} metadataTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesMetadataTypesRead(documentTypeId: string, metadataTypeId: string, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypeMetadataType> {
            return localVarFp.documentTypesMetadataTypesRead(documentTypeId, metadataTypeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected document type metadata type.
         * @param {string} documentTypeId 
         * @param {string} metadataTypeId 
         * @param {DocumentTypeMetadataType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesMetadataTypesUpdate(documentTypeId: string, metadataTypeId: string, data: DocumentTypeMetadataType, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypeMetadataType> {
            return localVarFp.documentTypesMetadataTypesUpdate(documentTypeId, metadataTypeId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the document type OCR settings.
         * @param {string} documentTypeId 
         * @param {DocumentTypeOCRSettings} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesOcrSettingsPartialUpdate(documentTypeId: string, data: DocumentTypeOCRSettings, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypeOCRSettings> {
            return localVarFp.documentTypesOcrSettingsPartialUpdate(documentTypeId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the document type OCR settings.
         * @param {string} documentTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesOcrSettingsRead(documentTypeId: string, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypeOCRSettings> {
            return localVarFp.documentTypesOcrSettingsRead(documentTypeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the document type OCR settings.
         * @param {string} documentTypeId 
         * @param {DocumentTypeOCRSettings} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesOcrSettingsUpdate(documentTypeId: string, data: DocumentTypeOCRSettings, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypeOCRSettings> {
            return localVarFp.documentTypesOcrSettingsUpdate(documentTypeId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the document type parsing settings.
         * @param {string} documentTypeId 
         * @param {DocumentTypeParsingSettings} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesParsingSettingsPartialUpdate(documentTypeId: string, data: DocumentTypeParsingSettings, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypeParsingSettings> {
            return localVarFp.documentTypesParsingSettingsPartialUpdate(documentTypeId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the document type parsing settings.
         * @param {string} documentTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesParsingSettingsRead(documentTypeId: string, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypeParsingSettings> {
            return localVarFp.documentTypesParsingSettingsRead(documentTypeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the document type parsing settings.
         * @param {string} documentTypeId 
         * @param {DocumentTypeParsingSettings} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesParsingSettingsUpdate(documentTypeId: string, data: DocumentTypeParsingSettings, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypeParsingSettings> {
            return localVarFp.documentTypesParsingSettingsUpdate(documentTypeId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the properties of the selected document type.
         * @param {string} documentTypeId 
         * @param {DocumentType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesPartialUpdate(documentTypeId: string, data: DocumentType, options?: RawAxiosRequestConfig): AxiosPromise<DocumentType> {
            return localVarFp.documentTypesPartialUpdate(documentTypeId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new document type quick label.
         * @param {string} documentTypeId 
         * @param {DocumentTypeQuickLabel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesQuickLabelsCreate(documentTypeId: string, data: DocumentTypeQuickLabel, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypeQuickLabel> {
            return localVarFp.documentTypesQuickLabelsCreate(documentTypeId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the selected quick label.
         * @param {string} documentTypeId 
         * @param {string} documentTypeQuickLabelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesQuickLabelsDelete(documentTypeId: string, documentTypeQuickLabelId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.documentTypesQuickLabelsDelete(documentTypeId, documentTypeQuickLabelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the document type quick labels.
         * @param {string} documentTypeId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesQuickLabelsList(documentTypeId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypesQuickLabelsList200Response> {
            return localVarFp.documentTypesQuickLabelsList(documentTypeId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the properties of the selected quick label.
         * @param {string} documentTypeId 
         * @param {string} documentTypeQuickLabelId 
         * @param {DocumentTypeQuickLabel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesQuickLabelsPartialUpdate(documentTypeId: string, documentTypeQuickLabelId: string, data: DocumentTypeQuickLabel, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypeQuickLabel> {
            return localVarFp.documentTypesQuickLabelsPartialUpdate(documentTypeId, documentTypeQuickLabelId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the details of the selected quick label.
         * @param {string} documentTypeId 
         * @param {string} documentTypeQuickLabelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesQuickLabelsRead(documentTypeId: string, documentTypeQuickLabelId: string, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypeQuickLabel> {
            return localVarFp.documentTypesQuickLabelsRead(documentTypeId, documentTypeQuickLabelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the properties of the selected quick label.
         * @param {string} documentTypeId 
         * @param {string} documentTypeQuickLabelId 
         * @param {DocumentTypeQuickLabel} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesQuickLabelsUpdate(documentTypeId: string, documentTypeQuickLabelId: string, data: DocumentTypeQuickLabel, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypeQuickLabel> {
            return localVarFp.documentTypesQuickLabelsUpdate(documentTypeId, documentTypeQuickLabelId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the details of the selected document type.
         * @param {string} documentTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesRead(documentTypeId: string, options?: RawAxiosRequestConfig): AxiosPromise<DocumentType> {
            return localVarFp.documentTypesRead(documentTypeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the properties of the selected document type.
         * @param {string} documentTypeId 
         * @param {DocumentType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentTypesUpdate(documentTypeId: string, data: DocumentType, options?: RawAxiosRequestConfig): AxiosPromise<DocumentType> {
            return localVarFp.documentTypesUpdate(documentTypeId, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentTypesApi - object-oriented interface
 * @export
 * @class DocumentTypesApi
 * @extends {BaseAPI}
 */
export class DocumentTypesApi extends BaseAPI {
    /**
     * Create a new document type.
     * @param {DocumentType} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesCreate(data: DocumentType, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the selected document type.
     * @param {string} documentTypeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesDelete(documentTypeId: string, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesDelete(documentTypeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the documents of the selected document types.
     * @param {string} documentTypeId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesDocumentsList(documentTypeId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesDocumentsList(documentTypeId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the list of document type file metadata settings.
     * @param {string} documentTypeId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesFileMetadataDriversList(documentTypeId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesFileMetadataDriversList(documentTypeId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the selected document type file metadata settings.
     * @param {string} documentTypeId 
     * @param {string} driverId 
     * @param {DocumentTypeDriverConfiguration} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesFileMetadataDriversPartialUpdate(documentTypeId: string, driverId: string, data: DocumentTypeDriverConfiguration, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesFileMetadataDriversPartialUpdate(documentTypeId, driverId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the selected document type file metadata settings.
     * @param {string} documentTypeId 
     * @param {string} driverId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesFileMetadataDriversRead(documentTypeId: string, driverId: string, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesFileMetadataDriversRead(documentTypeId, driverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the selected document type file metadata settings.
     * @param {string} documentTypeId 
     * @param {string} driverId 
     * @param {DocumentTypeDriverConfiguration} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesFileMetadataDriversUpdate(documentTypeId: string, driverId: string, data: DocumentTypeDriverConfiguration, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesFileMetadataDriversUpdate(documentTypeId, driverId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the document types.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesList(ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a metadata type to the selected document type.
     * @param {string} documentTypeId 
     * @param {DocumentTypeMetadataType} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesMetadataTypesCreate(documentTypeId: string, data: DocumentTypeMetadataType, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesMetadataTypesCreate(documentTypeId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a metadata type from a document type.
     * @param {string} documentTypeId 
     * @param {string} metadataTypeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesMetadataTypesDelete(documentTypeId: string, metadataTypeId: string, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesMetadataTypesDelete(documentTypeId, metadataTypeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of selected document type\'s metadata types.
     * @param {string} documentTypeId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesMetadataTypesList(documentTypeId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesMetadataTypesList(documentTypeId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected document type metadata type.
     * @param {string} documentTypeId 
     * @param {string} metadataTypeId 
     * @param {DocumentTypeMetadataType} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesMetadataTypesPartialUpdate(documentTypeId: string, metadataTypeId: string, data: DocumentTypeMetadataType, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesMetadataTypesPartialUpdate(documentTypeId, metadataTypeId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the details of a document type metadata type.
     * @param {string} documentTypeId 
     * @param {string} metadataTypeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesMetadataTypesRead(documentTypeId: string, metadataTypeId: string, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesMetadataTypesRead(documentTypeId, metadataTypeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected document type metadata type.
     * @param {string} documentTypeId 
     * @param {string} metadataTypeId 
     * @param {DocumentTypeMetadataType} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesMetadataTypesUpdate(documentTypeId: string, metadataTypeId: string, data: DocumentTypeMetadataType, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesMetadataTypesUpdate(documentTypeId, metadataTypeId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the document type OCR settings.
     * @param {string} documentTypeId 
     * @param {DocumentTypeOCRSettings} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesOcrSettingsPartialUpdate(documentTypeId: string, data: DocumentTypeOCRSettings, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesOcrSettingsPartialUpdate(documentTypeId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the document type OCR settings.
     * @param {string} documentTypeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesOcrSettingsRead(documentTypeId: string, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesOcrSettingsRead(documentTypeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the document type OCR settings.
     * @param {string} documentTypeId 
     * @param {DocumentTypeOCRSettings} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesOcrSettingsUpdate(documentTypeId: string, data: DocumentTypeOCRSettings, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesOcrSettingsUpdate(documentTypeId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the document type parsing settings.
     * @param {string} documentTypeId 
     * @param {DocumentTypeParsingSettings} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesParsingSettingsPartialUpdate(documentTypeId: string, data: DocumentTypeParsingSettings, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesParsingSettingsPartialUpdate(documentTypeId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the document type parsing settings.
     * @param {string} documentTypeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesParsingSettingsRead(documentTypeId: string, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesParsingSettingsRead(documentTypeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the document type parsing settings.
     * @param {string} documentTypeId 
     * @param {DocumentTypeParsingSettings} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesParsingSettingsUpdate(documentTypeId: string, data: DocumentTypeParsingSettings, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesParsingSettingsUpdate(documentTypeId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the properties of the selected document type.
     * @param {string} documentTypeId 
     * @param {DocumentType} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesPartialUpdate(documentTypeId: string, data: DocumentType, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesPartialUpdate(documentTypeId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new document type quick label.
     * @param {string} documentTypeId 
     * @param {DocumentTypeQuickLabel} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesQuickLabelsCreate(documentTypeId: string, data: DocumentTypeQuickLabel, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesQuickLabelsCreate(documentTypeId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the selected quick label.
     * @param {string} documentTypeId 
     * @param {string} documentTypeQuickLabelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesQuickLabelsDelete(documentTypeId: string, documentTypeQuickLabelId: string, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesQuickLabelsDelete(documentTypeId, documentTypeQuickLabelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the document type quick labels.
     * @param {string} documentTypeId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesQuickLabelsList(documentTypeId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesQuickLabelsList(documentTypeId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the properties of the selected quick label.
     * @param {string} documentTypeId 
     * @param {string} documentTypeQuickLabelId 
     * @param {DocumentTypeQuickLabel} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesQuickLabelsPartialUpdate(documentTypeId: string, documentTypeQuickLabelId: string, data: DocumentTypeQuickLabel, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesQuickLabelsPartialUpdate(documentTypeId, documentTypeQuickLabelId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the details of the selected quick label.
     * @param {string} documentTypeId 
     * @param {string} documentTypeQuickLabelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesQuickLabelsRead(documentTypeId: string, documentTypeQuickLabelId: string, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesQuickLabelsRead(documentTypeId, documentTypeQuickLabelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the properties of the selected quick label.
     * @param {string} documentTypeId 
     * @param {string} documentTypeQuickLabelId 
     * @param {DocumentTypeQuickLabel} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesQuickLabelsUpdate(documentTypeId: string, documentTypeQuickLabelId: string, data: DocumentTypeQuickLabel, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesQuickLabelsUpdate(documentTypeId, documentTypeQuickLabelId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the details of the selected document type.
     * @param {string} documentTypeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesRead(documentTypeId: string, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesRead(documentTypeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the properties of the selected document type.
     * @param {string} documentTypeId 
     * @param {DocumentType} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentTypesApi
     */
    public documentTypesUpdate(documentTypeId: string, data: DocumentType, options?: RawAxiosRequestConfig) {
        return DocumentTypesApiFp(this.configuration).documentTypesUpdate(documentTypeId, data, options).then((request) => request(this.axios, this.basePath));
    }
}

