/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MetadataType,
  MetadataTypesList200Response,
} from '../models/index';
import {
    MetadataTypeFromJSON,
    MetadataTypeToJSON,
    MetadataTypesList200ResponseFromJSON,
    MetadataTypesList200ResponseToJSON,
} from '../models/index';

export interface MetadataTypesCreateRequest {
    data: Omit<MetadataType, 'id'|'url'>;
}

export interface MetadataTypesDeleteRequest {
    metadataTypeId: string;
}

export interface MetadataTypesListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface MetadataTypesPartialUpdateRequest {
    metadataTypeId: string;
    data: Omit<MetadataType, 'id'|'url'>;
}

export interface MetadataTypesReadRequest {
    metadataTypeId: string;
}

export interface MetadataTypesUpdateRequest {
    metadataTypeId: string;
    data: Omit<MetadataType, 'id'|'url'>;
}

/**
 * 
 */
export class MetadataTypesApi extends runtime.BaseAPI {

    /**
     * Create a new metadata type.
     */
    async metadataTypesCreateRaw(requestParameters: MetadataTypesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetadataType>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling metadataTypesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/metadata_types/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetadataTypeToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetadataTypeFromJSON(jsonValue));
    }

    /**
     * Create a new metadata type.
     */
    async metadataTypesCreate(requestParameters: MetadataTypesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetadataType> {
        const response = await this.metadataTypesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected metadata type.
     */
    async metadataTypesDeleteRaw(requestParameters: MetadataTypesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['metadataTypeId'] == null) {
            throw new runtime.RequiredError(
                'metadataTypeId',
                'Required parameter "metadataTypeId" was null or undefined when calling metadataTypesDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/metadata_types/{metadata_type_id}/`;
        urlPath = urlPath.replace(`{${"metadata_type_id"}}`, encodeURIComponent(String(requestParameters['metadataTypeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected metadata type.
     */
    async metadataTypesDelete(requestParameters: MetadataTypesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataTypesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all the metadata types.
     */
    async metadataTypesListRaw(requestParameters: MetadataTypesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetadataTypesList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/metadata_types/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetadataTypesList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the metadata types.
     */
    async metadataTypesList(requestParameters: MetadataTypesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetadataTypesList200Response> {
        const response = await this.metadataTypesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected metadata type.
     */
    async metadataTypesPartialUpdateRaw(requestParameters: MetadataTypesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetadataType>> {
        if (requestParameters['metadataTypeId'] == null) {
            throw new runtime.RequiredError(
                'metadataTypeId',
                'Required parameter "metadataTypeId" was null or undefined when calling metadataTypesPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling metadataTypesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/metadata_types/{metadata_type_id}/`;
        urlPath = urlPath.replace(`{${"metadata_type_id"}}`, encodeURIComponent(String(requestParameters['metadataTypeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MetadataTypeToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetadataTypeFromJSON(jsonValue));
    }

    /**
     * Edit the selected metadata type.
     */
    async metadataTypesPartialUpdate(requestParameters: MetadataTypesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetadataType> {
        const response = await this.metadataTypesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the details of the selected metadata type.
     */
    async metadataTypesReadRaw(requestParameters: MetadataTypesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetadataType>> {
        if (requestParameters['metadataTypeId'] == null) {
            throw new runtime.RequiredError(
                'metadataTypeId',
                'Required parameter "metadataTypeId" was null or undefined when calling metadataTypesRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/metadata_types/{metadata_type_id}/`;
        urlPath = urlPath.replace(`{${"metadata_type_id"}}`, encodeURIComponent(String(requestParameters['metadataTypeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetadataTypeFromJSON(jsonValue));
    }

    /**
     * Return the details of the selected metadata type.
     */
    async metadataTypesRead(requestParameters: MetadataTypesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetadataType> {
        const response = await this.metadataTypesReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected metadata type.
     */
    async metadataTypesUpdateRaw(requestParameters: MetadataTypesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetadataType>> {
        if (requestParameters['metadataTypeId'] == null) {
            throw new runtime.RequiredError(
                'metadataTypeId',
                'Required parameter "metadataTypeId" was null or undefined when calling metadataTypesUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling metadataTypesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/metadata_types/{metadata_type_id}/`;
        urlPath = urlPath.replace(`{${"metadata_type_id"}}`, encodeURIComponent(String(requestParameters['metadataTypeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MetadataTypeToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetadataTypeFromJSON(jsonValue));
    }

    /**
     * Edit the selected metadata type.
     */
    async metadataTypesUpdate(requestParameters: MetadataTypesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetadataType> {
        const response = await this.metadataTypesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
