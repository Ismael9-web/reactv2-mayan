/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CabinetsDocumentsList200Response,
  DocumentsIndexesList200Response,
  IndexInstance,
  IndexInstanceNode,
  IndexInstancesList200Response,
} from '../models/index';
import {
    CabinetsDocumentsList200ResponseFromJSON,
    CabinetsDocumentsList200ResponseToJSON,
    DocumentsIndexesList200ResponseFromJSON,
    DocumentsIndexesList200ResponseToJSON,
    IndexInstanceFromJSON,
    IndexInstanceToJSON,
    IndexInstanceNodeFromJSON,
    IndexInstanceNodeToJSON,
    IndexInstancesList200ResponseFromJSON,
    IndexInstancesList200ResponseToJSON,
} from '../models/index';

export interface IndexInstancesListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface IndexInstancesNodesDocumentsListRequest {
    indexInstanceId: string;
    indexInstanceNodeId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface IndexInstancesNodesListRequest {
    indexInstanceId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface IndexInstancesNodesNodesListRequest {
    indexInstanceId: string;
    indexInstanceNodeId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface IndexInstancesNodesReadRequest {
    indexInstanceId: string;
    indexInstanceNodeId: string;
}

export interface IndexInstancesReadRequest {
    indexInstanceId: string;
}

/**
 * 
 */
export class IndexInstancesApi extends runtime.BaseAPI {

    /**
     * Returns a list of all the indexes instances.
     */
    async indexInstancesListRaw(requestParameters: IndexInstancesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexInstancesList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_instances/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexInstancesList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the indexes instances.
     */
    async indexInstancesList(requestParameters: IndexInstancesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexInstancesList200Response> {
        const response = await this.indexInstancesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all the documents contained by a particular index instance node.
     */
    async indexInstancesNodesDocumentsListRaw(requestParameters: IndexInstancesNodesDocumentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CabinetsDocumentsList200Response>> {
        if (requestParameters['indexInstanceId'] == null) {
            throw new runtime.RequiredError(
                'indexInstanceId',
                'Required parameter "indexInstanceId" was null or undefined when calling indexInstancesNodesDocumentsList().'
            );
        }

        if (requestParameters['indexInstanceNodeId'] == null) {
            throw new runtime.RequiredError(
                'indexInstanceNodeId',
                'Required parameter "indexInstanceNodeId" was null or undefined when calling indexInstancesNodesDocumentsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_instances/{index_instance_id}/nodes/{index_instance_node_id}/documents/`;
        urlPath = urlPath.replace(`{${"index_instance_id"}}`, encodeURIComponent(String(requestParameters['indexInstanceId'])));
        urlPath = urlPath.replace(`{${"index_instance_node_id"}}`, encodeURIComponent(String(requestParameters['indexInstanceNodeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CabinetsDocumentsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the documents contained by a particular index instance node.
     */
    async indexInstancesNodesDocumentsList(requestParameters: IndexInstancesNodesDocumentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CabinetsDocumentsList200Response> {
        const response = await this.indexInstancesNodesDocumentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all the nodes for the selected index instance.
     */
    async indexInstancesNodesListRaw(requestParameters: IndexInstancesNodesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentsIndexesList200Response>> {
        if (requestParameters['indexInstanceId'] == null) {
            throw new runtime.RequiredError(
                'indexInstanceId',
                'Required parameter "indexInstanceId" was null or undefined when calling indexInstancesNodesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_instances/{index_instance_id}/nodes/`;
        urlPath = urlPath.replace(`{${"index_instance_id"}}`, encodeURIComponent(String(requestParameters['indexInstanceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentsIndexesList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the nodes for the selected index instance.
     */
    async indexInstancesNodesList(requestParameters: IndexInstancesNodesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentsIndexesList200Response> {
        const response = await this.indexInstancesNodesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of all the children nodes for the selected index instance node.
     */
    async indexInstancesNodesNodesListRaw(requestParameters: IndexInstancesNodesNodesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentsIndexesList200Response>> {
        if (requestParameters['indexInstanceId'] == null) {
            throw new runtime.RequiredError(
                'indexInstanceId',
                'Required parameter "indexInstanceId" was null or undefined when calling indexInstancesNodesNodesList().'
            );
        }

        if (requestParameters['indexInstanceNodeId'] == null) {
            throw new runtime.RequiredError(
                'indexInstanceNodeId',
                'Required parameter "indexInstanceNodeId" was null or undefined when calling indexInstancesNodesNodesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_instances/{index_instance_id}/nodes/{index_instance_node_id}/nodes/`;
        urlPath = urlPath.replace(`{${"index_instance_id"}}`, encodeURIComponent(String(requestParameters['indexInstanceId'])));
        urlPath = urlPath.replace(`{${"index_instance_node_id"}}`, encodeURIComponent(String(requestParameters['indexInstanceNodeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentsIndexesList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns list of all the children nodes for the selected index instance node.
     */
    async indexInstancesNodesNodesList(requestParameters: IndexInstancesNodesNodesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentsIndexesList200Response> {
        const response = await this.indexInstancesNodesNodesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the details of the selected index instance node.
     */
    async indexInstancesNodesReadRaw(requestParameters: IndexInstancesNodesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexInstanceNode>> {
        if (requestParameters['indexInstanceId'] == null) {
            throw new runtime.RequiredError(
                'indexInstanceId',
                'Required parameter "indexInstanceId" was null or undefined when calling indexInstancesNodesRead().'
            );
        }

        if (requestParameters['indexInstanceNodeId'] == null) {
            throw new runtime.RequiredError(
                'indexInstanceNodeId',
                'Required parameter "indexInstanceNodeId" was null or undefined when calling indexInstancesNodesRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_instances/{index_instance_id}/nodes/{index_instance_node_id}/`;
        urlPath = urlPath.replace(`{${"index_instance_id"}}`, encodeURIComponent(String(requestParameters['indexInstanceId'])));
        urlPath = urlPath.replace(`{${"index_instance_node_id"}}`, encodeURIComponent(String(requestParameters['indexInstanceNodeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexInstanceNodeFromJSON(jsonValue));
    }

    /**
     * Returns the details of the selected index instance node.
     */
    async indexInstancesNodesRead(requestParameters: IndexInstancesNodesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexInstanceNode> {
        const response = await this.indexInstancesNodesReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the details of the selected index instance.
     */
    async indexInstancesReadRaw(requestParameters: IndexInstancesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexInstance>> {
        if (requestParameters['indexInstanceId'] == null) {
            throw new runtime.RequiredError(
                'indexInstanceId',
                'Required parameter "indexInstanceId" was null or undefined when calling indexInstancesRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_instances/{index_instance_id}/`;
        urlPath = urlPath.replace(`{${"index_instance_id"}}`, encodeURIComponent(String(requestParameters['indexInstanceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexInstanceFromJSON(jsonValue));
    }

    /**
     * Returns the details of the selected index instance.
     */
    async indexInstancesRead(requestParameters: IndexInstancesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexInstance> {
        const response = await this.indexInstancesReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
