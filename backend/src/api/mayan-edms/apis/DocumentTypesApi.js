"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentTypesApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class DocumentTypesApi extends runtime.BaseAPI {
    /**
     * Create a new document type.
     */
    documentTypesCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentTypesCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentTypeToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypeFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new document type.
     */
    documentTypesCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the selected document type.
     */
    documentTypesDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the selected document type.
     */
    documentTypesDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.documentTypesDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Returns a list of all the documents of the selected document types.
     */
    documentTypesDocumentsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesDocumentsList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/documents/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CabinetsDocumentsList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the documents of the selected document types.
     */
    documentTypesDocumentsList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesDocumentsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the list of document type file metadata settings.
     */
    documentTypesFileMetadataDriversListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesFileMetadataDriversList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/file_metadata/drivers/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypesFileMetadataDriversList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Return the list of document type file metadata settings.
     */
    documentTypesFileMetadataDriversList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesFileMetadataDriversListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Set the selected document type file metadata settings.
     */
    documentTypesFileMetadataDriversPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesFileMetadataDriversPartialUpdate().');
            }
            if (requestParameters['driverId'] == null) {
                throw new runtime.RequiredError('driverId', 'Required parameter "driverId" was null or undefined when calling documentTypesFileMetadataDriversPartialUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentTypesFileMetadataDriversPartialUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/file_metadata/drivers/{driver_id}/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            urlPath = urlPath.replace(`{${"driver_id"}}`, encodeURIComponent(String(requestParameters['driverId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentTypeDriverConfigurationToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypeDriverConfigurationFromJSON)(jsonValue));
        });
    }
    /**
     * Set the selected document type file metadata settings.
     */
    documentTypesFileMetadataDriversPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesFileMetadataDriversPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the selected document type file metadata settings.
     */
    documentTypesFileMetadataDriversReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesFileMetadataDriversRead().');
            }
            if (requestParameters['driverId'] == null) {
                throw new runtime.RequiredError('driverId', 'Required parameter "driverId" was null or undefined when calling documentTypesFileMetadataDriversRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/file_metadata/drivers/{driver_id}/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            urlPath = urlPath.replace(`{${"driver_id"}}`, encodeURIComponent(String(requestParameters['driverId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypeDriverConfigurationFromJSON)(jsonValue));
        });
    }
    /**
     * Return the selected document type file metadata settings.
     */
    documentTypesFileMetadataDriversRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesFileMetadataDriversReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Set the selected document type file metadata settings.
     */
    documentTypesFileMetadataDriversUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesFileMetadataDriversUpdate().');
            }
            if (requestParameters['driverId'] == null) {
                throw new runtime.RequiredError('driverId', 'Required parameter "driverId" was null or undefined when calling documentTypesFileMetadataDriversUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentTypesFileMetadataDriversUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/file_metadata/drivers/{driver_id}/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            urlPath = urlPath.replace(`{${"driver_id"}}`, encodeURIComponent(String(requestParameters['driverId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentTypeDriverConfigurationToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypeDriverConfigurationFromJSON)(jsonValue));
        });
    }
    /**
     * Set the selected document type file metadata settings.
     */
    documentTypesFileMetadataDriversUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesFileMetadataDriversUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a list of all the document types.
     */
    documentTypesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypesList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the document types.
     */
    documentTypesList() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.documentTypesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Add a metadata type to the selected document type.
     */
    documentTypesMetadataTypesCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesMetadataTypesCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentTypesMetadataTypesCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/metadata_types/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentTypeMetadataTypeToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypeMetadataTypeFromJSON)(jsonValue));
        });
    }
    /**
     * Add a metadata type to the selected document type.
     */
    documentTypesMetadataTypesCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesMetadataTypesCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Remove a metadata type from a document type.
     */
    documentTypesMetadataTypesDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesMetadataTypesDelete().');
            }
            if (requestParameters['metadataTypeId'] == null) {
                throw new runtime.RequiredError('metadataTypeId', 'Required parameter "metadataTypeId" was null or undefined when calling documentTypesMetadataTypesDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/metadata_types/{metadata_type_id}/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            urlPath = urlPath.replace(`{${"metadata_type_id"}}`, encodeURIComponent(String(requestParameters['metadataTypeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Remove a metadata type from a document type.
     */
    documentTypesMetadataTypesDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.documentTypesMetadataTypesDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Returns a list of selected document type\'s metadata types.
     */
    documentTypesMetadataTypesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesMetadataTypesList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/metadata_types/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypesMetadataTypesList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of selected document type\'s metadata types.
     */
    documentTypesMetadataTypesList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesMetadataTypesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the selected document type metadata type.
     */
    documentTypesMetadataTypesPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesMetadataTypesPartialUpdate().');
            }
            if (requestParameters['metadataTypeId'] == null) {
                throw new runtime.RequiredError('metadataTypeId', 'Required parameter "metadataTypeId" was null or undefined when calling documentTypesMetadataTypesPartialUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentTypesMetadataTypesPartialUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/metadata_types/{metadata_type_id}/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            urlPath = urlPath.replace(`{${"metadata_type_id"}}`, encodeURIComponent(String(requestParameters['metadataTypeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentTypeMetadataTypeToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypeMetadataTypeFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the selected document type metadata type.
     */
    documentTypesMetadataTypesPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesMetadataTypesPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve the details of a document type metadata type.
     */
    documentTypesMetadataTypesReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesMetadataTypesRead().');
            }
            if (requestParameters['metadataTypeId'] == null) {
                throw new runtime.RequiredError('metadataTypeId', 'Required parameter "metadataTypeId" was null or undefined when calling documentTypesMetadataTypesRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/metadata_types/{metadata_type_id}/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            urlPath = urlPath.replace(`{${"metadata_type_id"}}`, encodeURIComponent(String(requestParameters['metadataTypeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypeMetadataTypeFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve the details of a document type metadata type.
     */
    documentTypesMetadataTypesRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesMetadataTypesReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the selected document type metadata type.
     */
    documentTypesMetadataTypesUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesMetadataTypesUpdate().');
            }
            if (requestParameters['metadataTypeId'] == null) {
                throw new runtime.RequiredError('metadataTypeId', 'Required parameter "metadataTypeId" was null or undefined when calling documentTypesMetadataTypesUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentTypesMetadataTypesUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/metadata_types/{metadata_type_id}/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            urlPath = urlPath.replace(`{${"metadata_type_id"}}`, encodeURIComponent(String(requestParameters['metadataTypeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentTypeMetadataTypeToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypeMetadataTypeFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the selected document type metadata type.
     */
    documentTypesMetadataTypesUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesMetadataTypesUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Set the document type OCR settings.
     */
    documentTypesOcrSettingsPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesOcrSettingsPartialUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentTypesOcrSettingsPartialUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/ocr/settings/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentTypeOCRSettingsToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypeOCRSettingsFromJSON)(jsonValue));
        });
    }
    /**
     * Set the document type OCR settings.
     */
    documentTypesOcrSettingsPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesOcrSettingsPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the document type OCR settings.
     */
    documentTypesOcrSettingsReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesOcrSettingsRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/ocr/settings/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypeOCRSettingsFromJSON)(jsonValue));
        });
    }
    /**
     * Return the document type OCR settings.
     */
    documentTypesOcrSettingsRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesOcrSettingsReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Set the document type OCR settings.
     */
    documentTypesOcrSettingsUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesOcrSettingsUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentTypesOcrSettingsUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/ocr/settings/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentTypeOCRSettingsToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypeOCRSettingsFromJSON)(jsonValue));
        });
    }
    /**
     * Set the document type OCR settings.
     */
    documentTypesOcrSettingsUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesOcrSettingsUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Set the document type parsing settings.
     */
    documentTypesParsingSettingsPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesParsingSettingsPartialUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentTypesParsingSettingsPartialUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/parsing/settings/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentTypeParsingSettingsToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypeParsingSettingsFromJSON)(jsonValue));
        });
    }
    /**
     * Set the document type parsing settings.
     */
    documentTypesParsingSettingsPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesParsingSettingsPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the document type parsing settings.
     */
    documentTypesParsingSettingsReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesParsingSettingsRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/parsing/settings/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypeParsingSettingsFromJSON)(jsonValue));
        });
    }
    /**
     * Return the document type parsing settings.
     */
    documentTypesParsingSettingsRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesParsingSettingsReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Set the document type parsing settings.
     */
    documentTypesParsingSettingsUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesParsingSettingsUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentTypesParsingSettingsUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/parsing/settings/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentTypeParsingSettingsToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypeParsingSettingsFromJSON)(jsonValue));
        });
    }
    /**
     * Set the document type parsing settings.
     */
    documentTypesParsingSettingsUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesParsingSettingsUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the properties of the selected document type.
     */
    documentTypesPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesPartialUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentTypesPartialUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentTypeToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypeFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the properties of the selected document type.
     */
    documentTypesPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new document type quick label.
     */
    documentTypesQuickLabelsCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesQuickLabelsCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentTypesQuickLabelsCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/quick_labels/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentTypeQuickLabelToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypeQuickLabelFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new document type quick label.
     */
    documentTypesQuickLabelsCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesQuickLabelsCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the selected quick label.
     */
    documentTypesQuickLabelsDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesQuickLabelsDelete().');
            }
            if (requestParameters['documentTypeQuickLabelId'] == null) {
                throw new runtime.RequiredError('documentTypeQuickLabelId', 'Required parameter "documentTypeQuickLabelId" was null or undefined when calling documentTypesQuickLabelsDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/quick_labels/{document_type_quick_label_id}/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            urlPath = urlPath.replace(`{${"document_type_quick_label_id"}}`, encodeURIComponent(String(requestParameters['documentTypeQuickLabelId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the selected quick label.
     */
    documentTypesQuickLabelsDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.documentTypesQuickLabelsDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Returns a list of all the document type quick labels.
     */
    documentTypesQuickLabelsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesQuickLabelsList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/quick_labels/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypesQuickLabelsList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the document type quick labels.
     */
    documentTypesQuickLabelsList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesQuickLabelsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the properties of the selected quick label.
     */
    documentTypesQuickLabelsPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesQuickLabelsPartialUpdate().');
            }
            if (requestParameters['documentTypeQuickLabelId'] == null) {
                throw new runtime.RequiredError('documentTypeQuickLabelId', 'Required parameter "documentTypeQuickLabelId" was null or undefined when calling documentTypesQuickLabelsPartialUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentTypesQuickLabelsPartialUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/quick_labels/{document_type_quick_label_id}/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            urlPath = urlPath.replace(`{${"document_type_quick_label_id"}}`, encodeURIComponent(String(requestParameters['documentTypeQuickLabelId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentTypeQuickLabelToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypeQuickLabelFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the properties of the selected quick label.
     */
    documentTypesQuickLabelsPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesQuickLabelsPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the details of the selected quick label.
     */
    documentTypesQuickLabelsReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesQuickLabelsRead().');
            }
            if (requestParameters['documentTypeQuickLabelId'] == null) {
                throw new runtime.RequiredError('documentTypeQuickLabelId', 'Required parameter "documentTypeQuickLabelId" was null or undefined when calling documentTypesQuickLabelsRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/quick_labels/{document_type_quick_label_id}/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            urlPath = urlPath.replace(`{${"document_type_quick_label_id"}}`, encodeURIComponent(String(requestParameters['documentTypeQuickLabelId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypeQuickLabelFromJSON)(jsonValue));
        });
    }
    /**
     * Return the details of the selected quick label.
     */
    documentTypesQuickLabelsRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesQuickLabelsReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the properties of the selected quick label.
     */
    documentTypesQuickLabelsUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesQuickLabelsUpdate().');
            }
            if (requestParameters['documentTypeQuickLabelId'] == null) {
                throw new runtime.RequiredError('documentTypeQuickLabelId', 'Required parameter "documentTypeQuickLabelId" was null or undefined when calling documentTypesQuickLabelsUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentTypesQuickLabelsUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/quick_labels/{document_type_quick_label_id}/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            urlPath = urlPath.replace(`{${"document_type_quick_label_id"}}`, encodeURIComponent(String(requestParameters['documentTypeQuickLabelId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentTypeQuickLabelToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypeQuickLabelFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the properties of the selected quick label.
     */
    documentTypesQuickLabelsUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesQuickLabelsUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the details of the selected document type.
     */
    documentTypesReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypeFromJSON)(jsonValue));
        });
    }
    /**
     * Return the details of the selected document type.
     */
    documentTypesRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the properties of the selected document type.
     */
    documentTypesUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['documentTypeId'] == null) {
                throw new runtime.RequiredError('documentTypeId', 'Required parameter "documentTypeId" was null or undefined when calling documentTypesUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling documentTypesUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/document_types/{document_type_id}/`;
            urlPath = urlPath.replace(`{${"document_type_id"}}`, encodeURIComponent(String(requestParameters['documentTypeId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DocumentTypeToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypeFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the properties of the selected document type.
     */
    documentTypesUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.documentTypesUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.DocumentTypesApi = DocumentTypesApi;
