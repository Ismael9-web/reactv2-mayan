/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DocumentTypesList200Response,
  SmartLink,
  SmartLinkCondition,
  SmartLinkDocumentTypeAdd,
  SmartLinkDocumentTypeRemove,
  SmartLinksConditionsList200Response,
  SmartLinksList200Response,
} from '../models/index';
import {
    DocumentTypesList200ResponseFromJSON,
    DocumentTypesList200ResponseToJSON,
    SmartLinkFromJSON,
    SmartLinkToJSON,
    SmartLinkConditionFromJSON,
    SmartLinkConditionToJSON,
    SmartLinkDocumentTypeAddFromJSON,
    SmartLinkDocumentTypeAddToJSON,
    SmartLinkDocumentTypeRemoveFromJSON,
    SmartLinkDocumentTypeRemoveToJSON,
    SmartLinksConditionsList200ResponseFromJSON,
    SmartLinksConditionsList200ResponseToJSON,
    SmartLinksList200ResponseFromJSON,
    SmartLinksList200ResponseToJSON,
} from '../models/index';

export interface SmartLinksConditionsCreateRequest {
    smartLinkId: string;
    data: Omit<SmartLinkCondition, 'id'|'smart_link_id'|'smart_link_url'|'url'>;
}

export interface SmartLinksConditionsDeleteRequest {
    smartLinkId: string;
    smartLinkConditionId: string;
}

export interface SmartLinksConditionsListRequest {
    smartLinkId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface SmartLinksConditionsPartialUpdateRequest {
    smartLinkId: string;
    smartLinkConditionId: string;
    data: Omit<SmartLinkCondition, 'id'|'smart_link_id'|'smart_link_url'|'url'>;
}

export interface SmartLinksConditionsReadRequest {
    smartLinkId: string;
    smartLinkConditionId: string;
}

export interface SmartLinksConditionsUpdateRequest {
    smartLinkId: string;
    smartLinkConditionId: string;
    data: Omit<SmartLinkCondition, 'id'|'smart_link_id'|'smart_link_url'|'url'>;
}

export interface SmartLinksCreateRequest {
    data: Omit<SmartLink, 'conditions_url'|'document_types_url'|'document_types_add_url'|'document_types_remove_url'|'id'|'url'>;
}

export interface SmartLinksDeleteRequest {
    smartLinkId: string;
}

export interface SmartLinksDocumentTypesAddCreateRequest {
    smartLinkId: string;
    data: SmartLinkDocumentTypeAdd;
}

export interface SmartLinksDocumentTypesListRequest {
    smartLinkId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface SmartLinksDocumentTypesRemoveCreateRequest {
    smartLinkId: string;
    data: SmartLinkDocumentTypeRemove;
}

export interface SmartLinksListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface SmartLinksPartialUpdateRequest {
    smartLinkId: string;
    data: Omit<SmartLink, 'conditions_url'|'document_types_url'|'document_types_add_url'|'document_types_remove_url'|'id'|'url'>;
}

export interface SmartLinksReadRequest {
    smartLinkId: string;
}

export interface SmartLinksUpdateRequest {
    smartLinkId: string;
    data: Omit<SmartLink, 'conditions_url'|'document_types_url'|'document_types_add_url'|'document_types_remove_url'|'id'|'url'>;
}

/**
 * 
 */
export class SmartLinksApi extends runtime.BaseAPI {

    /**
     * Create a new smart link condition.
     */
    async smartLinksConditionsCreateRaw(requestParameters: SmartLinksConditionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SmartLinkCondition>> {
        if (requestParameters['smartLinkId'] == null) {
            throw new runtime.RequiredError(
                'smartLinkId',
                'Required parameter "smartLinkId" was null or undefined when calling smartLinksConditionsCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling smartLinksConditionsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/smart_links/{smart_link_id}/conditions/`;
        urlPath = urlPath.replace(`{${"smart_link_id"}}`, encodeURIComponent(String(requestParameters['smartLinkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SmartLinkConditionToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SmartLinkConditionFromJSON(jsonValue));
    }

    /**
     * Create a new smart link condition.
     */
    async smartLinksConditionsCreate(requestParameters: SmartLinksConditionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SmartLinkCondition> {
        const response = await this.smartLinksConditionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected smart link condition.
     */
    async smartLinksConditionsDeleteRaw(requestParameters: SmartLinksConditionsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['smartLinkId'] == null) {
            throw new runtime.RequiredError(
                'smartLinkId',
                'Required parameter "smartLinkId" was null or undefined when calling smartLinksConditionsDelete().'
            );
        }

        if (requestParameters['smartLinkConditionId'] == null) {
            throw new runtime.RequiredError(
                'smartLinkConditionId',
                'Required parameter "smartLinkConditionId" was null or undefined when calling smartLinksConditionsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/smart_links/{smart_link_id}/conditions/{smart_link_condition_id}/`;
        urlPath = urlPath.replace(`{${"smart_link_id"}}`, encodeURIComponent(String(requestParameters['smartLinkId'])));
        urlPath = urlPath.replace(`{${"smart_link_condition_id"}}`, encodeURIComponent(String(requestParameters['smartLinkConditionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected smart link condition.
     */
    async smartLinksConditionsDelete(requestParameters: SmartLinksConditionsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.smartLinksConditionsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all the smart link conditions.
     */
    async smartLinksConditionsListRaw(requestParameters: SmartLinksConditionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SmartLinksConditionsList200Response>> {
        if (requestParameters['smartLinkId'] == null) {
            throw new runtime.RequiredError(
                'smartLinkId',
                'Required parameter "smartLinkId" was null or undefined when calling smartLinksConditionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/smart_links/{smart_link_id}/conditions/`;
        urlPath = urlPath.replace(`{${"smart_link_id"}}`, encodeURIComponent(String(requestParameters['smartLinkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SmartLinksConditionsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the smart link conditions.
     */
    async smartLinksConditionsList(requestParameters: SmartLinksConditionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SmartLinksConditionsList200Response> {
        const response = await this.smartLinksConditionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected smart link condition.
     */
    async smartLinksConditionsPartialUpdateRaw(requestParameters: SmartLinksConditionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SmartLinkCondition>> {
        if (requestParameters['smartLinkId'] == null) {
            throw new runtime.RequiredError(
                'smartLinkId',
                'Required parameter "smartLinkId" was null or undefined when calling smartLinksConditionsPartialUpdate().'
            );
        }

        if (requestParameters['smartLinkConditionId'] == null) {
            throw new runtime.RequiredError(
                'smartLinkConditionId',
                'Required parameter "smartLinkConditionId" was null or undefined when calling smartLinksConditionsPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling smartLinksConditionsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/smart_links/{smart_link_id}/conditions/{smart_link_condition_id}/`;
        urlPath = urlPath.replace(`{${"smart_link_id"}}`, encodeURIComponent(String(requestParameters['smartLinkId'])));
        urlPath = urlPath.replace(`{${"smart_link_condition_id"}}`, encodeURIComponent(String(requestParameters['smartLinkConditionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SmartLinkConditionToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SmartLinkConditionFromJSON(jsonValue));
    }

    /**
     * Edit the selected smart link condition.
     */
    async smartLinksConditionsPartialUpdate(requestParameters: SmartLinksConditionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SmartLinkCondition> {
        const response = await this.smartLinksConditionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the details of the selected smart link condition.
     */
    async smartLinksConditionsReadRaw(requestParameters: SmartLinksConditionsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SmartLinkCondition>> {
        if (requestParameters['smartLinkId'] == null) {
            throw new runtime.RequiredError(
                'smartLinkId',
                'Required parameter "smartLinkId" was null or undefined when calling smartLinksConditionsRead().'
            );
        }

        if (requestParameters['smartLinkConditionId'] == null) {
            throw new runtime.RequiredError(
                'smartLinkConditionId',
                'Required parameter "smartLinkConditionId" was null or undefined when calling smartLinksConditionsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/smart_links/{smart_link_id}/conditions/{smart_link_condition_id}/`;
        urlPath = urlPath.replace(`{${"smart_link_id"}}`, encodeURIComponent(String(requestParameters['smartLinkId'])));
        urlPath = urlPath.replace(`{${"smart_link_condition_id"}}`, encodeURIComponent(String(requestParameters['smartLinkConditionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SmartLinkConditionFromJSON(jsonValue));
    }

    /**
     * Return the details of the selected smart link condition.
     */
    async smartLinksConditionsRead(requestParameters: SmartLinksConditionsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SmartLinkCondition> {
        const response = await this.smartLinksConditionsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected smart link condition.
     */
    async smartLinksConditionsUpdateRaw(requestParameters: SmartLinksConditionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SmartLinkCondition>> {
        if (requestParameters['smartLinkId'] == null) {
            throw new runtime.RequiredError(
                'smartLinkId',
                'Required parameter "smartLinkId" was null or undefined when calling smartLinksConditionsUpdate().'
            );
        }

        if (requestParameters['smartLinkConditionId'] == null) {
            throw new runtime.RequiredError(
                'smartLinkConditionId',
                'Required parameter "smartLinkConditionId" was null or undefined when calling smartLinksConditionsUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling smartLinksConditionsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/smart_links/{smart_link_id}/conditions/{smart_link_condition_id}/`;
        urlPath = urlPath.replace(`{${"smart_link_id"}}`, encodeURIComponent(String(requestParameters['smartLinkId'])));
        urlPath = urlPath.replace(`{${"smart_link_condition_id"}}`, encodeURIComponent(String(requestParameters['smartLinkConditionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SmartLinkConditionToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SmartLinkConditionFromJSON(jsonValue));
    }

    /**
     * Edit the selected smart link condition.
     */
    async smartLinksConditionsUpdate(requestParameters: SmartLinksConditionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SmartLinkCondition> {
        const response = await this.smartLinksConditionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new smart link.
     */
    async smartLinksCreateRaw(requestParameters: SmartLinksCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SmartLink>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling smartLinksCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/smart_links/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SmartLinkToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SmartLinkFromJSON(jsonValue));
    }

    /**
     * Create a new smart link.
     */
    async smartLinksCreate(requestParameters: SmartLinksCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SmartLink> {
        const response = await this.smartLinksCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected smart link.
     */
    async smartLinksDeleteRaw(requestParameters: SmartLinksDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['smartLinkId'] == null) {
            throw new runtime.RequiredError(
                'smartLinkId',
                'Required parameter "smartLinkId" was null or undefined when calling smartLinksDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/smart_links/{smart_link_id}/`;
        urlPath = urlPath.replace(`{${"smart_link_id"}}`, encodeURIComponent(String(requestParameters['smartLinkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected smart link.
     */
    async smartLinksDelete(requestParameters: SmartLinksDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.smartLinksDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Add a document type to a smart link.
     */
    async smartLinksDocumentTypesAddCreateRaw(requestParameters: SmartLinksDocumentTypesAddCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SmartLinkDocumentTypeAdd>> {
        if (requestParameters['smartLinkId'] == null) {
            throw new runtime.RequiredError(
                'smartLinkId',
                'Required parameter "smartLinkId" was null or undefined when calling smartLinksDocumentTypesAddCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling smartLinksDocumentTypesAddCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/smart_links/{smart_link_id}/document_types/add/`;
        urlPath = urlPath.replace(`{${"smart_link_id"}}`, encodeURIComponent(String(requestParameters['smartLinkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SmartLinkDocumentTypeAddToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SmartLinkDocumentTypeAddFromJSON(jsonValue));
    }

    /**
     * Add a document type to a smart link.
     */
    async smartLinksDocumentTypesAddCreate(requestParameters: SmartLinksDocumentTypesAddCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SmartLinkDocumentTypeAdd> {
        const response = await this.smartLinksDocumentTypesAddCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a list of the selected smart link document types.
     */
    async smartLinksDocumentTypesListRaw(requestParameters: SmartLinksDocumentTypesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentTypesList200Response>> {
        if (requestParameters['smartLinkId'] == null) {
            throw new runtime.RequiredError(
                'smartLinkId',
                'Required parameter "smartLinkId" was null or undefined when calling smartLinksDocumentTypesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/smart_links/{smart_link_id}/document_types/`;
        urlPath = urlPath.replace(`{${"smart_link_id"}}`, encodeURIComponent(String(requestParameters['smartLinkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentTypesList200ResponseFromJSON(jsonValue));
    }

    /**
     * Return a list of the selected smart link document types.
     */
    async smartLinksDocumentTypesList(requestParameters: SmartLinksDocumentTypesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentTypesList200Response> {
        const response = await this.smartLinksDocumentTypesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a document type from a smart link.
     */
    async smartLinksDocumentTypesRemoveCreateRaw(requestParameters: SmartLinksDocumentTypesRemoveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SmartLinkDocumentTypeRemove>> {
        if (requestParameters['smartLinkId'] == null) {
            throw new runtime.RequiredError(
                'smartLinkId',
                'Required parameter "smartLinkId" was null or undefined when calling smartLinksDocumentTypesRemoveCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling smartLinksDocumentTypesRemoveCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/smart_links/{smart_link_id}/document_types/remove/`;
        urlPath = urlPath.replace(`{${"smart_link_id"}}`, encodeURIComponent(String(requestParameters['smartLinkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SmartLinkDocumentTypeRemoveToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SmartLinkDocumentTypeRemoveFromJSON(jsonValue));
    }

    /**
     * Remove a document type from a smart link.
     */
    async smartLinksDocumentTypesRemoveCreate(requestParameters: SmartLinksDocumentTypesRemoveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SmartLinkDocumentTypeRemove> {
        const response = await this.smartLinksDocumentTypesRemoveCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all the smart links.
     */
    async smartLinksListRaw(requestParameters: SmartLinksListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SmartLinksList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/smart_links/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SmartLinksList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the smart links.
     */
    async smartLinksList(requestParameters: SmartLinksListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SmartLinksList200Response> {
        const response = await this.smartLinksListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected smart link.
     */
    async smartLinksPartialUpdateRaw(requestParameters: SmartLinksPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SmartLink>> {
        if (requestParameters['smartLinkId'] == null) {
            throw new runtime.RequiredError(
                'smartLinkId',
                'Required parameter "smartLinkId" was null or undefined when calling smartLinksPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling smartLinksPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/smart_links/{smart_link_id}/`;
        urlPath = urlPath.replace(`{${"smart_link_id"}}`, encodeURIComponent(String(requestParameters['smartLinkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SmartLinkToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SmartLinkFromJSON(jsonValue));
    }

    /**
     * Edit the selected smart link.
     */
    async smartLinksPartialUpdate(requestParameters: SmartLinksPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SmartLink> {
        const response = await this.smartLinksPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the details of the selected smart link.
     */
    async smartLinksReadRaw(requestParameters: SmartLinksReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SmartLink>> {
        if (requestParameters['smartLinkId'] == null) {
            throw new runtime.RequiredError(
                'smartLinkId',
                'Required parameter "smartLinkId" was null or undefined when calling smartLinksRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/smart_links/{smart_link_id}/`;
        urlPath = urlPath.replace(`{${"smart_link_id"}}`, encodeURIComponent(String(requestParameters['smartLinkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SmartLinkFromJSON(jsonValue));
    }

    /**
     * Return the details of the selected smart link.
     */
    async smartLinksRead(requestParameters: SmartLinksReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SmartLink> {
        const response = await this.smartLinksReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected smart link.
     */
    async smartLinksUpdateRaw(requestParameters: SmartLinksUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SmartLink>> {
        if (requestParameters['smartLinkId'] == null) {
            throw new runtime.RequiredError(
                'smartLinkId',
                'Required parameter "smartLinkId" was null or undefined when calling smartLinksUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling smartLinksUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/smart_links/{smart_link_id}/`;
        urlPath = urlPath.replace(`{${"smart_link_id"}}`, encodeURIComponent(String(requestParameters['smartLinkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SmartLinkToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SmartLinkFromJSON(jsonValue));
    }

    /**
     * Edit the selected smart link.
     */
    async smartLinksUpdate(requestParameters: SmartLinksUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SmartLink> {
        const response = await this.smartLinksUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
