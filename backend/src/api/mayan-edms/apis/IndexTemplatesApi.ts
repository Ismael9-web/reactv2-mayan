/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DocumentTypeAdd,
  DocumentTypeRemove,
  DocumentTypesList200Response,
  IndexTemplate,
  IndexTemplateNode,
  IndexTemplateNodeWrite,
  IndexTemplatesList200Response,
  IndexTemplatesNodesList200Response,
} from '../models/index';
import {
    DocumentTypeAddFromJSON,
    DocumentTypeAddToJSON,
    DocumentTypeRemoveFromJSON,
    DocumentTypeRemoveToJSON,
    DocumentTypesList200ResponseFromJSON,
    DocumentTypesList200ResponseToJSON,
    IndexTemplateFromJSON,
    IndexTemplateToJSON,
    IndexTemplateNodeFromJSON,
    IndexTemplateNodeToJSON,
    IndexTemplateNodeWriteFromJSON,
    IndexTemplateNodeWriteToJSON,
    IndexTemplatesList200ResponseFromJSON,
    IndexTemplatesList200ResponseToJSON,
    IndexTemplatesNodesList200ResponseFromJSON,
    IndexTemplatesNodesList200ResponseToJSON,
} from '../models/index';

export interface IndexTemplatesCreateRequest {
    data: Omit<IndexTemplate, 'document_types_add_url'|'document_types_url'|'document_types_remove_url'|'id'|'index_template_root_node_id'|'nodes_url'|'rebuild_url'|'reset_url'|'url'>;
}

export interface IndexTemplatesDeleteRequest {
    indexTemplateId: string;
}

export interface IndexTemplatesDocumentTypesAddCreateRequest {
    indexTemplateId: string;
    data: DocumentTypeAdd;
}

export interface IndexTemplatesDocumentTypesListRequest {
    indexTemplateId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface IndexTemplatesDocumentTypesRemoveCreateRequest {
    indexTemplateId: string;
    data: DocumentTypeRemove;
}

export interface IndexTemplatesListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface IndexTemplatesNodesCreateRequest {
    indexTemplateId: string;
    data: Omit<IndexTemplateNodeWrite, 'id'|'index'|'index_url'|'level'|'parent_url'|'url'>;
}

export interface IndexTemplatesNodesDeleteRequest {
    indexTemplateId: string;
    indexTemplateNodeId: string;
}

export interface IndexTemplatesNodesListRequest {
    indexTemplateId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface IndexTemplatesNodesPartialUpdateRequest {
    indexTemplateId: string;
    indexTemplateNodeId: string;
    data: Omit<IndexTemplateNodeWrite, 'id'|'index'|'index_url'|'level'|'parent_url'|'url'>;
}

export interface IndexTemplatesNodesReadRequest {
    indexTemplateId: string;
    indexTemplateNodeId: string;
}

export interface IndexTemplatesNodesUpdateRequest {
    indexTemplateId: string;
    indexTemplateNodeId: string;
    data: Omit<IndexTemplateNodeWrite, 'id'|'index'|'index_url'|'level'|'parent_url'|'url'>;
}

export interface IndexTemplatesPartialUpdateRequest {
    indexTemplateId: string;
    data: Omit<IndexTemplate, 'document_types_add_url'|'document_types_url'|'document_types_remove_url'|'id'|'index_template_root_node_id'|'nodes_url'|'rebuild_url'|'reset_url'|'url'>;
}

export interface IndexTemplatesReadRequest {
    indexTemplateId: string;
}

export interface IndexTemplatesRebuildCreateRequest {
    indexTemplateId: string;
    data: object;
}

export interface IndexTemplatesResetCreateRequest {
    indexTemplateId: string;
    data: object;
}

export interface IndexTemplatesUpdateRequest {
    indexTemplateId: string;
    data: Omit<IndexTemplate, 'document_types_add_url'|'document_types_url'|'document_types_remove_url'|'id'|'index_template_root_node_id'|'nodes_url'|'rebuild_url'|'reset_url'|'url'>;
}

/**
 * 
 */
export class IndexTemplatesApi extends runtime.BaseAPI {

    /**
     * Create a new index template.
     */
    async indexTemplatesCreateRaw(requestParameters: IndexTemplatesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexTemplate>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling indexTemplatesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_templates/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IndexTemplateToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexTemplateFromJSON(jsonValue));
    }

    /**
     * Create a new index template.
     */
    async indexTemplatesCreate(requestParameters: IndexTemplatesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexTemplate> {
        const response = await this.indexTemplatesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected index template.
     */
    async indexTemplatesDeleteRaw(requestParameters: IndexTemplatesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['indexTemplateId'] == null) {
            throw new runtime.RequiredError(
                'indexTemplateId',
                'Required parameter "indexTemplateId" was null or undefined when calling indexTemplatesDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_templates/{index_template_id}/`;
        urlPath = urlPath.replace(`{${"index_template_id"}}`, encodeURIComponent(String(requestParameters['indexTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected index template.
     */
    async indexTemplatesDelete(requestParameters: IndexTemplatesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.indexTemplatesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Add a document type to an index template.
     */
    async indexTemplatesDocumentTypesAddCreateRaw(requestParameters: IndexTemplatesDocumentTypesAddCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentTypeAdd>> {
        if (requestParameters['indexTemplateId'] == null) {
            throw new runtime.RequiredError(
                'indexTemplateId',
                'Required parameter "indexTemplateId" was null or undefined when calling indexTemplatesDocumentTypesAddCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling indexTemplatesDocumentTypesAddCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_templates/{index_template_id}/document_types/add/`;
        urlPath = urlPath.replace(`{${"index_template_id"}}`, encodeURIComponent(String(requestParameters['indexTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentTypeAddToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentTypeAddFromJSON(jsonValue));
    }

    /**
     * Add a document type to an index template.
     */
    async indexTemplatesDocumentTypesAddCreate(requestParameters: IndexTemplatesDocumentTypesAddCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentTypeAdd> {
        const response = await this.indexTemplatesDocumentTypesAddCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of the document types associated with this index template.
     */
    async indexTemplatesDocumentTypesListRaw(requestParameters: IndexTemplatesDocumentTypesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentTypesList200Response>> {
        if (requestParameters['indexTemplateId'] == null) {
            throw new runtime.RequiredError(
                'indexTemplateId',
                'Required parameter "indexTemplateId" was null or undefined when calling indexTemplatesDocumentTypesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_templates/{index_template_id}/document_types/`;
        urlPath = urlPath.replace(`{${"index_template_id"}}`, encodeURIComponent(String(requestParameters['indexTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentTypesList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of the document types associated with this index template.
     */
    async indexTemplatesDocumentTypesList(requestParameters: IndexTemplatesDocumentTypesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentTypesList200Response> {
        const response = await this.indexTemplatesDocumentTypesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a document type from an index template.
     */
    async indexTemplatesDocumentTypesRemoveCreateRaw(requestParameters: IndexTemplatesDocumentTypesRemoveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentTypeRemove>> {
        if (requestParameters['indexTemplateId'] == null) {
            throw new runtime.RequiredError(
                'indexTemplateId',
                'Required parameter "indexTemplateId" was null or undefined when calling indexTemplatesDocumentTypesRemoveCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling indexTemplatesDocumentTypesRemoveCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_templates/{index_template_id}/document_types/remove/`;
        urlPath = urlPath.replace(`{${"index_template_id"}}`, encodeURIComponent(String(requestParameters['indexTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentTypeRemoveToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentTypeRemoveFromJSON(jsonValue));
    }

    /**
     * Remove a document type from an index template.
     */
    async indexTemplatesDocumentTypesRemoveCreate(requestParameters: IndexTemplatesDocumentTypesRemoveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentTypeRemove> {
        const response = await this.indexTemplatesDocumentTypesRemoveCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all the defined indexes template.
     */
    async indexTemplatesListRaw(requestParameters: IndexTemplatesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexTemplatesList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_templates/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexTemplatesList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the defined indexes template.
     */
    async indexTemplatesList(requestParameters: IndexTemplatesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexTemplatesList200Response> {
        const response = await this.indexTemplatesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new index template node.
     */
    async indexTemplatesNodesCreateRaw(requestParameters: IndexTemplatesNodesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexTemplateNodeWrite>> {
        if (requestParameters['indexTemplateId'] == null) {
            throw new runtime.RequiredError(
                'indexTemplateId',
                'Required parameter "indexTemplateId" was null or undefined when calling indexTemplatesNodesCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling indexTemplatesNodesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_templates/{index_template_id}/nodes/`;
        urlPath = urlPath.replace(`{${"index_template_id"}}`, encodeURIComponent(String(requestParameters['indexTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IndexTemplateNodeWriteToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexTemplateNodeWriteFromJSON(jsonValue));
    }

    /**
     * Create a new index template node.
     */
    async indexTemplatesNodesCreate(requestParameters: IndexTemplatesNodesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexTemplateNodeWrite> {
        const response = await this.indexTemplatesNodesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected index template node.
     */
    async indexTemplatesNodesDeleteRaw(requestParameters: IndexTemplatesNodesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['indexTemplateId'] == null) {
            throw new runtime.RequiredError(
                'indexTemplateId',
                'Required parameter "indexTemplateId" was null or undefined when calling indexTemplatesNodesDelete().'
            );
        }

        if (requestParameters['indexTemplateNodeId'] == null) {
            throw new runtime.RequiredError(
                'indexTemplateNodeId',
                'Required parameter "indexTemplateNodeId" was null or undefined when calling indexTemplatesNodesDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_templates/{index_template_id}/nodes/{index_template_node_id}/`;
        urlPath = urlPath.replace(`{${"index_template_id"}}`, encodeURIComponent(String(requestParameters['indexTemplateId'])));
        urlPath = urlPath.replace(`{${"index_template_node_id"}}`, encodeURIComponent(String(requestParameters['indexTemplateNodeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected index template node.
     */
    async indexTemplatesNodesDelete(requestParameters: IndexTemplatesNodesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.indexTemplatesNodesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all the template nodes for the selected index.
     */
    async indexTemplatesNodesListRaw(requestParameters: IndexTemplatesNodesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexTemplatesNodesList200Response>> {
        if (requestParameters['indexTemplateId'] == null) {
            throw new runtime.RequiredError(
                'indexTemplateId',
                'Required parameter "indexTemplateId" was null or undefined when calling indexTemplatesNodesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_templates/{index_template_id}/nodes/`;
        urlPath = urlPath.replace(`{${"index_template_id"}}`, encodeURIComponent(String(requestParameters['indexTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexTemplatesNodesList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the template nodes for the selected index.
     */
    async indexTemplatesNodesList(requestParameters: IndexTemplatesNodesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexTemplatesNodesList200Response> {
        const response = await this.indexTemplatesNodesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially edit an index template node.
     */
    async indexTemplatesNodesPartialUpdateRaw(requestParameters: IndexTemplatesNodesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexTemplateNodeWrite>> {
        if (requestParameters['indexTemplateId'] == null) {
            throw new runtime.RequiredError(
                'indexTemplateId',
                'Required parameter "indexTemplateId" was null or undefined when calling indexTemplatesNodesPartialUpdate().'
            );
        }

        if (requestParameters['indexTemplateNodeId'] == null) {
            throw new runtime.RequiredError(
                'indexTemplateNodeId',
                'Required parameter "indexTemplateNodeId" was null or undefined when calling indexTemplatesNodesPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling indexTemplatesNodesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_templates/{index_template_id}/nodes/{index_template_node_id}/`;
        urlPath = urlPath.replace(`{${"index_template_id"}}`, encodeURIComponent(String(requestParameters['indexTemplateId'])));
        urlPath = urlPath.replace(`{${"index_template_node_id"}}`, encodeURIComponent(String(requestParameters['indexTemplateNodeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IndexTemplateNodeWriteToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexTemplateNodeWriteFromJSON(jsonValue));
    }

    /**
     * Partially edit an index template node.
     */
    async indexTemplatesNodesPartialUpdate(requestParameters: IndexTemplatesNodesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexTemplateNodeWrite> {
        const response = await this.indexTemplatesNodesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the details of the selected index template node.
     */
    async indexTemplatesNodesReadRaw(requestParameters: IndexTemplatesNodesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexTemplateNode>> {
        if (requestParameters['indexTemplateId'] == null) {
            throw new runtime.RequiredError(
                'indexTemplateId',
                'Required parameter "indexTemplateId" was null or undefined when calling indexTemplatesNodesRead().'
            );
        }

        if (requestParameters['indexTemplateNodeId'] == null) {
            throw new runtime.RequiredError(
                'indexTemplateNodeId',
                'Required parameter "indexTemplateNodeId" was null or undefined when calling indexTemplatesNodesRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_templates/{index_template_id}/nodes/{index_template_node_id}/`;
        urlPath = urlPath.replace(`{${"index_template_id"}}`, encodeURIComponent(String(requestParameters['indexTemplateId'])));
        urlPath = urlPath.replace(`{${"index_template_node_id"}}`, encodeURIComponent(String(requestParameters['indexTemplateNodeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexTemplateNodeFromJSON(jsonValue));
    }

    /**
     * Returns the details of the selected index template node.
     */
    async indexTemplatesNodesRead(requestParameters: IndexTemplatesNodesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexTemplateNode> {
        const response = await this.indexTemplatesNodesReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit an index template node.
     */
    async indexTemplatesNodesUpdateRaw(requestParameters: IndexTemplatesNodesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexTemplateNodeWrite>> {
        if (requestParameters['indexTemplateId'] == null) {
            throw new runtime.RequiredError(
                'indexTemplateId',
                'Required parameter "indexTemplateId" was null or undefined when calling indexTemplatesNodesUpdate().'
            );
        }

        if (requestParameters['indexTemplateNodeId'] == null) {
            throw new runtime.RequiredError(
                'indexTemplateNodeId',
                'Required parameter "indexTemplateNodeId" was null or undefined when calling indexTemplatesNodesUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling indexTemplatesNodesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_templates/{index_template_id}/nodes/{index_template_node_id}/`;
        urlPath = urlPath.replace(`{${"index_template_id"}}`, encodeURIComponent(String(requestParameters['indexTemplateId'])));
        urlPath = urlPath.replace(`{${"index_template_node_id"}}`, encodeURIComponent(String(requestParameters['indexTemplateNodeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IndexTemplateNodeWriteToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexTemplateNodeWriteFromJSON(jsonValue));
    }

    /**
     * Edit an index template node.
     */
    async indexTemplatesNodesUpdate(requestParameters: IndexTemplatesNodesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexTemplateNodeWrite> {
        const response = await this.indexTemplatesNodesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially edit an index template.
     */
    async indexTemplatesPartialUpdateRaw(requestParameters: IndexTemplatesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexTemplate>> {
        if (requestParameters['indexTemplateId'] == null) {
            throw new runtime.RequiredError(
                'indexTemplateId',
                'Required parameter "indexTemplateId" was null or undefined when calling indexTemplatesPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling indexTemplatesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_templates/{index_template_id}/`;
        urlPath = urlPath.replace(`{${"index_template_id"}}`, encodeURIComponent(String(requestParameters['indexTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IndexTemplateToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexTemplateFromJSON(jsonValue));
    }

    /**
     * Partially edit an index template.
     */
    async indexTemplatesPartialUpdate(requestParameters: IndexTemplatesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexTemplate> {
        const response = await this.indexTemplatesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the details of the selected index template.
     */
    async indexTemplatesReadRaw(requestParameters: IndexTemplatesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexTemplate>> {
        if (requestParameters['indexTemplateId'] == null) {
            throw new runtime.RequiredError(
                'indexTemplateId',
                'Required parameter "indexTemplateId" was null or undefined when calling indexTemplatesRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_templates/{index_template_id}/`;
        urlPath = urlPath.replace(`{${"index_template_id"}}`, encodeURIComponent(String(requestParameters['indexTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexTemplateFromJSON(jsonValue));
    }

    /**
     * Returns the details of the selected index template.
     */
    async indexTemplatesRead(requestParameters: IndexTemplatesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexTemplate> {
        const response = await this.indexTemplatesReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Rebuild the selected index template.
     */
    async indexTemplatesRebuildCreateRaw(requestParameters: IndexTemplatesRebuildCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['indexTemplateId'] == null) {
            throw new runtime.RequiredError(
                'indexTemplateId',
                'Required parameter "indexTemplateId" was null or undefined when calling indexTemplatesRebuildCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling indexTemplatesRebuildCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_templates/{index_template_id}/rebuild/`;
        urlPath = urlPath.replace(`{${"index_template_id"}}`, encodeURIComponent(String(requestParameters['indexTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['data'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Rebuild the selected index template.
     */
    async indexTemplatesRebuildCreate(requestParameters: IndexTemplatesRebuildCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.indexTemplatesRebuildCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reset the selected index template.
     */
    async indexTemplatesResetCreateRaw(requestParameters: IndexTemplatesResetCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['indexTemplateId'] == null) {
            throw new runtime.RequiredError(
                'indexTemplateId',
                'Required parameter "indexTemplateId" was null or undefined when calling indexTemplatesResetCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling indexTemplatesResetCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_templates/{index_template_id}/reset/`;
        urlPath = urlPath.replace(`{${"index_template_id"}}`, encodeURIComponent(String(requestParameters['indexTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['data'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Reset the selected index template.
     */
    async indexTemplatesResetCreate(requestParameters: IndexTemplatesResetCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.indexTemplatesResetCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit an index template.
     */
    async indexTemplatesUpdateRaw(requestParameters: IndexTemplatesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexTemplate>> {
        if (requestParameters['indexTemplateId'] == null) {
            throw new runtime.RequiredError(
                'indexTemplateId',
                'Required parameter "indexTemplateId" was null or undefined when calling indexTemplatesUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling indexTemplatesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/index_templates/{index_template_id}/`;
        urlPath = urlPath.replace(`{${"index_template_id"}}`, encodeURIComponent(String(requestParameters['indexTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IndexTemplateToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexTemplateFromJSON(jsonValue));
    }

    /**
     * Edit an index template.
     */
    async indexTemplatesUpdate(requestParameters: IndexTemplatesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexTemplate> {
        const response = await this.indexTemplatesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
