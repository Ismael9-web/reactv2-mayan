/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContentType,
  ContentTypesList200Response,
} from '../models/index';
import {
    ContentTypeFromJSON,
    ContentTypeToJSON,
    ContentTypesList200ResponseFromJSON,
    ContentTypesList200ResponseToJSON,
} from '../models/index';

export interface ContentTypesListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface ContentTypesReadRequest {
    contentTypeId: string;
}

/**
 * 
 */
export class ContentTypesApi extends runtime.BaseAPI {

    /**
     * Returns a list of all the available content types.
     */
    async contentTypesListRaw(requestParameters: ContentTypesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentTypesList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/content_types/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentTypesList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the available content types.
     */
    async contentTypesList(requestParameters: ContentTypesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentTypesList200Response> {
        const response = await this.contentTypesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the details of the selected content type.
     */
    async contentTypesReadRaw(requestParameters: ContentTypesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentType>> {
        if (requestParameters['contentTypeId'] == null) {
            throw new runtime.RequiredError(
                'contentTypeId',
                'Required parameter "contentTypeId" was null or undefined when calling contentTypesRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/content_types/{content_type_id}/`;
        urlPath = urlPath.replace(`{${"content_type_id"}}`, encodeURIComponent(String(requestParameters['contentTypeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentTypeFromJSON(jsonValue));
    }

    /**
     * Returns the details of the selected content type.
     */
    async contentTypesRead(requestParameters: ContentTypesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentType> {
        const response = await this.contentTypesReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
