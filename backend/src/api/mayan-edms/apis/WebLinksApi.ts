/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DocumentTypesList200Response,
  WebLink,
  WebLinkDocumentTypeAdd,
  WebLinkDocumentTypeRemove,
  WebLinksList200Response,
} from '../models/index';
import {
    DocumentTypesList200ResponseFromJSON,
    DocumentTypesList200ResponseToJSON,
    WebLinkFromJSON,
    WebLinkToJSON,
    WebLinkDocumentTypeAddFromJSON,
    WebLinkDocumentTypeAddToJSON,
    WebLinkDocumentTypeRemoveFromJSON,
    WebLinkDocumentTypeRemoveToJSON,
    WebLinksList200ResponseFromJSON,
    WebLinksList200ResponseToJSON,
} from '../models/index';

export interface WebLinksCreateRequest {
    data: Omit<WebLink, 'document_types_add_url'|'document_types_remove_url'|'document_types_url'|'id'|'url'>;
}

export interface WebLinksDeleteRequest {
    webLinkId: string;
}

export interface WebLinksDocumentTypesAddCreateRequest {
    webLinkId: string;
    data: WebLinkDocumentTypeAdd;
}

export interface WebLinksDocumentTypesListRequest {
    webLinkId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface WebLinksDocumentTypesRemoveCreateRequest {
    webLinkId: string;
    data: WebLinkDocumentTypeRemove;
}

export interface WebLinksListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface WebLinksPartialUpdateRequest {
    webLinkId: string;
    data: Omit<WebLink, 'document_types_add_url'|'document_types_remove_url'|'document_types_url'|'id'|'url'>;
}

export interface WebLinksReadRequest {
    webLinkId: string;
}

export interface WebLinksUpdateRequest {
    webLinkId: string;
    data: Omit<WebLink, 'document_types_add_url'|'document_types_remove_url'|'document_types_url'|'id'|'url'>;
}

/**
 * 
 */
export class WebLinksApi extends runtime.BaseAPI {

    /**
     * Create a new web link.
     */
    async webLinksCreateRaw(requestParameters: WebLinksCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebLink>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling webLinksCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/web_links/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebLinkToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebLinkFromJSON(jsonValue));
    }

    /**
     * Create a new web link.
     */
    async webLinksCreate(requestParameters: WebLinksCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebLink> {
        const response = await this.webLinksCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected web link.
     */
    async webLinksDeleteRaw(requestParameters: WebLinksDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['webLinkId'] == null) {
            throw new runtime.RequiredError(
                'webLinkId',
                'Required parameter "webLinkId" was null or undefined when calling webLinksDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/web_links/{web_link_id}/`;
        urlPath = urlPath.replace(`{${"web_link_id"}}`, encodeURIComponent(String(requestParameters['webLinkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected web link.
     */
    async webLinksDelete(requestParameters: WebLinksDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.webLinksDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Add a document type to a web link.
     */
    async webLinksDocumentTypesAddCreateRaw(requestParameters: WebLinksDocumentTypesAddCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebLinkDocumentTypeAdd>> {
        if (requestParameters['webLinkId'] == null) {
            throw new runtime.RequiredError(
                'webLinkId',
                'Required parameter "webLinkId" was null or undefined when calling webLinksDocumentTypesAddCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling webLinksDocumentTypesAddCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/web_links/{web_link_id}/document_types/add/`;
        urlPath = urlPath.replace(`{${"web_link_id"}}`, encodeURIComponent(String(requestParameters['webLinkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebLinkDocumentTypeAddToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebLinkDocumentTypeAddFromJSON(jsonValue));
    }

    /**
     * Add a document type to a web link.
     */
    async webLinksDocumentTypesAddCreate(requestParameters: WebLinksDocumentTypesAddCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebLinkDocumentTypeAdd> {
        const response = await this.webLinksDocumentTypesAddCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a list of the selected web link document types.
     */
    async webLinksDocumentTypesListRaw(requestParameters: WebLinksDocumentTypesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentTypesList200Response>> {
        if (requestParameters['webLinkId'] == null) {
            throw new runtime.RequiredError(
                'webLinkId',
                'Required parameter "webLinkId" was null or undefined when calling webLinksDocumentTypesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/web_links/{web_link_id}/document_types/`;
        urlPath = urlPath.replace(`{${"web_link_id"}}`, encodeURIComponent(String(requestParameters['webLinkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentTypesList200ResponseFromJSON(jsonValue));
    }

    /**
     * Return a list of the selected web link document types.
     */
    async webLinksDocumentTypesList(requestParameters: WebLinksDocumentTypesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentTypesList200Response> {
        const response = await this.webLinksDocumentTypesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a document type from a web link.
     */
    async webLinksDocumentTypesRemoveCreateRaw(requestParameters: WebLinksDocumentTypesRemoveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebLinkDocumentTypeRemove>> {
        if (requestParameters['webLinkId'] == null) {
            throw new runtime.RequiredError(
                'webLinkId',
                'Required parameter "webLinkId" was null or undefined when calling webLinksDocumentTypesRemoveCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling webLinksDocumentTypesRemoveCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/web_links/{web_link_id}/document_types/remove/`;
        urlPath = urlPath.replace(`{${"web_link_id"}}`, encodeURIComponent(String(requestParameters['webLinkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebLinkDocumentTypeRemoveToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebLinkDocumentTypeRemoveFromJSON(jsonValue));
    }

    /**
     * Remove a document type from a web link.
     */
    async webLinksDocumentTypesRemoveCreate(requestParameters: WebLinksDocumentTypesRemoveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebLinkDocumentTypeRemove> {
        const response = await this.webLinksDocumentTypesRemoveCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all the web links.
     */
    async webLinksListRaw(requestParameters: WebLinksListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebLinksList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/web_links/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebLinksList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the web links.
     */
    async webLinksList(requestParameters: WebLinksListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebLinksList200Response> {
        const response = await this.webLinksListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected web link.
     */
    async webLinksPartialUpdateRaw(requestParameters: WebLinksPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebLink>> {
        if (requestParameters['webLinkId'] == null) {
            throw new runtime.RequiredError(
                'webLinkId',
                'Required parameter "webLinkId" was null or undefined when calling webLinksPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling webLinksPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/web_links/{web_link_id}/`;
        urlPath = urlPath.replace(`{${"web_link_id"}}`, encodeURIComponent(String(requestParameters['webLinkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WebLinkToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebLinkFromJSON(jsonValue));
    }

    /**
     * Edit the selected web link.
     */
    async webLinksPartialUpdate(requestParameters: WebLinksPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebLink> {
        const response = await this.webLinksPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the details of the selected web link.
     */
    async webLinksReadRaw(requestParameters: WebLinksReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebLink>> {
        if (requestParameters['webLinkId'] == null) {
            throw new runtime.RequiredError(
                'webLinkId',
                'Required parameter "webLinkId" was null or undefined when calling webLinksRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/web_links/{web_link_id}/`;
        urlPath = urlPath.replace(`{${"web_link_id"}}`, encodeURIComponent(String(requestParameters['webLinkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebLinkFromJSON(jsonValue));
    }

    /**
     * Return the details of the selected web link.
     */
    async webLinksRead(requestParameters: WebLinksReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebLink> {
        const response = await this.webLinksReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected web link.
     */
    async webLinksUpdateRaw(requestParameters: WebLinksUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebLink>> {
        if (requestParameters['webLinkId'] == null) {
            throw new runtime.RequiredError(
                'webLinkId',
                'Required parameter "webLinkId" was null or undefined when calling webLinksUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling webLinksUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/web_links/{web_link_id}/`;
        urlPath = urlPath.replace(`{${"web_link_id"}}`, encodeURIComponent(String(requestParameters['webLinkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WebLinkToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebLinkFromJSON(jsonValue));
    }

    /**
     * Edit the selected web link.
     */
    async webLinksUpdate(requestParameters: WebLinksUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebLink> {
        const response = await this.webLinksUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
