/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Source,
  SourceBackendAction,
  SourcesActionsList200Response,
  SourcesList200Response,
} from '../models/index';
import {
    SourceFromJSON,
    SourceToJSON,
    SourceBackendActionFromJSON,
    SourceBackendActionToJSON,
    SourcesActionsList200ResponseFromJSON,
    SourcesActionsList200ResponseToJSON,
    SourcesList200ResponseFromJSON,
    SourcesList200ResponseToJSON,
} from '../models/index';

export interface SourcesActionsExecuteCreateRequest {
    sourceId: string;
    actionName: string;
    data: Omit<SourceBackendAction, 'accept_files'|'confirmation'|'execute_url'|'interfaces'|'name'|'source_id'|'source_url'|'url'>;
}

export interface SourcesActionsExecuteListRequest {
    sourceId: string;
    actionName: string;
    page?: number;
    pageSize?: number;
}

export interface SourcesActionsListRequest {
    sourceId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface SourcesActionsReadRequest {
    sourceId: string;
    actionName: string;
}

export interface SourcesCreateRequest {
    data: Omit<Source, 'actions_url'|'id'|'url'>;
}

export interface SourcesDeleteRequest {
    sourceId: string;
}

export interface SourcesListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface SourcesPartialUpdateRequest {
    sourceId: string;
    data: Omit<Source, 'actions_url'|'id'|'url'>;
}

export interface SourcesReadRequest {
    sourceId: string;
}

export interface SourcesUpdateRequest {
    sourceId: string;
    data: Omit<Source, 'actions_url'|'id'|'url'>;
}

/**
 * 
 */
export class SourcesApi extends runtime.BaseAPI {

    /**
     * Execute a source action with confirmation.
     */
    async sourcesActionsExecuteCreateRaw(requestParameters: SourcesActionsExecuteCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SourceBackendAction>> {
        if (requestParameters['sourceId'] == null) {
            throw new runtime.RequiredError(
                'sourceId',
                'Required parameter "sourceId" was null or undefined when calling sourcesActionsExecuteCreate().'
            );
        }

        if (requestParameters['actionName'] == null) {
            throw new runtime.RequiredError(
                'actionName',
                'Required parameter "actionName" was null or undefined when calling sourcesActionsExecuteCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling sourcesActionsExecuteCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/sources/{source_id}/actions/{action_name}/execute/`;
        urlPath = urlPath.replace(`{${"source_id"}}`, encodeURIComponent(String(requestParameters['sourceId'])));
        urlPath = urlPath.replace(`{${"action_name"}}`, encodeURIComponent(String(requestParameters['actionName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceBackendActionToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceBackendActionFromJSON(jsonValue));
    }

    /**
     * Execute a source action with confirmation.
     */
    async sourcesActionsExecuteCreate(requestParameters: SourcesActionsExecuteCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SourceBackendAction> {
        const response = await this.sourcesActionsExecuteCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Execute a source action without confirmation.
     */
    async sourcesActionsExecuteListRaw(requestParameters: SourcesActionsExecuteListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SourcesActionsList200Response>> {
        if (requestParameters['sourceId'] == null) {
            throw new runtime.RequiredError(
                'sourceId',
                'Required parameter "sourceId" was null or undefined when calling sourcesActionsExecuteList().'
            );
        }

        if (requestParameters['actionName'] == null) {
            throw new runtime.RequiredError(
                'actionName',
                'Required parameter "actionName" was null or undefined when calling sourcesActionsExecuteList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/sources/{source_id}/actions/{action_name}/execute/`;
        urlPath = urlPath.replace(`{${"source_id"}}`, encodeURIComponent(String(requestParameters['sourceId'])));
        urlPath = urlPath.replace(`{${"action_name"}}`, encodeURIComponent(String(requestParameters['actionName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourcesActionsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Execute a source action without confirmation.
     */
    async sourcesActionsExecuteList(requestParameters: SourcesActionsExecuteListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SourcesActionsList200Response> {
        const response = await this.sourcesActionsExecuteListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Source action list view.
     */
    async sourcesActionsListRaw(requestParameters: SourcesActionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SourcesActionsList200Response>> {
        if (requestParameters['sourceId'] == null) {
            throw new runtime.RequiredError(
                'sourceId',
                'Required parameter "sourceId" was null or undefined when calling sourcesActionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/sources/{source_id}/actions/`;
        urlPath = urlPath.replace(`{${"source_id"}}`, encodeURIComponent(String(requestParameters['sourceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourcesActionsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Source action list view.
     */
    async sourcesActionsList(requestParameters: SourcesActionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SourcesActionsList200Response> {
        const response = await this.sourcesActionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Source action detail view.
     */
    async sourcesActionsReadRaw(requestParameters: SourcesActionsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SourceBackendAction>> {
        if (requestParameters['sourceId'] == null) {
            throw new runtime.RequiredError(
                'sourceId',
                'Required parameter "sourceId" was null or undefined when calling sourcesActionsRead().'
            );
        }

        if (requestParameters['actionName'] == null) {
            throw new runtime.RequiredError(
                'actionName',
                'Required parameter "actionName" was null or undefined when calling sourcesActionsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/sources/{source_id}/actions/{action_name}/`;
        urlPath = urlPath.replace(`{${"source_id"}}`, encodeURIComponent(String(requestParameters['sourceId'])));
        urlPath = urlPath.replace(`{${"action_name"}}`, encodeURIComponent(String(requestParameters['actionName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceBackendActionFromJSON(jsonValue));
    }

    /**
     * Source action detail view.
     */
    async sourcesActionsRead(requestParameters: SourcesActionsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SourceBackendAction> {
        const response = await this.sourcesActionsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new source.
     */
    async sourcesCreateRaw(requestParameters: SourcesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Source>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling sourcesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/sources/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceFromJSON(jsonValue));
    }

    /**
     * Create a new source.
     */
    async sourcesCreate(requestParameters: SourcesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Source> {
        const response = await this.sourcesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected source.
     */
    async sourcesDeleteRaw(requestParameters: SourcesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sourceId'] == null) {
            throw new runtime.RequiredError(
                'sourceId',
                'Required parameter "sourceId" was null or undefined when calling sourcesDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/sources/{source_id}/`;
        urlPath = urlPath.replace(`{${"source_id"}}`, encodeURIComponent(String(requestParameters['sourceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected source.
     */
    async sourcesDelete(requestParameters: SourcesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sourcesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all the source.
     */
    async sourcesListRaw(requestParameters: SourcesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SourcesList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/sources/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourcesList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the source.
     */
    async sourcesList(requestParameters: SourcesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SourcesList200Response> {
        const response = await this.sourcesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected source.
     */
    async sourcesPartialUpdateRaw(requestParameters: SourcesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Source>> {
        if (requestParameters['sourceId'] == null) {
            throw new runtime.RequiredError(
                'sourceId',
                'Required parameter "sourceId" was null or undefined when calling sourcesPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling sourcesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/sources/{source_id}/`;
        urlPath = urlPath.replace(`{${"source_id"}}`, encodeURIComponent(String(requestParameters['sourceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SourceToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceFromJSON(jsonValue));
    }

    /**
     * Edit the selected source.
     */
    async sourcesPartialUpdate(requestParameters: SourcesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Source> {
        const response = await this.sourcesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Details of the selected source.
     */
    async sourcesReadRaw(requestParameters: SourcesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Source>> {
        if (requestParameters['sourceId'] == null) {
            throw new runtime.RequiredError(
                'sourceId',
                'Required parameter "sourceId" was null or undefined when calling sourcesRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/sources/{source_id}/`;
        urlPath = urlPath.replace(`{${"source_id"}}`, encodeURIComponent(String(requestParameters['sourceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceFromJSON(jsonValue));
    }

    /**
     * Details of the selected source.
     */
    async sourcesRead(requestParameters: SourcesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Source> {
        const response = await this.sourcesReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected source.
     */
    async sourcesUpdateRaw(requestParameters: SourcesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Source>> {
        if (requestParameters['sourceId'] == null) {
            throw new runtime.RequiredError(
                'sourceId',
                'Required parameter "sourceId" was null or undefined when calling sourcesUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling sourcesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/sources/{source_id}/`;
        urlPath = urlPath.replace(`{${"source_id"}}`, encodeURIComponent(String(requestParameters['sourceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SourceToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceFromJSON(jsonValue));
    }

    /**
     * Edit the selected source.
     */
    async sourcesUpdate(requestParameters: SourcesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Source> {
        const response = await this.sourcesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
