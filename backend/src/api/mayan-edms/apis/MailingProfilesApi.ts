/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MailingProfile,
  MailingProfilesList200Response,
} from '../models/index';
import {
    MailingProfileFromJSON,
    MailingProfileToJSON,
    MailingProfilesList200ResponseFromJSON,
    MailingProfilesList200ResponseToJSON,
} from '../models/index';

export interface MailingProfilesCreateRequest {
    data: Omit<MailingProfile, 'id'|'url'>;
}

export interface MailingProfilesDeleteRequest {
    mailingProfileId: string;
}

export interface MailingProfilesListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface MailingProfilesPartialUpdateRequest {
    mailingProfileId: string;
    data: Omit<MailingProfile, 'id'|'url'>;
}

export interface MailingProfilesReadRequest {
    mailingProfileId: string;
}

export interface MailingProfilesUpdateRequest {
    mailingProfileId: string;
    data: Omit<MailingProfile, 'id'|'url'>;
}

/**
 * 
 */
export class MailingProfilesApi extends runtime.BaseAPI {

    /**
     * Create a new mailing profile.
     */
    async mailingProfilesCreateRaw(requestParameters: MailingProfilesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MailingProfile>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling mailingProfilesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mailing_profiles/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MailingProfileToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MailingProfileFromJSON(jsonValue));
    }

    /**
     * Create a new mailing profile.
     */
    async mailingProfilesCreate(requestParameters: MailingProfilesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MailingProfile> {
        const response = await this.mailingProfilesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected mailing profile.
     */
    async mailingProfilesDeleteRaw(requestParameters: MailingProfilesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mailingProfileId'] == null) {
            throw new runtime.RequiredError(
                'mailingProfileId',
                'Required parameter "mailingProfileId" was null or undefined when calling mailingProfilesDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mailing_profiles/{mailing_profile_id}/`;
        urlPath = urlPath.replace(`{${"mailing_profile_id"}}`, encodeURIComponent(String(requestParameters['mailingProfileId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected mailing profile.
     */
    async mailingProfilesDelete(requestParameters: MailingProfilesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mailingProfilesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all the mailing profiles.
     */
    async mailingProfilesListRaw(requestParameters: MailingProfilesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MailingProfilesList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mailing_profiles/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MailingProfilesList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the mailing profiles.
     */
    async mailingProfilesList(requestParameters: MailingProfilesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MailingProfilesList200Response> {
        const response = await this.mailingProfilesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected mailing profile.
     */
    async mailingProfilesPartialUpdateRaw(requestParameters: MailingProfilesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MailingProfile>> {
        if (requestParameters['mailingProfileId'] == null) {
            throw new runtime.RequiredError(
                'mailingProfileId',
                'Required parameter "mailingProfileId" was null or undefined when calling mailingProfilesPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling mailingProfilesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mailing_profiles/{mailing_profile_id}/`;
        urlPath = urlPath.replace(`{${"mailing_profile_id"}}`, encodeURIComponent(String(requestParameters['mailingProfileId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MailingProfileToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MailingProfileFromJSON(jsonValue));
    }

    /**
     * Edit the selected mailing profile.
     */
    async mailingProfilesPartialUpdate(requestParameters: MailingProfilesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MailingProfile> {
        const response = await this.mailingProfilesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the details of the selected mailing profile.
     */
    async mailingProfilesReadRaw(requestParameters: MailingProfilesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MailingProfile>> {
        if (requestParameters['mailingProfileId'] == null) {
            throw new runtime.RequiredError(
                'mailingProfileId',
                'Required parameter "mailingProfileId" was null or undefined when calling mailingProfilesRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mailing_profiles/{mailing_profile_id}/`;
        urlPath = urlPath.replace(`{${"mailing_profile_id"}}`, encodeURIComponent(String(requestParameters['mailingProfileId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MailingProfileFromJSON(jsonValue));
    }

    /**
     * Return the details of the selected mailing profile.
     */
    async mailingProfilesRead(requestParameters: MailingProfilesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MailingProfile> {
        const response = await this.mailingProfilesReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected mailing profile.
     */
    async mailingProfilesUpdateRaw(requestParameters: MailingProfilesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MailingProfile>> {
        if (requestParameters['mailingProfileId'] == null) {
            throw new runtime.RequiredError(
                'mailingProfileId',
                'Required parameter "mailingProfileId" was null or undefined when calling mailingProfilesUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling mailingProfilesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mailing_profiles/{mailing_profile_id}/`;
        urlPath = urlPath.replace(`{${"mailing_profile_id"}}`, encodeURIComponent(String(requestParameters['mailingProfileId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MailingProfileToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MailingProfileFromJSON(jsonValue));
    }

    /**
     * Edit the selected mailing profile.
     */
    async mailingProfilesUpdate(requestParameters: MailingProfilesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MailingProfile> {
        const response = await this.mailingProfilesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
