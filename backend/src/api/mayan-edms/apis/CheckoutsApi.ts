/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CheckoutsList200Response,
  DocumentCheckout,
  NewDocumentCheckout,
} from '../models/index';
import {
    CheckoutsList200ResponseFromJSON,
    CheckoutsList200ResponseToJSON,
    DocumentCheckoutFromJSON,
    DocumentCheckoutToJSON,
    NewDocumentCheckoutFromJSON,
    NewDocumentCheckoutToJSON,
} from '../models/index';

export interface CheckoutsCheckoutInfoDeleteRequest {
    checkoutId: string;
}

export interface CheckoutsCheckoutInfoReadRequest {
    checkoutId: string;
}

export interface CheckoutsCreateRequest {
    data: Omit<NewDocumentCheckout, 'document'|'id'>;
}

export interface CheckoutsListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

/**
 * 
 */
export class CheckoutsApi extends runtime.BaseAPI {

    /**
     * Check in a document.
     */
    async checkoutsCheckoutInfoDeleteRaw(requestParameters: CheckoutsCheckoutInfoDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['checkoutId'] == null) {
            throw new runtime.RequiredError(
                'checkoutId',
                'Required parameter "checkoutId" was null or undefined when calling checkoutsCheckoutInfoDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/checkouts/{checkout_id}/checkout_info/`;
        urlPath = urlPath.replace(`{${"checkout_id"}}`, encodeURIComponent(String(requestParameters['checkoutId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check in a document.
     */
    async checkoutsCheckoutInfoDelete(requestParameters: CheckoutsCheckoutInfoDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.checkoutsCheckoutInfoDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve the details of the selected checked out document entry.
     */
    async checkoutsCheckoutInfoReadRaw(requestParameters: CheckoutsCheckoutInfoReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentCheckout>> {
        if (requestParameters['checkoutId'] == null) {
            throw new runtime.RequiredError(
                'checkoutId',
                'Required parameter "checkoutId" was null or undefined when calling checkoutsCheckoutInfoRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/checkouts/{checkout_id}/checkout_info/`;
        urlPath = urlPath.replace(`{${"checkout_id"}}`, encodeURIComponent(String(requestParameters['checkoutId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentCheckoutFromJSON(jsonValue));
    }

    /**
     * Retrieve the details of the selected checked out document entry.
     */
    async checkoutsCheckoutInfoRead(requestParameters: CheckoutsCheckoutInfoReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentCheckout> {
        const response = await this.checkoutsCheckoutInfoReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Checkout a document.
     */
    async checkoutsCreateRaw(requestParameters: CheckoutsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NewDocumentCheckout>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling checkoutsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/checkouts/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewDocumentCheckoutToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NewDocumentCheckoutFromJSON(jsonValue));
    }

    /**
     * Checkout a document.
     */
    async checkoutsCreate(requestParameters: CheckoutsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NewDocumentCheckout> {
        const response = await this.checkoutsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all the documents that are currently checked out.
     */
    async checkoutsListRaw(requestParameters: CheckoutsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckoutsList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/checkouts/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the documents that are currently checked out.
     */
    async checkoutsList(requestParameters: CheckoutsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckoutsList200Response> {
        const response = await this.checkoutsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
