/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ACL } from '../models';
// @ts-ignore
import type { ACLPermissionAdd } from '../models';
// @ts-ignore
import type { ACLPermissionRemove } from '../models';
// @ts-ignore
import type { ErrorLogPartitionEntry } from '../models';
// @ts-ignore
import type { EventsList200Response } from '../models';
// @ts-ignore
import type { MailingProfileAction } from '../models';
// @ts-ignore
import type { ObjectTemplateSandbox } from '../models';
// @ts-ignore
import type { ObjectsAclsList200Response } from '../models';
// @ts-ignore
import type { ObjectsErrorsList200Response } from '../models';
// @ts-ignore
import type { ObjectsPermissionsList200Response } from '../models';
// @ts-ignore
import type { Permission } from '../models';
/**
 * ObjectsApi - axios parameter creator
 * @export
 */
export const ObjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new access control list for the selected object.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {ACL} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsAclsCreate: async (appLabel: string, modelName: string, objectId: string, data: ACL, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appLabel' is not null or undefined
            assertParamExists('objectsAclsCreate', 'appLabel', appLabel)
            // verify required parameter 'modelName' is not null or undefined
            assertParamExists('objectsAclsCreate', 'modelName', modelName)
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists('objectsAclsCreate', 'objectId', objectId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('objectsAclsCreate', 'data', data)
            const localVarPath = `/objects/{app_label}/{model_name}/{object_id}/acls/`
                .replace(`{${"app_label"}}`, encodeURIComponent(String(appLabel)))
                .replace(`{${"model_name"}}`, encodeURIComponent(String(modelName)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the selected access control list.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} aclId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsAclsDelete: async (appLabel: string, modelName: string, objectId: string, aclId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appLabel' is not null or undefined
            assertParamExists('objectsAclsDelete', 'appLabel', appLabel)
            // verify required parameter 'modelName' is not null or undefined
            assertParamExists('objectsAclsDelete', 'modelName', modelName)
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists('objectsAclsDelete', 'objectId', objectId)
            // verify required parameter 'aclId' is not null or undefined
            assertParamExists('objectsAclsDelete', 'aclId', aclId)
            const localVarPath = `/objects/{app_label}/{model_name}/{object_id}/acls/{acl_id}/`
                .replace(`{${"app_label"}}`, encodeURIComponent(String(appLabel)))
                .replace(`{${"model_name"}}`, encodeURIComponent(String(modelName)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)))
                .replace(`{${"acl_id"}}`, encodeURIComponent(String(aclId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the object\'s access control lists
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsAclsList: async (appLabel: string, modelName: string, objectId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appLabel' is not null or undefined
            assertParamExists('objectsAclsList', 'appLabel', appLabel)
            // verify required parameter 'modelName' is not null or undefined
            assertParamExists('objectsAclsList', 'modelName', modelName)
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists('objectsAclsList', 'objectId', objectId)
            const localVarPath = `/objects/{app_label}/{model_name}/{object_id}/acls/`
                .replace(`{${"app_label"}}`, encodeURIComponent(String(appLabel)))
                .replace(`{${"model_name"}}`, encodeURIComponent(String(modelName)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a permission to an ACL.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} aclId 
         * @param {ACLPermissionAdd} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsAclsPermissionsAddCreate: async (appLabel: string, modelName: string, objectId: string, aclId: string, data: ACLPermissionAdd, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appLabel' is not null or undefined
            assertParamExists('objectsAclsPermissionsAddCreate', 'appLabel', appLabel)
            // verify required parameter 'modelName' is not null or undefined
            assertParamExists('objectsAclsPermissionsAddCreate', 'modelName', modelName)
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists('objectsAclsPermissionsAddCreate', 'objectId', objectId)
            // verify required parameter 'aclId' is not null or undefined
            assertParamExists('objectsAclsPermissionsAddCreate', 'aclId', aclId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('objectsAclsPermissionsAddCreate', 'data', data)
            const localVarPath = `/objects/{app_label}/{model_name}/{object_id}/acls/{acl_id}/permissions/add/`
                .replace(`{${"app_label"}}`, encodeURIComponent(String(appLabel)))
                .replace(`{${"model_name"}}`, encodeURIComponent(String(modelName)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)))
                .replace(`{${"acl_id"}}`, encodeURIComponent(String(aclId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new permission to the selected access control list.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} aclId 
         * @param {Permission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsAclsPermissionsCreate: async (appLabel: string, modelName: string, objectId: string, aclId: string, data: Permission, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appLabel' is not null or undefined
            assertParamExists('objectsAclsPermissionsCreate', 'appLabel', appLabel)
            // verify required parameter 'modelName' is not null or undefined
            assertParamExists('objectsAclsPermissionsCreate', 'modelName', modelName)
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists('objectsAclsPermissionsCreate', 'objectId', objectId)
            // verify required parameter 'aclId' is not null or undefined
            assertParamExists('objectsAclsPermissionsCreate', 'aclId', aclId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('objectsAclsPermissionsCreate', 'data', data)
            const localVarPath = `/objects/{app_label}/{model_name}/{object_id}/acls/{acl_id}/permissions/`
                .replace(`{${"app_label"}}`, encodeURIComponent(String(appLabel)))
                .replace(`{${"model_name"}}`, encodeURIComponent(String(modelName)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)))
                .replace(`{${"acl_id"}}`, encodeURIComponent(String(aclId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the access control list permission list.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} aclId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsAclsPermissionsList: async (appLabel: string, modelName: string, objectId: string, aclId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appLabel' is not null or undefined
            assertParamExists('objectsAclsPermissionsList', 'appLabel', appLabel)
            // verify required parameter 'modelName' is not null or undefined
            assertParamExists('objectsAclsPermissionsList', 'modelName', modelName)
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists('objectsAclsPermissionsList', 'objectId', objectId)
            // verify required parameter 'aclId' is not null or undefined
            assertParamExists('objectsAclsPermissionsList', 'aclId', aclId)
            const localVarPath = `/objects/{app_label}/{model_name}/{object_id}/acls/{acl_id}/permissions/`
                .replace(`{${"app_label"}}`, encodeURIComponent(String(appLabel)))
                .replace(`{${"model_name"}}`, encodeURIComponent(String(modelName)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)))
                .replace(`{${"acl_id"}}`, encodeURIComponent(String(aclId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a permission from an ACL.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} aclId 
         * @param {ACLPermissionRemove} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsAclsPermissionsRemoveCreate: async (appLabel: string, modelName: string, objectId: string, aclId: string, data: ACLPermissionRemove, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appLabel' is not null or undefined
            assertParamExists('objectsAclsPermissionsRemoveCreate', 'appLabel', appLabel)
            // verify required parameter 'modelName' is not null or undefined
            assertParamExists('objectsAclsPermissionsRemoveCreate', 'modelName', modelName)
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists('objectsAclsPermissionsRemoveCreate', 'objectId', objectId)
            // verify required parameter 'aclId' is not null or undefined
            assertParamExists('objectsAclsPermissionsRemoveCreate', 'aclId', aclId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('objectsAclsPermissionsRemoveCreate', 'data', data)
            const localVarPath = `/objects/{app_label}/{model_name}/{object_id}/acls/{acl_id}/permissions/remove/`
                .replace(`{${"app_label"}}`, encodeURIComponent(String(appLabel)))
                .replace(`{${"model_name"}}`, encodeURIComponent(String(modelName)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)))
                .replace(`{${"acl_id"}}`, encodeURIComponent(String(aclId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of the selected access control list.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} aclId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsAclsRead: async (appLabel: string, modelName: string, objectId: string, aclId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appLabel' is not null or undefined
            assertParamExists('objectsAclsRead', 'appLabel', appLabel)
            // verify required parameter 'modelName' is not null or undefined
            assertParamExists('objectsAclsRead', 'modelName', modelName)
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists('objectsAclsRead', 'objectId', objectId)
            // verify required parameter 'aclId' is not null or undefined
            assertParamExists('objectsAclsRead', 'aclId', aclId)
            const localVarPath = `/objects/{app_label}/{model_name}/{object_id}/acls/{acl_id}/`
                .replace(`{${"app_label"}}`, encodeURIComponent(String(appLabel)))
                .replace(`{${"model_name"}}`, encodeURIComponent(String(modelName)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)))
                .replace(`{${"acl_id"}}`, encodeURIComponent(String(aclId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the selected error log entry.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} errorLogPartitionEntryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsErrorsDelete: async (appLabel: string, modelName: string, objectId: string, errorLogPartitionEntryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appLabel' is not null or undefined
            assertParamExists('objectsErrorsDelete', 'appLabel', appLabel)
            // verify required parameter 'modelName' is not null or undefined
            assertParamExists('objectsErrorsDelete', 'modelName', modelName)
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists('objectsErrorsDelete', 'objectId', objectId)
            // verify required parameter 'errorLogPartitionEntryId' is not null or undefined
            assertParamExists('objectsErrorsDelete', 'errorLogPartitionEntryId', errorLogPartitionEntryId)
            const localVarPath = `/objects/{app_label}/{model_name}/{object_id}/errors/{error_log_partition_entry_id}/`
                .replace(`{${"app_label"}}`, encodeURIComponent(String(appLabel)))
                .replace(`{${"model_name"}}`, encodeURIComponent(String(modelName)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)))
                .replace(`{${"error_log_partition_entry_id"}}`, encodeURIComponent(String(errorLogPartitionEntryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the object\'s error log entries
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsErrorsList: async (appLabel: string, modelName: string, objectId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appLabel' is not null or undefined
            assertParamExists('objectsErrorsList', 'appLabel', appLabel)
            // verify required parameter 'modelName' is not null or undefined
            assertParamExists('objectsErrorsList', 'modelName', modelName)
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists('objectsErrorsList', 'objectId', objectId)
            const localVarPath = `/objects/{app_label}/{model_name}/{object_id}/errors/`
                .replace(`{${"app_label"}}`, encodeURIComponent(String(appLabel)))
                .replace(`{${"model_name"}}`, encodeURIComponent(String(modelName)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of the selected error log entry.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} errorLogPartitionEntryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsErrorsRead: async (appLabel: string, modelName: string, objectId: string, errorLogPartitionEntryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appLabel' is not null or undefined
            assertParamExists('objectsErrorsRead', 'appLabel', appLabel)
            // verify required parameter 'modelName' is not null or undefined
            assertParamExists('objectsErrorsRead', 'modelName', modelName)
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists('objectsErrorsRead', 'objectId', objectId)
            // verify required parameter 'errorLogPartitionEntryId' is not null or undefined
            assertParamExists('objectsErrorsRead', 'errorLogPartitionEntryId', errorLogPartitionEntryId)
            const localVarPath = `/objects/{app_label}/{model_name}/{object_id}/errors/{error_log_partition_entry_id}/`
                .replace(`{${"app_label"}}`, encodeURIComponent(String(appLabel)))
                .replace(`{${"model_name"}}`, encodeURIComponent(String(modelName)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)))
                .replace(`{${"error_log_partition_entry_id"}}`, encodeURIComponent(String(errorLogPartitionEntryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of events for the specified object.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsEventsList: async (appLabel: string, modelName: string, objectId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appLabel' is not null or undefined
            assertParamExists('objectsEventsList', 'appLabel', appLabel)
            // verify required parameter 'modelName' is not null or undefined
            assertParamExists('objectsEventsList', 'modelName', modelName)
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists('objectsEventsList', 'objectId', objectId)
            const localVarPath = `/objects/{app_label}/{model_name}/{object_id}/events/`
                .replace(`{${"app_label"}}`, encodeURIComponent(String(appLabel)))
                .replace(`{${"model_name"}}`, encodeURIComponent(String(modelName)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an image representation of the selected content object.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsImageRead: async (appLabel: string, modelName: string, objectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appLabel' is not null or undefined
            assertParamExists('objectsImageRead', 'appLabel', appLabel)
            // verify required parameter 'modelName' is not null or undefined
            assertParamExists('objectsImageRead', 'modelName', modelName)
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists('objectsImageRead', 'objectId', objectId)
            const localVarPath = `/objects/{app_label}/{model_name}/{object_id}/image/`
                .replace(`{${"app_label"}}`, encodeURIComponent(String(appLabel)))
                .replace(`{${"model_name"}}`, encodeURIComponent(String(modelName)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send an object as attachment via email.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {MailingProfileAction} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsMailingAttachmentCreate: async (appLabel: string, modelName: string, objectId: string, data: MailingProfileAction, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appLabel' is not null or undefined
            assertParamExists('objectsMailingAttachmentCreate', 'appLabel', appLabel)
            // verify required parameter 'modelName' is not null or undefined
            assertParamExists('objectsMailingAttachmentCreate', 'modelName', modelName)
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists('objectsMailingAttachmentCreate', 'objectId', objectId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('objectsMailingAttachmentCreate', 'data', data)
            const localVarPath = `/objects/{app_label}/{model_name}/{object_id}/mailing/attachment/`
                .replace(`{${"app_label"}}`, encodeURIComponent(String(appLabel)))
                .replace(`{${"model_name"}}`, encodeURIComponent(String(modelName)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send an object link via email.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {MailingProfileAction} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsMailingLinkCreate: async (appLabel: string, modelName: string, objectId: string, data: MailingProfileAction, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appLabel' is not null or undefined
            assertParamExists('objectsMailingLinkCreate', 'appLabel', appLabel)
            // verify required parameter 'modelName' is not null or undefined
            assertParamExists('objectsMailingLinkCreate', 'modelName', modelName)
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists('objectsMailingLinkCreate', 'objectId', objectId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('objectsMailingLinkCreate', 'data', data)
            const localVarPath = `/objects/{app_label}/{model_name}/{object_id}/mailing/link/`
                .replace(`{${"app_label"}}`, encodeURIComponent(String(appLabel)))
                .replace(`{${"model_name"}}`, encodeURIComponent(String(modelName)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the available permissions for a class.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsPermissionsList: async (appLabel: string, modelName: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appLabel' is not null or undefined
            assertParamExists('objectsPermissionsList', 'appLabel', appLabel)
            // verify required parameter 'modelName' is not null or undefined
            assertParamExists('objectsPermissionsList', 'modelName', modelName)
            const localVarPath = `/objects/{app_label}/{model_name}/permissions/`
                .replace(`{${"app_label"}}`, encodeURIComponent(String(appLabel)))
                .replace(`{${"model_name"}}`, encodeURIComponent(String(modelName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Interactive inspection of object properties.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {ObjectTemplateSandbox} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxCreate: async (appLabel: string, modelName: string, objectId: string, data: ObjectTemplateSandbox, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appLabel' is not null or undefined
            assertParamExists('objectsSandboxCreate', 'appLabel', appLabel)
            // verify required parameter 'modelName' is not null or undefined
            assertParamExists('objectsSandboxCreate', 'modelName', modelName)
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists('objectsSandboxCreate', 'objectId', objectId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('objectsSandboxCreate', 'data', data)
            const localVarPath = `/objects/{app_label}/{model_name}/{object_id}/sandbox/`
                .replace(`{${"app_label"}}`, encodeURIComponent(String(appLabel)))
                .replace(`{${"model_name"}}`, encodeURIComponent(String(modelName)))
                .replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectsApi - functional programming interface
 * @export
 */
export const ObjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new access control list for the selected object.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {ACL} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsAclsCreate(appLabel: string, modelName: string, objectId: string, data: ACL, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ACL>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsAclsCreate(appLabel, modelName, objectId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectsApi.objectsAclsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete the selected access control list.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} aclId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsAclsDelete(appLabel: string, modelName: string, objectId: string, aclId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsAclsDelete(appLabel, modelName, objectId, aclId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectsApi.objectsAclsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the object\'s access control lists
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsAclsList(appLabel: string, modelName: string, objectId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectsAclsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsAclsList(appLabel, modelName, objectId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectsApi.objectsAclsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add a permission to an ACL.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} aclId 
         * @param {ACLPermissionAdd} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsAclsPermissionsAddCreate(appLabel: string, modelName: string, objectId: string, aclId: string, data: ACLPermissionAdd, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ACLPermissionAdd>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsAclsPermissionsAddCreate(appLabel, modelName, objectId, aclId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectsApi.objectsAclsPermissionsAddCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add a new permission to the selected access control list.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} aclId 
         * @param {Permission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsAclsPermissionsCreate(appLabel: string, modelName: string, objectId: string, aclId: string, data: Permission, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Permission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsAclsPermissionsCreate(appLabel, modelName, objectId, aclId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectsApi.objectsAclsPermissionsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the access control list permission list.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} aclId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsAclsPermissionsList(appLabel: string, modelName: string, objectId: string, aclId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectsPermissionsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsAclsPermissionsList(appLabel, modelName, objectId, aclId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectsApi.objectsAclsPermissionsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove a permission from an ACL.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} aclId 
         * @param {ACLPermissionRemove} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsAclsPermissionsRemoveCreate(appLabel: string, modelName: string, objectId: string, aclId: string, data: ACLPermissionRemove, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ACLPermissionRemove>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsAclsPermissionsRemoveCreate(appLabel, modelName, objectId, aclId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectsApi.objectsAclsPermissionsRemoveCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the details of the selected access control list.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} aclId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsAclsRead(appLabel: string, modelName: string, objectId: string, aclId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ACL>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsAclsRead(appLabel, modelName, objectId, aclId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectsApi.objectsAclsRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete the selected error log entry.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} errorLogPartitionEntryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsErrorsDelete(appLabel: string, modelName: string, objectId: string, errorLogPartitionEntryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsErrorsDelete(appLabel, modelName, objectId, errorLogPartitionEntryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectsApi.objectsErrorsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the object\'s error log entries
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsErrorsList(appLabel: string, modelName: string, objectId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectsErrorsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsErrorsList(appLabel, modelName, objectId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectsApi.objectsErrorsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the details of the selected error log entry.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} errorLogPartitionEntryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsErrorsRead(appLabel: string, modelName: string, objectId: string, errorLogPartitionEntryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorLogPartitionEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsErrorsRead(appLabel, modelName, objectId, errorLogPartitionEntryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectsApi.objectsErrorsRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return a list of events for the specified object.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsEventsList(appLabel: string, modelName: string, objectId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsEventsList(appLabel, modelName, objectId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectsApi.objectsEventsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns an image representation of the selected content object.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsImageRead(appLabel: string, modelName: string, objectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsImageRead(appLabel, modelName, objectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectsApi.objectsImageRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send an object as attachment via email.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {MailingProfileAction} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsMailingAttachmentCreate(appLabel: string, modelName: string, objectId: string, data: MailingProfileAction, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MailingProfileAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsMailingAttachmentCreate(appLabel, modelName, objectId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectsApi.objectsMailingAttachmentCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send an object link via email.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {MailingProfileAction} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsMailingLinkCreate(appLabel: string, modelName: string, objectId: string, data: MailingProfileAction, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MailingProfileAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsMailingLinkCreate(appLabel, modelName, objectId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectsApi.objectsMailingLinkCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the available permissions for a class.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsPermissionsList(appLabel: string, modelName: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectsPermissionsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsPermissionsList(appLabel, modelName, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectsApi.objectsPermissionsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Interactive inspection of object properties.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {ObjectTemplateSandbox} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsSandboxCreate(appLabel: string, modelName: string, objectId: string, data: ObjectTemplateSandbox, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectTemplateSandbox>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsSandboxCreate(appLabel, modelName, objectId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectsApi.objectsSandboxCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ObjectsApi - factory interface
 * @export
 */
export const ObjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectsApiFp(configuration)
    return {
        /**
         * Create a new access control list for the selected object.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {ACL} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsAclsCreate(appLabel: string, modelName: string, objectId: string, data: ACL, options?: RawAxiosRequestConfig): AxiosPromise<ACL> {
            return localVarFp.objectsAclsCreate(appLabel, modelName, objectId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the selected access control list.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} aclId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsAclsDelete(appLabel: string, modelName: string, objectId: string, aclId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsAclsDelete(appLabel, modelName, objectId, aclId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the object\'s access control lists
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsAclsList(appLabel: string, modelName: string, objectId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<ObjectsAclsList200Response> {
            return localVarFp.objectsAclsList(appLabel, modelName, objectId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a permission to an ACL.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} aclId 
         * @param {ACLPermissionAdd} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsAclsPermissionsAddCreate(appLabel: string, modelName: string, objectId: string, aclId: string, data: ACLPermissionAdd, options?: RawAxiosRequestConfig): AxiosPromise<ACLPermissionAdd> {
            return localVarFp.objectsAclsPermissionsAddCreate(appLabel, modelName, objectId, aclId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new permission to the selected access control list.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} aclId 
         * @param {Permission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsAclsPermissionsCreate(appLabel: string, modelName: string, objectId: string, aclId: string, data: Permission, options?: RawAxiosRequestConfig): AxiosPromise<Permission> {
            return localVarFp.objectsAclsPermissionsCreate(appLabel, modelName, objectId, aclId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the access control list permission list.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} aclId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsAclsPermissionsList(appLabel: string, modelName: string, objectId: string, aclId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<ObjectsPermissionsList200Response> {
            return localVarFp.objectsAclsPermissionsList(appLabel, modelName, objectId, aclId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a permission from an ACL.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} aclId 
         * @param {ACLPermissionRemove} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsAclsPermissionsRemoveCreate(appLabel: string, modelName: string, objectId: string, aclId: string, data: ACLPermissionRemove, options?: RawAxiosRequestConfig): AxiosPromise<ACLPermissionRemove> {
            return localVarFp.objectsAclsPermissionsRemoveCreate(appLabel, modelName, objectId, aclId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of the selected access control list.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} aclId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsAclsRead(appLabel: string, modelName: string, objectId: string, aclId: string, options?: RawAxiosRequestConfig): AxiosPromise<ACL> {
            return localVarFp.objectsAclsRead(appLabel, modelName, objectId, aclId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the selected error log entry.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} errorLogPartitionEntryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsErrorsDelete(appLabel: string, modelName: string, objectId: string, errorLogPartitionEntryId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsErrorsDelete(appLabel, modelName, objectId, errorLogPartitionEntryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the object\'s error log entries
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsErrorsList(appLabel: string, modelName: string, objectId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<ObjectsErrorsList200Response> {
            return localVarFp.objectsErrorsList(appLabel, modelName, objectId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of the selected error log entry.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} errorLogPartitionEntryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsErrorsRead(appLabel: string, modelName: string, objectId: string, errorLogPartitionEntryId: string, options?: RawAxiosRequestConfig): AxiosPromise<ErrorLogPartitionEntry> {
            return localVarFp.objectsErrorsRead(appLabel, modelName, objectId, errorLogPartitionEntryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of events for the specified object.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsEventsList(appLabel: string, modelName: string, objectId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<EventsList200Response> {
            return localVarFp.objectsEventsList(appLabel, modelName, objectId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an image representation of the selected content object.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsImageRead(appLabel: string, modelName: string, objectId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsImageRead(appLabel, modelName, objectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Send an object as attachment via email.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {MailingProfileAction} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsMailingAttachmentCreate(appLabel: string, modelName: string, objectId: string, data: MailingProfileAction, options?: RawAxiosRequestConfig): AxiosPromise<MailingProfileAction> {
            return localVarFp.objectsMailingAttachmentCreate(appLabel, modelName, objectId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Send an object link via email.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {MailingProfileAction} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsMailingLinkCreate(appLabel: string, modelName: string, objectId: string, data: MailingProfileAction, options?: RawAxiosRequestConfig): AxiosPromise<MailingProfileAction> {
            return localVarFp.objectsMailingLinkCreate(appLabel, modelName, objectId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the available permissions for a class.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsPermissionsList(appLabel: string, modelName: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<ObjectsPermissionsList200Response> {
            return localVarFp.objectsPermissionsList(appLabel, modelName, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Interactive inspection of object properties.
         * @param {string} appLabel 
         * @param {string} modelName 
         * @param {string} objectId 
         * @param {ObjectTemplateSandbox} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxCreate(appLabel: string, modelName: string, objectId: string, data: ObjectTemplateSandbox, options?: RawAxiosRequestConfig): AxiosPromise<ObjectTemplateSandbox> {
            return localVarFp.objectsSandboxCreate(appLabel, modelName, objectId, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectsApi - object-oriented interface
 * @export
 * @class ObjectsApi
 * @extends {BaseAPI}
 */
export class ObjectsApi extends BaseAPI {
    /**
     * Create a new access control list for the selected object.
     * @param {string} appLabel 
     * @param {string} modelName 
     * @param {string} objectId 
     * @param {ACL} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public objectsAclsCreate(appLabel: string, modelName: string, objectId: string, data: ACL, options?: RawAxiosRequestConfig) {
        return ObjectsApiFp(this.configuration).objectsAclsCreate(appLabel, modelName, objectId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the selected access control list.
     * @param {string} appLabel 
     * @param {string} modelName 
     * @param {string} objectId 
     * @param {string} aclId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public objectsAclsDelete(appLabel: string, modelName: string, objectId: string, aclId: string, options?: RawAxiosRequestConfig) {
        return ObjectsApiFp(this.configuration).objectsAclsDelete(appLabel, modelName, objectId, aclId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the object\'s access control lists
     * @param {string} appLabel 
     * @param {string} modelName 
     * @param {string} objectId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public objectsAclsList(appLabel: string, modelName: string, objectId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return ObjectsApiFp(this.configuration).objectsAclsList(appLabel, modelName, objectId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a permission to an ACL.
     * @param {string} appLabel 
     * @param {string} modelName 
     * @param {string} objectId 
     * @param {string} aclId 
     * @param {ACLPermissionAdd} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public objectsAclsPermissionsAddCreate(appLabel: string, modelName: string, objectId: string, aclId: string, data: ACLPermissionAdd, options?: RawAxiosRequestConfig) {
        return ObjectsApiFp(this.configuration).objectsAclsPermissionsAddCreate(appLabel, modelName, objectId, aclId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new permission to the selected access control list.
     * @param {string} appLabel 
     * @param {string} modelName 
     * @param {string} objectId 
     * @param {string} aclId 
     * @param {Permission} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public objectsAclsPermissionsCreate(appLabel: string, modelName: string, objectId: string, aclId: string, data: Permission, options?: RawAxiosRequestConfig) {
        return ObjectsApiFp(this.configuration).objectsAclsPermissionsCreate(appLabel, modelName, objectId, aclId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the access control list permission list.
     * @param {string} appLabel 
     * @param {string} modelName 
     * @param {string} objectId 
     * @param {string} aclId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public objectsAclsPermissionsList(appLabel: string, modelName: string, objectId: string, aclId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return ObjectsApiFp(this.configuration).objectsAclsPermissionsList(appLabel, modelName, objectId, aclId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a permission from an ACL.
     * @param {string} appLabel 
     * @param {string} modelName 
     * @param {string} objectId 
     * @param {string} aclId 
     * @param {ACLPermissionRemove} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public objectsAclsPermissionsRemoveCreate(appLabel: string, modelName: string, objectId: string, aclId: string, data: ACLPermissionRemove, options?: RawAxiosRequestConfig) {
        return ObjectsApiFp(this.configuration).objectsAclsPermissionsRemoveCreate(appLabel, modelName, objectId, aclId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of the selected access control list.
     * @param {string} appLabel 
     * @param {string} modelName 
     * @param {string} objectId 
     * @param {string} aclId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public objectsAclsRead(appLabel: string, modelName: string, objectId: string, aclId: string, options?: RawAxiosRequestConfig) {
        return ObjectsApiFp(this.configuration).objectsAclsRead(appLabel, modelName, objectId, aclId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the selected error log entry.
     * @param {string} appLabel 
     * @param {string} modelName 
     * @param {string} objectId 
     * @param {string} errorLogPartitionEntryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public objectsErrorsDelete(appLabel: string, modelName: string, objectId: string, errorLogPartitionEntryId: string, options?: RawAxiosRequestConfig) {
        return ObjectsApiFp(this.configuration).objectsErrorsDelete(appLabel, modelName, objectId, errorLogPartitionEntryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the object\'s error log entries
     * @param {string} appLabel 
     * @param {string} modelName 
     * @param {string} objectId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public objectsErrorsList(appLabel: string, modelName: string, objectId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return ObjectsApiFp(this.configuration).objectsErrorsList(appLabel, modelName, objectId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of the selected error log entry.
     * @param {string} appLabel 
     * @param {string} modelName 
     * @param {string} objectId 
     * @param {string} errorLogPartitionEntryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public objectsErrorsRead(appLabel: string, modelName: string, objectId: string, errorLogPartitionEntryId: string, options?: RawAxiosRequestConfig) {
        return ObjectsApiFp(this.configuration).objectsErrorsRead(appLabel, modelName, objectId, errorLogPartitionEntryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a list of events for the specified object.
     * @param {string} appLabel 
     * @param {string} modelName 
     * @param {string} objectId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public objectsEventsList(appLabel: string, modelName: string, objectId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return ObjectsApiFp(this.configuration).objectsEventsList(appLabel, modelName, objectId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an image representation of the selected content object.
     * @param {string} appLabel 
     * @param {string} modelName 
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public objectsImageRead(appLabel: string, modelName: string, objectId: string, options?: RawAxiosRequestConfig) {
        return ObjectsApiFp(this.configuration).objectsImageRead(appLabel, modelName, objectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send an object as attachment via email.
     * @param {string} appLabel 
     * @param {string} modelName 
     * @param {string} objectId 
     * @param {MailingProfileAction} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public objectsMailingAttachmentCreate(appLabel: string, modelName: string, objectId: string, data: MailingProfileAction, options?: RawAxiosRequestConfig) {
        return ObjectsApiFp(this.configuration).objectsMailingAttachmentCreate(appLabel, modelName, objectId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send an object link via email.
     * @param {string} appLabel 
     * @param {string} modelName 
     * @param {string} objectId 
     * @param {MailingProfileAction} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public objectsMailingLinkCreate(appLabel: string, modelName: string, objectId: string, data: MailingProfileAction, options?: RawAxiosRequestConfig) {
        return ObjectsApiFp(this.configuration).objectsMailingLinkCreate(appLabel, modelName, objectId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the available permissions for a class.
     * @param {string} appLabel 
     * @param {string} modelName 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public objectsPermissionsList(appLabel: string, modelName: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return ObjectsApiFp(this.configuration).objectsPermissionsList(appLabel, modelName, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Interactive inspection of object properties.
     * @param {string} appLabel 
     * @param {string} modelName 
     * @param {string} objectId 
     * @param {ObjectTemplateSandbox} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public objectsSandboxCreate(appLabel: string, modelName: string, objectId: string, data: ObjectTemplateSandbox, options?: RawAxiosRequestConfig) {
        return ObjectsApiFp(this.configuration).objectsSandboxCreate(appLabel, modelName, objectId, data, options).then((request) => request(this.axios, this.basePath));
    }
}

