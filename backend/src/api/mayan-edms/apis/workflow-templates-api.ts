/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CabinetsDocumentsList200Response } from '../models';
// @ts-ignore
import type { DocumentTypesList200Response } from '../models';
// @ts-ignore
import type { DocumentsWorkflowInstancesLogEntriesTransitionsList200Response } from '../models';
// @ts-ignore
import type { WorkflowTemplate } from '../models';
// @ts-ignore
import type { WorkflowTemplateDocumentTypeAdd } from '../models';
// @ts-ignore
import type { WorkflowTemplateDocumentTypeRemove } from '../models';
// @ts-ignore
import type { WorkflowTemplateState } from '../models';
// @ts-ignore
import type { WorkflowTemplateStateAction } from '../models';
// @ts-ignore
import type { WorkflowTemplateStateEscalation } from '../models';
// @ts-ignore
import type { WorkflowTemplateTransition } from '../models';
// @ts-ignore
import type { WorkflowTemplateTransitionTrigger } from '../models';
// @ts-ignore
import type { WorkflowTemplatesList200Response } from '../models';
// @ts-ignore
import type { WorkflowTemplatesStatesActionsList200Response } from '../models';
// @ts-ignore
import type { WorkflowTemplatesStatesEscalationsList200Response } from '../models';
// @ts-ignore
import type { WorkflowTemplatesStatesList200Response } from '../models';
// @ts-ignore
import type { WorkflowTemplatesTransitionsFieldsList200Response } from '../models';
// @ts-ignore
import type { WorkflowTemplatesTransitionsTriggersList200Response } from '../models';
// @ts-ignore
import type { WorkflowTransitionField } from '../models';
/**
 * WorkflowTemplatesApi - axios parameter creator
 * @export
 */
export const WorkflowTemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new workflow template.
         * @param {WorkflowTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesCreate: async (data: WorkflowTemplate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesCreate', 'data', data)
            const localVarPath = `/workflow_templates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the selected workflow template.
         * @param {string} workflowTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesDelete: async (workflowTemplateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesDelete', 'workflowTemplateId', workflowTemplateId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a document type to a workflow template.
         * @param {string} workflowTemplateId 
         * @param {WorkflowTemplateDocumentTypeAdd} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesDocumentTypesAddCreate: async (workflowTemplateId: string, data: WorkflowTemplateDocumentTypeAdd, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesDocumentTypesAddCreate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesDocumentTypesAddCreate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/document_types/add/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the document types attached to a workflow template.
         * @param {string} workflowTemplateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesDocumentTypesList: async (workflowTemplateId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesDocumentTypesList', 'workflowTemplateId', workflowTemplateId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/document_types/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a document type from a workflow template.
         * @param {string} workflowTemplateId 
         * @param {WorkflowTemplateDocumentTypeRemove} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesDocumentTypesRemoveCreate: async (workflowTemplateId: string, data: WorkflowTemplateDocumentTypeRemove, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesDocumentTypesRemoveCreate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesDocumentTypesRemoveCreate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/document_types/remove/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of all the document executing a specific workflow template.
         * @param {string} workflowTemplateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesDocumentsList: async (workflowTemplateId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesDocumentsList', 'workflowTemplateId', workflowTemplateId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/documents/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an image representation of the selected workflow template.
         * @param {string} workflowTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesImageRead: async (workflowTemplateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesImageRead', 'workflowTemplateId', workflowTemplateId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/image/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the workflow templates.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesList: async (ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workflow_templates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected workflow template.
         * @param {string} workflowTemplateId 
         * @param {WorkflowTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesPartialUpdate: async (workflowTemplateId: string, data: WorkflowTemplate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesPartialUpdate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesPartialUpdate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the details of the selected workflow template.
         * @param {string} workflowTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesRead: async (workflowTemplateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesRead', 'workflowTemplateId', workflowTemplateId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new workflow template state action.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {WorkflowTemplateStateAction} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesActionsCreate: async (workflowTemplateId: string, workflowTemplateStateId: string, data: WorkflowTemplateStateAction, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesActionsCreate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateStateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesActionsCreate', 'workflowTemplateStateId', workflowTemplateStateId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesStatesActionsCreate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/actions/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(workflowTemplateStateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the selected workflow template state action.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateActionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesActionsDelete: async (workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateActionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesActionsDelete', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateStateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesActionsDelete', 'workflowTemplateStateId', workflowTemplateStateId)
            // verify required parameter 'workflowTemplateStateActionId' is not null or undefined
            assertParamExists('workflowTemplatesStatesActionsDelete', 'workflowTemplateStateActionId', workflowTemplateStateActionId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/actions/{workflow_template_state_action_id}/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(workflowTemplateStateId)))
                .replace(`{${"workflow_template_state_action_id"}}`, encodeURIComponent(String(workflowTemplateStateActionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the workflow template state actions.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesActionsList: async (workflowTemplateId: string, workflowTemplateStateId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesActionsList', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateStateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesActionsList', 'workflowTemplateStateId', workflowTemplateStateId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/actions/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(workflowTemplateStateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected workflow template state action.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateActionId 
         * @param {WorkflowTemplateStateAction} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesActionsPartialUpdate: async (workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateActionId: string, data: WorkflowTemplateStateAction, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesActionsPartialUpdate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateStateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesActionsPartialUpdate', 'workflowTemplateStateId', workflowTemplateStateId)
            // verify required parameter 'workflowTemplateStateActionId' is not null or undefined
            assertParamExists('workflowTemplatesStatesActionsPartialUpdate', 'workflowTemplateStateActionId', workflowTemplateStateActionId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesStatesActionsPartialUpdate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/actions/{workflow_template_state_action_id}/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(workflowTemplateStateId)))
                .replace(`{${"workflow_template_state_action_id"}}`, encodeURIComponent(String(workflowTemplateStateActionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the details of the selected workflow template state action.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateActionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesActionsRead: async (workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateActionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesActionsRead', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateStateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesActionsRead', 'workflowTemplateStateId', workflowTemplateStateId)
            // verify required parameter 'workflowTemplateStateActionId' is not null or undefined
            assertParamExists('workflowTemplatesStatesActionsRead', 'workflowTemplateStateActionId', workflowTemplateStateActionId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/actions/{workflow_template_state_action_id}/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(workflowTemplateStateId)))
                .replace(`{${"workflow_template_state_action_id"}}`, encodeURIComponent(String(workflowTemplateStateActionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected workflow template state action.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateActionId 
         * @param {WorkflowTemplateStateAction} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesActionsUpdate: async (workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateActionId: string, data: WorkflowTemplateStateAction, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesActionsUpdate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateStateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesActionsUpdate', 'workflowTemplateStateId', workflowTemplateStateId)
            // verify required parameter 'workflowTemplateStateActionId' is not null or undefined
            assertParamExists('workflowTemplatesStatesActionsUpdate', 'workflowTemplateStateActionId', workflowTemplateStateActionId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesStatesActionsUpdate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/actions/{workflow_template_state_action_id}/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(workflowTemplateStateId)))
                .replace(`{${"workflow_template_state_action_id"}}`, encodeURIComponent(String(workflowTemplateStateActionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new workflow template state.
         * @param {string} workflowTemplateId 
         * @param {WorkflowTemplateState} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesCreate: async (workflowTemplateId: string, data: WorkflowTemplateState, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesCreate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesStatesCreate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/states/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the selected workflow template state.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesDelete: async (workflowTemplateId: string, workflowTemplateStateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesDelete', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateStateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesDelete', 'workflowTemplateStateId', workflowTemplateStateId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(workflowTemplateStateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of all the documents at a specific workflow template state.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesDocumentsList: async (workflowTemplateId: string, workflowTemplateStateId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesDocumentsList', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateStateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesDocumentsList', 'workflowTemplateStateId', workflowTemplateStateId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/documents/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(workflowTemplateStateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new workflow template state escalation.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {WorkflowTemplateStateEscalation} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesEscalationsCreate: async (workflowTemplateId: string, workflowTemplateStateId: string, data: WorkflowTemplateStateEscalation, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesEscalationsCreate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateStateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesEscalationsCreate', 'workflowTemplateStateId', workflowTemplateStateId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesStatesEscalationsCreate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/escalations/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(workflowTemplateStateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the selected workflow template state escalation.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateEscalationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesEscalationsDelete: async (workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateEscalationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesEscalationsDelete', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateStateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesEscalationsDelete', 'workflowTemplateStateId', workflowTemplateStateId)
            // verify required parameter 'workflowTemplateStateEscalationId' is not null or undefined
            assertParamExists('workflowTemplatesStatesEscalationsDelete', 'workflowTemplateStateEscalationId', workflowTemplateStateEscalationId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/escalations/{workflow_template_state_escalation_id}/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(workflowTemplateStateId)))
                .replace(`{${"workflow_template_state_escalation_id"}}`, encodeURIComponent(String(workflowTemplateStateEscalationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the workflow template state escalations.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesEscalationsList: async (workflowTemplateId: string, workflowTemplateStateId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesEscalationsList', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateStateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesEscalationsList', 'workflowTemplateStateId', workflowTemplateStateId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/escalations/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(workflowTemplateStateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected workflow template state escalation.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateEscalationId 
         * @param {WorkflowTemplateStateEscalation} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesEscalationsPartialUpdate: async (workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateEscalationId: string, data: WorkflowTemplateStateEscalation, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesEscalationsPartialUpdate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateStateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesEscalationsPartialUpdate', 'workflowTemplateStateId', workflowTemplateStateId)
            // verify required parameter 'workflowTemplateStateEscalationId' is not null or undefined
            assertParamExists('workflowTemplatesStatesEscalationsPartialUpdate', 'workflowTemplateStateEscalationId', workflowTemplateStateEscalationId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesStatesEscalationsPartialUpdate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/escalations/{workflow_template_state_escalation_id}/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(workflowTemplateStateId)))
                .replace(`{${"workflow_template_state_escalation_id"}}`, encodeURIComponent(String(workflowTemplateStateEscalationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the details of the selected workflow template state escalation.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateEscalationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesEscalationsRead: async (workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateEscalationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesEscalationsRead', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateStateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesEscalationsRead', 'workflowTemplateStateId', workflowTemplateStateId)
            // verify required parameter 'workflowTemplateStateEscalationId' is not null or undefined
            assertParamExists('workflowTemplatesStatesEscalationsRead', 'workflowTemplateStateEscalationId', workflowTemplateStateEscalationId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/escalations/{workflow_template_state_escalation_id}/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(workflowTemplateStateId)))
                .replace(`{${"workflow_template_state_escalation_id"}}`, encodeURIComponent(String(workflowTemplateStateEscalationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected workflow template state escalation.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateEscalationId 
         * @param {WorkflowTemplateStateEscalation} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesEscalationsUpdate: async (workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateEscalationId: string, data: WorkflowTemplateStateEscalation, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesEscalationsUpdate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateStateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesEscalationsUpdate', 'workflowTemplateStateId', workflowTemplateStateId)
            // verify required parameter 'workflowTemplateStateEscalationId' is not null or undefined
            assertParamExists('workflowTemplatesStatesEscalationsUpdate', 'workflowTemplateStateEscalationId', workflowTemplateStateEscalationId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesStatesEscalationsUpdate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/escalations/{workflow_template_state_escalation_id}/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(workflowTemplateStateId)))
                .replace(`{${"workflow_template_state_escalation_id"}}`, encodeURIComponent(String(workflowTemplateStateEscalationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the workflow template states.
         * @param {string} workflowTemplateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesList: async (workflowTemplateId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesList', 'workflowTemplateId', workflowTemplateId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/states/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected workflow template state.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {WorkflowTemplateState} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesPartialUpdate: async (workflowTemplateId: string, workflowTemplateStateId: string, data: WorkflowTemplateState, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesPartialUpdate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateStateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesPartialUpdate', 'workflowTemplateStateId', workflowTemplateStateId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesStatesPartialUpdate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(workflowTemplateStateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the details of the selected workflow template state.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesRead: async (workflowTemplateId: string, workflowTemplateStateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesRead', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateStateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesRead', 'workflowTemplateStateId', workflowTemplateStateId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(workflowTemplateStateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected workflow template state.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {WorkflowTemplateState} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesUpdate: async (workflowTemplateId: string, workflowTemplateStateId: string, data: WorkflowTemplateState, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesUpdate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateStateId' is not null or undefined
            assertParamExists('workflowTemplatesStatesUpdate', 'workflowTemplateStateId', workflowTemplateStateId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesStatesUpdate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(workflowTemplateStateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new workflow template transition.
         * @param {string} workflowTemplateId 
         * @param {WorkflowTemplateTransition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsCreate: async (workflowTemplateId: string, data: WorkflowTemplateTransition, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsCreate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsCreate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/transitions/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the selected workflow template transition.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsDelete: async (workflowTemplateId: string, workflowTemplateTransitionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsDelete', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateTransitionId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsDelete', 'workflowTemplateTransitionId', workflowTemplateTransitionId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(workflowTemplateTransitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new workflow template transition field.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {WorkflowTransitionField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsFieldsCreate: async (workflowTemplateId: string, workflowTemplateTransitionId: string, data: WorkflowTransitionField, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsFieldsCreate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateTransitionId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsFieldsCreate', 'workflowTemplateTransitionId', workflowTemplateTransitionId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsFieldsCreate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/fields/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(workflowTemplateTransitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the selected workflow template transition field.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionFieldId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsFieldsDelete: async (workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionFieldId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsFieldsDelete', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateTransitionId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsFieldsDelete', 'workflowTemplateTransitionId', workflowTemplateTransitionId)
            // verify required parameter 'workflowTemplateTransitionFieldId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsFieldsDelete', 'workflowTemplateTransitionFieldId', workflowTemplateTransitionFieldId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/fields/{workflow_template_transition_field_id}`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(workflowTemplateTransitionId)))
                .replace(`{${"workflow_template_transition_field_id"}}`, encodeURIComponent(String(workflowTemplateTransitionFieldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the workflow template transition fields.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsFieldsList: async (workflowTemplateId: string, workflowTemplateTransitionId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsFieldsList', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateTransitionId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsFieldsList', 'workflowTemplateTransitionId', workflowTemplateTransitionId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/fields/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(workflowTemplateTransitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected workflow template transition field.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionFieldId 
         * @param {WorkflowTransitionField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsFieldsPartialUpdate: async (workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionFieldId: string, data: WorkflowTransitionField, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsFieldsPartialUpdate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateTransitionId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsFieldsPartialUpdate', 'workflowTemplateTransitionId', workflowTemplateTransitionId)
            // verify required parameter 'workflowTemplateTransitionFieldId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsFieldsPartialUpdate', 'workflowTemplateTransitionFieldId', workflowTemplateTransitionFieldId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsFieldsPartialUpdate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/fields/{workflow_template_transition_field_id}`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(workflowTemplateTransitionId)))
                .replace(`{${"workflow_template_transition_field_id"}}`, encodeURIComponent(String(workflowTemplateTransitionFieldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the details of the selected workflow template transition field.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionFieldId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsFieldsRead: async (workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionFieldId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsFieldsRead', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateTransitionId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsFieldsRead', 'workflowTemplateTransitionId', workflowTemplateTransitionId)
            // verify required parameter 'workflowTemplateTransitionFieldId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsFieldsRead', 'workflowTemplateTransitionFieldId', workflowTemplateTransitionFieldId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/fields/{workflow_template_transition_field_id}`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(workflowTemplateTransitionId)))
                .replace(`{${"workflow_template_transition_field_id"}}`, encodeURIComponent(String(workflowTemplateTransitionFieldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected workflow template transition field.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionFieldId 
         * @param {WorkflowTransitionField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsFieldsUpdate: async (workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionFieldId: string, data: WorkflowTransitionField, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsFieldsUpdate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateTransitionId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsFieldsUpdate', 'workflowTemplateTransitionId', workflowTemplateTransitionId)
            // verify required parameter 'workflowTemplateTransitionFieldId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsFieldsUpdate', 'workflowTemplateTransitionFieldId', workflowTemplateTransitionFieldId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsFieldsUpdate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/fields/{workflow_template_transition_field_id}`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(workflowTemplateTransitionId)))
                .replace(`{${"workflow_template_transition_field_id"}}`, encodeURIComponent(String(workflowTemplateTransitionFieldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the workflow template transitions.
         * @param {string} workflowTemplateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsList: async (workflowTemplateId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsList', 'workflowTemplateId', workflowTemplateId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/transitions/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected workflow template transition.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {WorkflowTemplateTransition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsPartialUpdate: async (workflowTemplateId: string, workflowTemplateTransitionId: string, data: WorkflowTemplateTransition, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsPartialUpdate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateTransitionId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsPartialUpdate', 'workflowTemplateTransitionId', workflowTemplateTransitionId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsPartialUpdate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(workflowTemplateTransitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the details of the selected workflow template transition.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsRead: async (workflowTemplateId: string, workflowTemplateTransitionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsRead', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateTransitionId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsRead', 'workflowTemplateTransitionId', workflowTemplateTransitionId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(workflowTemplateTransitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new workflow template transition trigger.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {WorkflowTemplateTransitionTrigger} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsTriggersCreate: async (workflowTemplateId: string, workflowTemplateTransitionId: string, data: WorkflowTemplateTransitionTrigger, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsTriggersCreate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateTransitionId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsTriggersCreate', 'workflowTemplateTransitionId', workflowTemplateTransitionId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsTriggersCreate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/triggers/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(workflowTemplateTransitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the selected workflow template transition trigger.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionTriggerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsTriggersDelete: async (workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionTriggerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsTriggersDelete', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateTransitionId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsTriggersDelete', 'workflowTemplateTransitionId', workflowTemplateTransitionId)
            // verify required parameter 'workflowTemplateTransitionTriggerId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsTriggersDelete', 'workflowTemplateTransitionTriggerId', workflowTemplateTransitionTriggerId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/triggers/{workflow_template_transition_trigger_id}`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(workflowTemplateTransitionId)))
                .replace(`{${"workflow_template_transition_trigger_id"}}`, encodeURIComponent(String(workflowTemplateTransitionTriggerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the workflow template transition triggers.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsTriggersList: async (workflowTemplateId: string, workflowTemplateTransitionId: string, ordering?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsTriggersList', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateTransitionId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsTriggersList', 'workflowTemplateTransitionId', workflowTemplateTransitionId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/triggers/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(workflowTemplateTransitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['_ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected workflow template transition trigger.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionTriggerId 
         * @param {WorkflowTemplateTransitionTrigger} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsTriggersPartialUpdate: async (workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionTriggerId: string, data: WorkflowTemplateTransitionTrigger, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsTriggersPartialUpdate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateTransitionId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsTriggersPartialUpdate', 'workflowTemplateTransitionId', workflowTemplateTransitionId)
            // verify required parameter 'workflowTemplateTransitionTriggerId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsTriggersPartialUpdate', 'workflowTemplateTransitionTriggerId', workflowTemplateTransitionTriggerId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsTriggersPartialUpdate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/triggers/{workflow_template_transition_trigger_id}`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(workflowTemplateTransitionId)))
                .replace(`{${"workflow_template_transition_trigger_id"}}`, encodeURIComponent(String(workflowTemplateTransitionTriggerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the details of the selected workflow template transition trigger.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionTriggerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsTriggersRead: async (workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionTriggerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsTriggersRead', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateTransitionId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsTriggersRead', 'workflowTemplateTransitionId', workflowTemplateTransitionId)
            // verify required parameter 'workflowTemplateTransitionTriggerId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsTriggersRead', 'workflowTemplateTransitionTriggerId', workflowTemplateTransitionTriggerId)
            const localVarPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/triggers/{workflow_template_transition_trigger_id}`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(workflowTemplateTransitionId)))
                .replace(`{${"workflow_template_transition_trigger_id"}}`, encodeURIComponent(String(workflowTemplateTransitionTriggerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected workflow template transition trigger.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionTriggerId 
         * @param {WorkflowTemplateTransitionTrigger} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsTriggersUpdate: async (workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionTriggerId: string, data: WorkflowTemplateTransitionTrigger, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsTriggersUpdate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateTransitionId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsTriggersUpdate', 'workflowTemplateTransitionId', workflowTemplateTransitionId)
            // verify required parameter 'workflowTemplateTransitionTriggerId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsTriggersUpdate', 'workflowTemplateTransitionTriggerId', workflowTemplateTransitionTriggerId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsTriggersUpdate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/triggers/{workflow_template_transition_trigger_id}`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(workflowTemplateTransitionId)))
                .replace(`{${"workflow_template_transition_trigger_id"}}`, encodeURIComponent(String(workflowTemplateTransitionTriggerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected workflow template transition.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {WorkflowTemplateTransition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsUpdate: async (workflowTemplateId: string, workflowTemplateTransitionId: string, data: WorkflowTemplateTransition, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsUpdate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'workflowTemplateTransitionId' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsUpdate', 'workflowTemplateTransitionId', workflowTemplateTransitionId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesTransitionsUpdate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)))
                .replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(workflowTemplateTransitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit the selected workflow template.
         * @param {string} workflowTemplateId 
         * @param {WorkflowTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesUpdate: async (workflowTemplateId: string, data: WorkflowTemplate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowTemplateId' is not null or undefined
            assertParamExists('workflowTemplatesUpdate', 'workflowTemplateId', workflowTemplateId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('workflowTemplatesUpdate', 'data', data)
            const localVarPath = `/workflow_templates/{workflow_template_id}/`
                .replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(workflowTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowTemplatesApi - functional programming interface
 * @export
 */
export const WorkflowTemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkflowTemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new workflow template.
         * @param {WorkflowTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesCreate(data: WorkflowTemplate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesCreate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete the selected workflow template.
         * @param {string} workflowTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesDelete(workflowTemplateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesDelete(workflowTemplateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add a document type to a workflow template.
         * @param {string} workflowTemplateId 
         * @param {WorkflowTemplateDocumentTypeAdd} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesDocumentTypesAddCreate(workflowTemplateId: string, data: WorkflowTemplateDocumentTypeAdd, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateDocumentTypeAdd>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesDocumentTypesAddCreate(workflowTemplateId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesDocumentTypesAddCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the document types attached to a workflow template.
         * @param {string} workflowTemplateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesDocumentTypesList(workflowTemplateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesDocumentTypesList(workflowTemplateId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesDocumentTypesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove a document type from a workflow template.
         * @param {string} workflowTemplateId 
         * @param {WorkflowTemplateDocumentTypeRemove} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesDocumentTypesRemoveCreate(workflowTemplateId: string, data: WorkflowTemplateDocumentTypeRemove, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateDocumentTypeRemove>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesDocumentTypesRemoveCreate(workflowTemplateId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesDocumentTypesRemoveCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return a list of all the document executing a specific workflow template.
         * @param {string} workflowTemplateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesDocumentsList(workflowTemplateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CabinetsDocumentsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesDocumentsList(workflowTemplateId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesDocumentsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns an image representation of the selected workflow template.
         * @param {string} workflowTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesImageRead(workflowTemplateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesImageRead(workflowTemplateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesImageRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the workflow templates.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplatesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesList(ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected workflow template.
         * @param {string} workflowTemplateId 
         * @param {WorkflowTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesPartialUpdate(workflowTemplateId: string, data: WorkflowTemplate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesPartialUpdate(workflowTemplateId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the details of the selected workflow template.
         * @param {string} workflowTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesRead(workflowTemplateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesRead(workflowTemplateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new workflow template state action.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {WorkflowTemplateStateAction} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesStatesActionsCreate(workflowTemplateId: string, workflowTemplateStateId: string, data: WorkflowTemplateStateAction, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateStateAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesStatesActionsCreate(workflowTemplateId, workflowTemplateStateId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesStatesActionsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete the selected workflow template state action.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateActionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesStatesActionsDelete(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateActionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesStatesActionsDelete(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateActionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesStatesActionsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the workflow template state actions.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesStatesActionsList(workflowTemplateId: string, workflowTemplateStateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplatesStatesActionsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesStatesActionsList(workflowTemplateId, workflowTemplateStateId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesStatesActionsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected workflow template state action.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateActionId 
         * @param {WorkflowTemplateStateAction} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesStatesActionsPartialUpdate(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateActionId: string, data: WorkflowTemplateStateAction, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateStateAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesStatesActionsPartialUpdate(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateActionId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesStatesActionsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the details of the selected workflow template state action.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateActionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesStatesActionsRead(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateActionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateStateAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesStatesActionsRead(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateActionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesStatesActionsRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected workflow template state action.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateActionId 
         * @param {WorkflowTemplateStateAction} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesStatesActionsUpdate(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateActionId: string, data: WorkflowTemplateStateAction, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateStateAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesStatesActionsUpdate(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateActionId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesStatesActionsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new workflow template state.
         * @param {string} workflowTemplateId 
         * @param {WorkflowTemplateState} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesStatesCreate(workflowTemplateId: string, data: WorkflowTemplateState, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateState>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesStatesCreate(workflowTemplateId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesStatesCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete the selected workflow template state.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesStatesDelete(workflowTemplateId: string, workflowTemplateStateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesStatesDelete(workflowTemplateId, workflowTemplateStateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesStatesDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return a list of all the documents at a specific workflow template state.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesStatesDocumentsList(workflowTemplateId: string, workflowTemplateStateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CabinetsDocumentsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesStatesDocumentsList(workflowTemplateId, workflowTemplateStateId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesStatesDocumentsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new workflow template state escalation.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {WorkflowTemplateStateEscalation} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesStatesEscalationsCreate(workflowTemplateId: string, workflowTemplateStateId: string, data: WorkflowTemplateStateEscalation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateStateEscalation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesStatesEscalationsCreate(workflowTemplateId, workflowTemplateStateId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesStatesEscalationsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete the selected workflow template state escalation.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateEscalationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesStatesEscalationsDelete(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateEscalationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesStatesEscalationsDelete(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateEscalationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesStatesEscalationsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the workflow template state escalations.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesStatesEscalationsList(workflowTemplateId: string, workflowTemplateStateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplatesStatesEscalationsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesStatesEscalationsList(workflowTemplateId, workflowTemplateStateId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesStatesEscalationsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected workflow template state escalation.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateEscalationId 
         * @param {WorkflowTemplateStateEscalation} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesStatesEscalationsPartialUpdate(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateEscalationId: string, data: WorkflowTemplateStateEscalation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateStateEscalation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesStatesEscalationsPartialUpdate(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateEscalationId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesStatesEscalationsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the details of the selected workflow template state escalation.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateEscalationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesStatesEscalationsRead(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateEscalationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateStateEscalation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesStatesEscalationsRead(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateEscalationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesStatesEscalationsRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected workflow template state escalation.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateEscalationId 
         * @param {WorkflowTemplateStateEscalation} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesStatesEscalationsUpdate(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateEscalationId: string, data: WorkflowTemplateStateEscalation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateStateEscalation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesStatesEscalationsUpdate(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateEscalationId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesStatesEscalationsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the workflow template states.
         * @param {string} workflowTemplateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesStatesList(workflowTemplateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplatesStatesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesStatesList(workflowTemplateId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesStatesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected workflow template state.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {WorkflowTemplateState} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesStatesPartialUpdate(workflowTemplateId: string, workflowTemplateStateId: string, data: WorkflowTemplateState, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateState>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesStatesPartialUpdate(workflowTemplateId, workflowTemplateStateId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesStatesPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the details of the selected workflow template state.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesStatesRead(workflowTemplateId: string, workflowTemplateStateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateState>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesStatesRead(workflowTemplateId, workflowTemplateStateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesStatesRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected workflow template state.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {WorkflowTemplateState} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesStatesUpdate(workflowTemplateId: string, workflowTemplateStateId: string, data: WorkflowTemplateState, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateState>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesStatesUpdate(workflowTemplateId, workflowTemplateStateId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesStatesUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new workflow template transition.
         * @param {string} workflowTemplateId 
         * @param {WorkflowTemplateTransition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesTransitionsCreate(workflowTemplateId: string, data: WorkflowTemplateTransition, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateTransition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesTransitionsCreate(workflowTemplateId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesTransitionsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete the selected workflow template transition.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesTransitionsDelete(workflowTemplateId: string, workflowTemplateTransitionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesTransitionsDelete(workflowTemplateId, workflowTemplateTransitionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesTransitionsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new workflow template transition field.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {WorkflowTransitionField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesTransitionsFieldsCreate(workflowTemplateId: string, workflowTemplateTransitionId: string, data: WorkflowTransitionField, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTransitionField>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesTransitionsFieldsCreate(workflowTemplateId, workflowTemplateTransitionId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesTransitionsFieldsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete the selected workflow template transition field.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionFieldId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesTransitionsFieldsDelete(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionFieldId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesTransitionsFieldsDelete(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionFieldId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesTransitionsFieldsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the workflow template transition fields.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesTransitionsFieldsList(workflowTemplateId: string, workflowTemplateTransitionId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplatesTransitionsFieldsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesTransitionsFieldsList(workflowTemplateId, workflowTemplateTransitionId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesTransitionsFieldsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected workflow template transition field.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionFieldId 
         * @param {WorkflowTransitionField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesTransitionsFieldsPartialUpdate(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionFieldId: string, data: WorkflowTransitionField, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTransitionField>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesTransitionsFieldsPartialUpdate(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionFieldId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesTransitionsFieldsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the details of the selected workflow template transition field.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionFieldId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesTransitionsFieldsRead(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionFieldId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTransitionField>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesTransitionsFieldsRead(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionFieldId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesTransitionsFieldsRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected workflow template transition field.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionFieldId 
         * @param {WorkflowTransitionField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesTransitionsFieldsUpdate(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionFieldId: string, data: WorkflowTransitionField, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTransitionField>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesTransitionsFieldsUpdate(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionFieldId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesTransitionsFieldsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the workflow template transitions.
         * @param {string} workflowTemplateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesTransitionsList(workflowTemplateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentsWorkflowInstancesLogEntriesTransitionsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesTransitionsList(workflowTemplateId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesTransitionsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected workflow template transition.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {WorkflowTemplateTransition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesTransitionsPartialUpdate(workflowTemplateId: string, workflowTemplateTransitionId: string, data: WorkflowTemplateTransition, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateTransition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesTransitionsPartialUpdate(workflowTemplateId, workflowTemplateTransitionId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesTransitionsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the details of the selected workflow template transition.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesTransitionsRead(workflowTemplateId: string, workflowTemplateTransitionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateTransition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesTransitionsRead(workflowTemplateId, workflowTemplateTransitionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesTransitionsRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new workflow template transition trigger.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {WorkflowTemplateTransitionTrigger} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesTransitionsTriggersCreate(workflowTemplateId: string, workflowTemplateTransitionId: string, data: WorkflowTemplateTransitionTrigger, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateTransitionTrigger>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesTransitionsTriggersCreate(workflowTemplateId, workflowTemplateTransitionId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesTransitionsTriggersCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete the selected workflow template transition trigger.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionTriggerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesTransitionsTriggersDelete(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionTriggerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesTransitionsTriggersDelete(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionTriggerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesTransitionsTriggersDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all the workflow template transition triggers.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesTransitionsTriggersList(workflowTemplateId: string, workflowTemplateTransitionId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplatesTransitionsTriggersList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesTransitionsTriggersList(workflowTemplateId, workflowTemplateTransitionId, ordering, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesTransitionsTriggersList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected workflow template transition trigger.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionTriggerId 
         * @param {WorkflowTemplateTransitionTrigger} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesTransitionsTriggersPartialUpdate(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionTriggerId: string, data: WorkflowTemplateTransitionTrigger, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateTransitionTrigger>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesTransitionsTriggersPartialUpdate(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionTriggerId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesTransitionsTriggersPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the details of the selected workflow template transition trigger.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionTriggerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesTransitionsTriggersRead(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionTriggerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateTransitionTrigger>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesTransitionsTriggersRead(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionTriggerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesTransitionsTriggersRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected workflow template transition trigger.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionTriggerId 
         * @param {WorkflowTemplateTransitionTrigger} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesTransitionsTriggersUpdate(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionTriggerId: string, data: WorkflowTemplateTransitionTrigger, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateTransitionTrigger>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesTransitionsTriggersUpdate(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionTriggerId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesTransitionsTriggersUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected workflow template transition.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {WorkflowTemplateTransition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesTransitionsUpdate(workflowTemplateId: string, workflowTemplateTransitionId: string, data: WorkflowTemplateTransition, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplateTransition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesTransitionsUpdate(workflowTemplateId, workflowTemplateTransitionId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesTransitionsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit the selected workflow template.
         * @param {string} workflowTemplateId 
         * @param {WorkflowTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowTemplatesUpdate(workflowTemplateId: string, data: WorkflowTemplate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowTemplatesUpdate(workflowTemplateId, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowTemplatesApi.workflowTemplatesUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkflowTemplatesApi - factory interface
 * @export
 */
export const WorkflowTemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkflowTemplatesApiFp(configuration)
    return {
        /**
         * Create a new workflow template.
         * @param {WorkflowTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesCreate(data: WorkflowTemplate, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplate> {
            return localVarFp.workflowTemplatesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the selected workflow template.
         * @param {string} workflowTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesDelete(workflowTemplateId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.workflowTemplatesDelete(workflowTemplateId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a document type to a workflow template.
         * @param {string} workflowTemplateId 
         * @param {WorkflowTemplateDocumentTypeAdd} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesDocumentTypesAddCreate(workflowTemplateId: string, data: WorkflowTemplateDocumentTypeAdd, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateDocumentTypeAdd> {
            return localVarFp.workflowTemplatesDocumentTypesAddCreate(workflowTemplateId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the document types attached to a workflow template.
         * @param {string} workflowTemplateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesDocumentTypesList(workflowTemplateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<DocumentTypesList200Response> {
            return localVarFp.workflowTemplatesDocumentTypesList(workflowTemplateId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a document type from a workflow template.
         * @param {string} workflowTemplateId 
         * @param {WorkflowTemplateDocumentTypeRemove} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesDocumentTypesRemoveCreate(workflowTemplateId: string, data: WorkflowTemplateDocumentTypeRemove, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateDocumentTypeRemove> {
            return localVarFp.workflowTemplatesDocumentTypesRemoveCreate(workflowTemplateId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of all the document executing a specific workflow template.
         * @param {string} workflowTemplateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesDocumentsList(workflowTemplateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<CabinetsDocumentsList200Response> {
            return localVarFp.workflowTemplatesDocumentsList(workflowTemplateId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an image representation of the selected workflow template.
         * @param {string} workflowTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesImageRead(workflowTemplateId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.workflowTemplatesImageRead(workflowTemplateId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the workflow templates.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplatesList200Response> {
            return localVarFp.workflowTemplatesList(ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected workflow template.
         * @param {string} workflowTemplateId 
         * @param {WorkflowTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesPartialUpdate(workflowTemplateId: string, data: WorkflowTemplate, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplate> {
            return localVarFp.workflowTemplatesPartialUpdate(workflowTemplateId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the details of the selected workflow template.
         * @param {string} workflowTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesRead(workflowTemplateId: string, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplate> {
            return localVarFp.workflowTemplatesRead(workflowTemplateId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new workflow template state action.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {WorkflowTemplateStateAction} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesActionsCreate(workflowTemplateId: string, workflowTemplateStateId: string, data: WorkflowTemplateStateAction, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateStateAction> {
            return localVarFp.workflowTemplatesStatesActionsCreate(workflowTemplateId, workflowTemplateStateId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the selected workflow template state action.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateActionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesActionsDelete(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateActionId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.workflowTemplatesStatesActionsDelete(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateActionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the workflow template state actions.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesActionsList(workflowTemplateId: string, workflowTemplateStateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplatesStatesActionsList200Response> {
            return localVarFp.workflowTemplatesStatesActionsList(workflowTemplateId, workflowTemplateStateId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected workflow template state action.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateActionId 
         * @param {WorkflowTemplateStateAction} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesActionsPartialUpdate(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateActionId: string, data: WorkflowTemplateStateAction, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateStateAction> {
            return localVarFp.workflowTemplatesStatesActionsPartialUpdate(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateActionId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the details of the selected workflow template state action.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateActionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesActionsRead(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateActionId: string, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateStateAction> {
            return localVarFp.workflowTemplatesStatesActionsRead(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateActionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected workflow template state action.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateActionId 
         * @param {WorkflowTemplateStateAction} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesActionsUpdate(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateActionId: string, data: WorkflowTemplateStateAction, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateStateAction> {
            return localVarFp.workflowTemplatesStatesActionsUpdate(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateActionId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new workflow template state.
         * @param {string} workflowTemplateId 
         * @param {WorkflowTemplateState} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesCreate(workflowTemplateId: string, data: WorkflowTemplateState, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateState> {
            return localVarFp.workflowTemplatesStatesCreate(workflowTemplateId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the selected workflow template state.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesDelete(workflowTemplateId: string, workflowTemplateStateId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.workflowTemplatesStatesDelete(workflowTemplateId, workflowTemplateStateId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of all the documents at a specific workflow template state.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesDocumentsList(workflowTemplateId: string, workflowTemplateStateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<CabinetsDocumentsList200Response> {
            return localVarFp.workflowTemplatesStatesDocumentsList(workflowTemplateId, workflowTemplateStateId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new workflow template state escalation.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {WorkflowTemplateStateEscalation} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesEscalationsCreate(workflowTemplateId: string, workflowTemplateStateId: string, data: WorkflowTemplateStateEscalation, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateStateEscalation> {
            return localVarFp.workflowTemplatesStatesEscalationsCreate(workflowTemplateId, workflowTemplateStateId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the selected workflow template state escalation.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateEscalationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesEscalationsDelete(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateEscalationId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.workflowTemplatesStatesEscalationsDelete(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateEscalationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the workflow template state escalations.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesEscalationsList(workflowTemplateId: string, workflowTemplateStateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplatesStatesEscalationsList200Response> {
            return localVarFp.workflowTemplatesStatesEscalationsList(workflowTemplateId, workflowTemplateStateId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected workflow template state escalation.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateEscalationId 
         * @param {WorkflowTemplateStateEscalation} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesEscalationsPartialUpdate(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateEscalationId: string, data: WorkflowTemplateStateEscalation, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateStateEscalation> {
            return localVarFp.workflowTemplatesStatesEscalationsPartialUpdate(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateEscalationId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the details of the selected workflow template state escalation.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateEscalationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesEscalationsRead(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateEscalationId: string, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateStateEscalation> {
            return localVarFp.workflowTemplatesStatesEscalationsRead(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateEscalationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected workflow template state escalation.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {string} workflowTemplateStateEscalationId 
         * @param {WorkflowTemplateStateEscalation} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesEscalationsUpdate(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateEscalationId: string, data: WorkflowTemplateStateEscalation, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateStateEscalation> {
            return localVarFp.workflowTemplatesStatesEscalationsUpdate(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateEscalationId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the workflow template states.
         * @param {string} workflowTemplateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesList(workflowTemplateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplatesStatesList200Response> {
            return localVarFp.workflowTemplatesStatesList(workflowTemplateId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected workflow template state.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {WorkflowTemplateState} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesPartialUpdate(workflowTemplateId: string, workflowTemplateStateId: string, data: WorkflowTemplateState, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateState> {
            return localVarFp.workflowTemplatesStatesPartialUpdate(workflowTemplateId, workflowTemplateStateId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the details of the selected workflow template state.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesRead(workflowTemplateId: string, workflowTemplateStateId: string, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateState> {
            return localVarFp.workflowTemplatesStatesRead(workflowTemplateId, workflowTemplateStateId, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected workflow template state.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateStateId 
         * @param {WorkflowTemplateState} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesStatesUpdate(workflowTemplateId: string, workflowTemplateStateId: string, data: WorkflowTemplateState, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateState> {
            return localVarFp.workflowTemplatesStatesUpdate(workflowTemplateId, workflowTemplateStateId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new workflow template transition.
         * @param {string} workflowTemplateId 
         * @param {WorkflowTemplateTransition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsCreate(workflowTemplateId: string, data: WorkflowTemplateTransition, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateTransition> {
            return localVarFp.workflowTemplatesTransitionsCreate(workflowTemplateId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the selected workflow template transition.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsDelete(workflowTemplateId: string, workflowTemplateTransitionId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.workflowTemplatesTransitionsDelete(workflowTemplateId, workflowTemplateTransitionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new workflow template transition field.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {WorkflowTransitionField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsFieldsCreate(workflowTemplateId: string, workflowTemplateTransitionId: string, data: WorkflowTransitionField, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTransitionField> {
            return localVarFp.workflowTemplatesTransitionsFieldsCreate(workflowTemplateId, workflowTemplateTransitionId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the selected workflow template transition field.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionFieldId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsFieldsDelete(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionFieldId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.workflowTemplatesTransitionsFieldsDelete(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionFieldId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the workflow template transition fields.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsFieldsList(workflowTemplateId: string, workflowTemplateTransitionId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplatesTransitionsFieldsList200Response> {
            return localVarFp.workflowTemplatesTransitionsFieldsList(workflowTemplateId, workflowTemplateTransitionId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected workflow template transition field.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionFieldId 
         * @param {WorkflowTransitionField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsFieldsPartialUpdate(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionFieldId: string, data: WorkflowTransitionField, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTransitionField> {
            return localVarFp.workflowTemplatesTransitionsFieldsPartialUpdate(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionFieldId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the details of the selected workflow template transition field.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionFieldId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsFieldsRead(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionFieldId: string, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTransitionField> {
            return localVarFp.workflowTemplatesTransitionsFieldsRead(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionFieldId, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected workflow template transition field.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionFieldId 
         * @param {WorkflowTransitionField} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsFieldsUpdate(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionFieldId: string, data: WorkflowTransitionField, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTransitionField> {
            return localVarFp.workflowTemplatesTransitionsFieldsUpdate(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionFieldId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the workflow template transitions.
         * @param {string} workflowTemplateId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsList(workflowTemplateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<DocumentsWorkflowInstancesLogEntriesTransitionsList200Response> {
            return localVarFp.workflowTemplatesTransitionsList(workflowTemplateId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected workflow template transition.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {WorkflowTemplateTransition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsPartialUpdate(workflowTemplateId: string, workflowTemplateTransitionId: string, data: WorkflowTemplateTransition, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateTransition> {
            return localVarFp.workflowTemplatesTransitionsPartialUpdate(workflowTemplateId, workflowTemplateTransitionId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the details of the selected workflow template transition.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsRead(workflowTemplateId: string, workflowTemplateTransitionId: string, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateTransition> {
            return localVarFp.workflowTemplatesTransitionsRead(workflowTemplateId, workflowTemplateTransitionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new workflow template transition trigger.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {WorkflowTemplateTransitionTrigger} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsTriggersCreate(workflowTemplateId: string, workflowTemplateTransitionId: string, data: WorkflowTemplateTransitionTrigger, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateTransitionTrigger> {
            return localVarFp.workflowTemplatesTransitionsTriggersCreate(workflowTemplateId, workflowTemplateTransitionId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the selected workflow template transition trigger.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionTriggerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsTriggersDelete(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionTriggerId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.workflowTemplatesTransitionsTriggersDelete(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionTriggerId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the workflow template transition triggers.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsTriggersList(workflowTemplateId: string, workflowTemplateTransitionId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplatesTransitionsTriggersList200Response> {
            return localVarFp.workflowTemplatesTransitionsTriggersList(workflowTemplateId, workflowTemplateTransitionId, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected workflow template transition trigger.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionTriggerId 
         * @param {WorkflowTemplateTransitionTrigger} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsTriggersPartialUpdate(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionTriggerId: string, data: WorkflowTemplateTransitionTrigger, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateTransitionTrigger> {
            return localVarFp.workflowTemplatesTransitionsTriggersPartialUpdate(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionTriggerId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the details of the selected workflow template transition trigger.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionTriggerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsTriggersRead(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionTriggerId: string, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateTransitionTrigger> {
            return localVarFp.workflowTemplatesTransitionsTriggersRead(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionTriggerId, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected workflow template transition trigger.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {string} workflowTemplateTransitionTriggerId 
         * @param {WorkflowTemplateTransitionTrigger} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsTriggersUpdate(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionTriggerId: string, data: WorkflowTemplateTransitionTrigger, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateTransitionTrigger> {
            return localVarFp.workflowTemplatesTransitionsTriggersUpdate(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionTriggerId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected workflow template transition.
         * @param {string} workflowTemplateId 
         * @param {string} workflowTemplateTransitionId 
         * @param {WorkflowTemplateTransition} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesTransitionsUpdate(workflowTemplateId: string, workflowTemplateTransitionId: string, data: WorkflowTemplateTransition, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplateTransition> {
            return localVarFp.workflowTemplatesTransitionsUpdate(workflowTemplateId, workflowTemplateTransitionId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit the selected workflow template.
         * @param {string} workflowTemplateId 
         * @param {WorkflowTemplate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplatesUpdate(workflowTemplateId: string, data: WorkflowTemplate, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowTemplate> {
            return localVarFp.workflowTemplatesUpdate(workflowTemplateId, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkflowTemplatesApi - object-oriented interface
 * @export
 * @class WorkflowTemplatesApi
 * @extends {BaseAPI}
 */
export class WorkflowTemplatesApi extends BaseAPI {
    /**
     * Create a new workflow template.
     * @param {WorkflowTemplate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesCreate(data: WorkflowTemplate, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the selected workflow template.
     * @param {string} workflowTemplateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesDelete(workflowTemplateId: string, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesDelete(workflowTemplateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a document type to a workflow template.
     * @param {string} workflowTemplateId 
     * @param {WorkflowTemplateDocumentTypeAdd} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesDocumentTypesAddCreate(workflowTemplateId: string, data: WorkflowTemplateDocumentTypeAdd, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesDocumentTypesAddCreate(workflowTemplateId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the document types attached to a workflow template.
     * @param {string} workflowTemplateId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesDocumentTypesList(workflowTemplateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesDocumentTypesList(workflowTemplateId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a document type from a workflow template.
     * @param {string} workflowTemplateId 
     * @param {WorkflowTemplateDocumentTypeRemove} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesDocumentTypesRemoveCreate(workflowTemplateId: string, data: WorkflowTemplateDocumentTypeRemove, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesDocumentTypesRemoveCreate(workflowTemplateId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a list of all the document executing a specific workflow template.
     * @param {string} workflowTemplateId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesDocumentsList(workflowTemplateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesDocumentsList(workflowTemplateId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an image representation of the selected workflow template.
     * @param {string} workflowTemplateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesImageRead(workflowTemplateId: string, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesImageRead(workflowTemplateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the workflow templates.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesList(ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesList(ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected workflow template.
     * @param {string} workflowTemplateId 
     * @param {WorkflowTemplate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesPartialUpdate(workflowTemplateId: string, data: WorkflowTemplate, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesPartialUpdate(workflowTemplateId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the details of the selected workflow template.
     * @param {string} workflowTemplateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesRead(workflowTemplateId: string, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesRead(workflowTemplateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new workflow template state action.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateStateId 
     * @param {WorkflowTemplateStateAction} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesStatesActionsCreate(workflowTemplateId: string, workflowTemplateStateId: string, data: WorkflowTemplateStateAction, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesStatesActionsCreate(workflowTemplateId, workflowTemplateStateId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the selected workflow template state action.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateStateId 
     * @param {string} workflowTemplateStateActionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesStatesActionsDelete(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateActionId: string, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesStatesActionsDelete(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateActionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the workflow template state actions.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateStateId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesStatesActionsList(workflowTemplateId: string, workflowTemplateStateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesStatesActionsList(workflowTemplateId, workflowTemplateStateId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected workflow template state action.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateStateId 
     * @param {string} workflowTemplateStateActionId 
     * @param {WorkflowTemplateStateAction} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesStatesActionsPartialUpdate(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateActionId: string, data: WorkflowTemplateStateAction, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesStatesActionsPartialUpdate(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateActionId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the details of the selected workflow template state action.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateStateId 
     * @param {string} workflowTemplateStateActionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesStatesActionsRead(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateActionId: string, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesStatesActionsRead(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateActionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected workflow template state action.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateStateId 
     * @param {string} workflowTemplateStateActionId 
     * @param {WorkflowTemplateStateAction} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesStatesActionsUpdate(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateActionId: string, data: WorkflowTemplateStateAction, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesStatesActionsUpdate(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateActionId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new workflow template state.
     * @param {string} workflowTemplateId 
     * @param {WorkflowTemplateState} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesStatesCreate(workflowTemplateId: string, data: WorkflowTemplateState, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesStatesCreate(workflowTemplateId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the selected workflow template state.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateStateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesStatesDelete(workflowTemplateId: string, workflowTemplateStateId: string, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesStatesDelete(workflowTemplateId, workflowTemplateStateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a list of all the documents at a specific workflow template state.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateStateId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesStatesDocumentsList(workflowTemplateId: string, workflowTemplateStateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesStatesDocumentsList(workflowTemplateId, workflowTemplateStateId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new workflow template state escalation.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateStateId 
     * @param {WorkflowTemplateStateEscalation} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesStatesEscalationsCreate(workflowTemplateId: string, workflowTemplateStateId: string, data: WorkflowTemplateStateEscalation, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesStatesEscalationsCreate(workflowTemplateId, workflowTemplateStateId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the selected workflow template state escalation.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateStateId 
     * @param {string} workflowTemplateStateEscalationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesStatesEscalationsDelete(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateEscalationId: string, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesStatesEscalationsDelete(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateEscalationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the workflow template state escalations.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateStateId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesStatesEscalationsList(workflowTemplateId: string, workflowTemplateStateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesStatesEscalationsList(workflowTemplateId, workflowTemplateStateId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected workflow template state escalation.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateStateId 
     * @param {string} workflowTemplateStateEscalationId 
     * @param {WorkflowTemplateStateEscalation} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesStatesEscalationsPartialUpdate(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateEscalationId: string, data: WorkflowTemplateStateEscalation, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesStatesEscalationsPartialUpdate(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateEscalationId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the details of the selected workflow template state escalation.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateStateId 
     * @param {string} workflowTemplateStateEscalationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesStatesEscalationsRead(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateEscalationId: string, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesStatesEscalationsRead(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateEscalationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected workflow template state escalation.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateStateId 
     * @param {string} workflowTemplateStateEscalationId 
     * @param {WorkflowTemplateStateEscalation} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesStatesEscalationsUpdate(workflowTemplateId: string, workflowTemplateStateId: string, workflowTemplateStateEscalationId: string, data: WorkflowTemplateStateEscalation, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesStatesEscalationsUpdate(workflowTemplateId, workflowTemplateStateId, workflowTemplateStateEscalationId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the workflow template states.
     * @param {string} workflowTemplateId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesStatesList(workflowTemplateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesStatesList(workflowTemplateId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected workflow template state.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateStateId 
     * @param {WorkflowTemplateState} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesStatesPartialUpdate(workflowTemplateId: string, workflowTemplateStateId: string, data: WorkflowTemplateState, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesStatesPartialUpdate(workflowTemplateId, workflowTemplateStateId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the details of the selected workflow template state.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateStateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesStatesRead(workflowTemplateId: string, workflowTemplateStateId: string, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesStatesRead(workflowTemplateId, workflowTemplateStateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected workflow template state.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateStateId 
     * @param {WorkflowTemplateState} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesStatesUpdate(workflowTemplateId: string, workflowTemplateStateId: string, data: WorkflowTemplateState, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesStatesUpdate(workflowTemplateId, workflowTemplateStateId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new workflow template transition.
     * @param {string} workflowTemplateId 
     * @param {WorkflowTemplateTransition} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesTransitionsCreate(workflowTemplateId: string, data: WorkflowTemplateTransition, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesTransitionsCreate(workflowTemplateId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the selected workflow template transition.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateTransitionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesTransitionsDelete(workflowTemplateId: string, workflowTemplateTransitionId: string, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesTransitionsDelete(workflowTemplateId, workflowTemplateTransitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new workflow template transition field.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateTransitionId 
     * @param {WorkflowTransitionField} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesTransitionsFieldsCreate(workflowTemplateId: string, workflowTemplateTransitionId: string, data: WorkflowTransitionField, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesTransitionsFieldsCreate(workflowTemplateId, workflowTemplateTransitionId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the selected workflow template transition field.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateTransitionId 
     * @param {string} workflowTemplateTransitionFieldId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesTransitionsFieldsDelete(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionFieldId: string, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesTransitionsFieldsDelete(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionFieldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the workflow template transition fields.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateTransitionId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesTransitionsFieldsList(workflowTemplateId: string, workflowTemplateTransitionId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesTransitionsFieldsList(workflowTemplateId, workflowTemplateTransitionId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected workflow template transition field.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateTransitionId 
     * @param {string} workflowTemplateTransitionFieldId 
     * @param {WorkflowTransitionField} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesTransitionsFieldsPartialUpdate(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionFieldId: string, data: WorkflowTransitionField, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesTransitionsFieldsPartialUpdate(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionFieldId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the details of the selected workflow template transition field.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateTransitionId 
     * @param {string} workflowTemplateTransitionFieldId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesTransitionsFieldsRead(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionFieldId: string, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesTransitionsFieldsRead(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionFieldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected workflow template transition field.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateTransitionId 
     * @param {string} workflowTemplateTransitionFieldId 
     * @param {WorkflowTransitionField} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesTransitionsFieldsUpdate(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionFieldId: string, data: WorkflowTransitionField, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesTransitionsFieldsUpdate(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionFieldId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the workflow template transitions.
     * @param {string} workflowTemplateId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesTransitionsList(workflowTemplateId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesTransitionsList(workflowTemplateId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected workflow template transition.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateTransitionId 
     * @param {WorkflowTemplateTransition} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesTransitionsPartialUpdate(workflowTemplateId: string, workflowTemplateTransitionId: string, data: WorkflowTemplateTransition, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesTransitionsPartialUpdate(workflowTemplateId, workflowTemplateTransitionId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the details of the selected workflow template transition.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateTransitionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesTransitionsRead(workflowTemplateId: string, workflowTemplateTransitionId: string, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesTransitionsRead(workflowTemplateId, workflowTemplateTransitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new workflow template transition trigger.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateTransitionId 
     * @param {WorkflowTemplateTransitionTrigger} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesTransitionsTriggersCreate(workflowTemplateId: string, workflowTemplateTransitionId: string, data: WorkflowTemplateTransitionTrigger, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesTransitionsTriggersCreate(workflowTemplateId, workflowTemplateTransitionId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the selected workflow template transition trigger.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateTransitionId 
     * @param {string} workflowTemplateTransitionTriggerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesTransitionsTriggersDelete(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionTriggerId: string, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesTransitionsTriggersDelete(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionTriggerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the workflow template transition triggers.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateTransitionId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesTransitionsTriggersList(workflowTemplateId: string, workflowTemplateTransitionId: string, ordering?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesTransitionsTriggersList(workflowTemplateId, workflowTemplateTransitionId, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected workflow template transition trigger.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateTransitionId 
     * @param {string} workflowTemplateTransitionTriggerId 
     * @param {WorkflowTemplateTransitionTrigger} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesTransitionsTriggersPartialUpdate(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionTriggerId: string, data: WorkflowTemplateTransitionTrigger, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesTransitionsTriggersPartialUpdate(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionTriggerId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the details of the selected workflow template transition trigger.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateTransitionId 
     * @param {string} workflowTemplateTransitionTriggerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesTransitionsTriggersRead(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionTriggerId: string, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesTransitionsTriggersRead(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionTriggerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected workflow template transition trigger.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateTransitionId 
     * @param {string} workflowTemplateTransitionTriggerId 
     * @param {WorkflowTemplateTransitionTrigger} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesTransitionsTriggersUpdate(workflowTemplateId: string, workflowTemplateTransitionId: string, workflowTemplateTransitionTriggerId: string, data: WorkflowTemplateTransitionTrigger, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesTransitionsTriggersUpdate(workflowTemplateId, workflowTemplateTransitionId, workflowTemplateTransitionTriggerId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected workflow template transition.
     * @param {string} workflowTemplateId 
     * @param {string} workflowTemplateTransitionId 
     * @param {WorkflowTemplateTransition} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesTransitionsUpdate(workflowTemplateId: string, workflowTemplateTransitionId: string, data: WorkflowTemplateTransition, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesTransitionsUpdate(workflowTemplateId, workflowTemplateTransitionId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit the selected workflow template.
     * @param {string} workflowTemplateId 
     * @param {WorkflowTemplate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplatesApi
     */
    public workflowTemplatesUpdate(workflowTemplateId: string, data: WorkflowTemplate, options?: RawAxiosRequestConfig) {
        return WorkflowTemplatesApiFp(this.configuration).workflowTemplatesUpdate(workflowTemplateId, data, options).then((request) => request(this.axios, this.basePath));
    }
}

