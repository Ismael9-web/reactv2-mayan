/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SavedResultset,
  SavedResultsetsList200Response,
  SavedResultsetsResultsList200Response,
} from '../models/index';
import {
    SavedResultsetFromJSON,
    SavedResultsetToJSON,
    SavedResultsetsList200ResponseFromJSON,
    SavedResultsetsList200ResponseToJSON,
    SavedResultsetsResultsList200ResponseFromJSON,
    SavedResultsetsResultsList200ResponseToJSON,
} from '../models/index';

export interface SavedResultsetsCreateRequest {
    searchModelPk: string;
    data: Omit<SavedResultset, 'app_label'|'id'|'model_name'|'result_count'|'results_url'|'search_explainer_text'|'time_to_live'|'timestamp'|'url'>;
}

export interface SavedResultsetsDeleteRequest {
    savedResultsetId: string;
}

export interface SavedResultsetsListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface SavedResultsetsReadRequest {
    savedResultsetId: string;
}

export interface SavedResultsetsResultsListRequest {
    savedResultsetId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

/**
 * 
 */
export class SavedResultsetsApi extends runtime.BaseAPI {

    /**
     * Create a saved resultset.
     */
    async savedResultsetsCreateRaw(requestParameters: SavedResultsetsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SavedResultset>> {
        if (requestParameters['searchModelPk'] == null) {
            throw new runtime.RequiredError(
                'searchModelPk',
                'Required parameter "searchModelPk" was null or undefined when calling savedResultsetsCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling savedResultsetsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/saved_resultsets/{search_model_pk}/`;
        urlPath = urlPath.replace(`{${"search_model_pk"}}`, encodeURIComponent(String(requestParameters['searchModelPk'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SavedResultsetToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SavedResultsetFromJSON(jsonValue));
    }

    /**
     * Create a saved resultset.
     */
    async savedResultsetsCreate(requestParameters: SavedResultsetsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SavedResultset> {
        const response = await this.savedResultsetsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected saved resultset.
     */
    async savedResultsetsDeleteRaw(requestParameters: SavedResultsetsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['savedResultsetId'] == null) {
            throw new runtime.RequiredError(
                'savedResultsetId',
                'Required parameter "savedResultsetId" was null or undefined when calling savedResultsetsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/saved_resultsets/{saved_resultset_id}/`;
        urlPath = urlPath.replace(`{${"saved_resultset_id"}}`, encodeURIComponent(String(requestParameters['savedResultsetId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected saved resultset.
     */
    async savedResultsetsDelete(requestParameters: SavedResultsetsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.savedResultsetsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all the saved resultsets.
     */
    async savedResultsetsListRaw(requestParameters: SavedResultsetsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SavedResultsetsList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/saved_resultsets/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SavedResultsetsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the saved resultsets.
     */
    async savedResultsetsList(requestParameters: SavedResultsetsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SavedResultsetsList200Response> {
        const response = await this.savedResultsetsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the details of the selected saved resultset.
     */
    async savedResultsetsReadRaw(requestParameters: SavedResultsetsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SavedResultset>> {
        if (requestParameters['savedResultsetId'] == null) {
            throw new runtime.RequiredError(
                'savedResultsetId',
                'Required parameter "savedResultsetId" was null or undefined when calling savedResultsetsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/saved_resultsets/{saved_resultset_id}/`;
        urlPath = urlPath.replace(`{${"saved_resultset_id"}}`, encodeURIComponent(String(requestParameters['savedResultsetId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SavedResultsetFromJSON(jsonValue));
    }

    /**
     * Return the details of the selected saved resultset.
     */
    async savedResultsetsRead(requestParameters: SavedResultsetsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SavedResultset> {
        const response = await this.savedResultsetsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the results of the selected saved resultset.
     */
    async savedResultsetsResultsListRaw(requestParameters: SavedResultsetsResultsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SavedResultsetsResultsList200Response>> {
        if (requestParameters['savedResultsetId'] == null) {
            throw new runtime.RequiredError(
                'savedResultsetId',
                'Required parameter "savedResultsetId" was null or undefined when calling savedResultsetsResultsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/saved_resultsets/{saved_resultset_id}/results/`;
        urlPath = urlPath.replace(`{${"saved_resultset_id"}}`, encodeURIComponent(String(requestParameters['savedResultsetId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SavedResultsetsResultsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Return the results of the selected saved resultset.
     */
    async savedResultsetsResultsList(requestParameters: SavedResultsetsResultsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SavedResultsetsResultsList200Response> {
        const response = await this.savedResultsetsResultsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
