/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GroupsList200Response,
  ObjectsPermissionsList200Response,
  Role,
  RoleGroupAdd,
  RoleGroupRemove,
  RolePermissionAdd,
  RolePermissionRemove,
  RolesList200Response,
} from '../models/index';
import {
    GroupsList200ResponseFromJSON,
    GroupsList200ResponseToJSON,
    ObjectsPermissionsList200ResponseFromJSON,
    ObjectsPermissionsList200ResponseToJSON,
    RoleFromJSON,
    RoleToJSON,
    RoleGroupAddFromJSON,
    RoleGroupAddToJSON,
    RoleGroupRemoveFromJSON,
    RoleGroupRemoveToJSON,
    RolePermissionAddFromJSON,
    RolePermissionAddToJSON,
    RolePermissionRemoveFromJSON,
    RolePermissionRemoveToJSON,
    RolesList200ResponseFromJSON,
    RolesList200ResponseToJSON,
} from '../models/index';

export interface RolesCreateRequest {
    data: Omit<Role, 'groups_add_url'|'groups_remove_url'|'groups_url'|'id'|'permissions_add_url'|'permissions_url'|'permissions_remove_url'|'url'>;
}

export interface RolesDeleteRequest {
    roleId: string;
}

export interface RolesGroupsAddCreateRequest {
    roleId: string;
    data: RoleGroupAdd;
}

export interface RolesGroupsListRequest {
    roleId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface RolesGroupsRemoveCreateRequest {
    roleId: string;
    data: RoleGroupRemove;
}

export interface RolesListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface RolesPartialUpdateRequest {
    roleId: string;
    data: Omit<Role, 'groups_add_url'|'groups_remove_url'|'groups_url'|'id'|'permissions_add_url'|'permissions_url'|'permissions_remove_url'|'url'>;
}

export interface RolesPermissionsAddCreateRequest {
    roleId: string;
    data: RolePermissionAdd;
}

export interface RolesPermissionsListRequest {
    roleId: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface RolesPermissionsRemoveCreateRequest {
    roleId: string;
    data: RolePermissionRemove;
}

export interface RolesReadRequest {
    roleId: string;
}

export interface RolesUpdateRequest {
    roleId: string;
    data: Omit<Role, 'groups_add_url'|'groups_remove_url'|'groups_url'|'id'|'permissions_add_url'|'permissions_url'|'permissions_remove_url'|'url'>;
}

/**
 * 
 */
export class RolesApi extends runtime.BaseAPI {

    /**
     * Create a new role.
     */
    async rolesCreateRaw(requestParameters: RolesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling rolesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/roles/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     * Create a new role.
     */
    async rolesCreate(requestParameters: RolesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Role> {
        const response = await this.rolesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected role.
     */
    async rolesDeleteRaw(requestParameters: RolesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling rolesDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/roles/{role_id}/`;
        urlPath = urlPath.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected role.
     */
    async rolesDelete(requestParameters: RolesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rolesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Add a group to a role.
     */
    async rolesGroupsAddCreateRaw(requestParameters: RolesGroupsAddCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleGroupAdd>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling rolesGroupsAddCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling rolesGroupsAddCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/roles/{role_id}/groups/add/`;
        urlPath = urlPath.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleGroupAddToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleGroupAddFromJSON(jsonValue));
    }

    /**
     * Add a group to a role.
     */
    async rolesGroupsAddCreate(requestParameters: RolesGroupsAddCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleGroupAdd> {
        const response = await this.rolesGroupsAddCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all the groups granted to a particular role.
     */
    async rolesGroupsListRaw(requestParameters: RolesGroupsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupsList200Response>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling rolesGroupsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/roles/{role_id}/groups/`;
        urlPath = urlPath.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the groups granted to a particular role.
     */
    async rolesGroupsList(requestParameters: RolesGroupsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupsList200Response> {
        const response = await this.rolesGroupsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a group from a role.
     */
    async rolesGroupsRemoveCreateRaw(requestParameters: RolesGroupsRemoveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleGroupRemove>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling rolesGroupsRemoveCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling rolesGroupsRemoveCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/roles/{role_id}/groups/remove/`;
        urlPath = urlPath.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleGroupRemoveToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleGroupRemoveFromJSON(jsonValue));
    }

    /**
     * Remove a group from a role.
     */
    async rolesGroupsRemoveCreate(requestParameters: RolesGroupsRemoveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleGroupRemove> {
        const response = await this.rolesGroupsRemoveCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all the roles.
     */
    async rolesListRaw(requestParameters: RolesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolesList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/roles/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolesList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the roles.
     */
    async rolesList(requestParameters: RolesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolesList200Response> {
        const response = await this.rolesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected role.
     */
    async rolesPartialUpdateRaw(requestParameters: RolesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling rolesPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling rolesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/roles/{role_id}/`;
        urlPath = urlPath.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RoleToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     * Edit the selected role.
     */
    async rolesPartialUpdate(requestParameters: RolesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Role> {
        const response = await this.rolesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a permission to a role.
     */
    async rolesPermissionsAddCreateRaw(requestParameters: RolesPermissionsAddCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolePermissionAdd>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling rolesPermissionsAddCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling rolesPermissionsAddCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/roles/{role_id}/permissions/add/`;
        urlPath = urlPath.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RolePermissionAddToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolePermissionAddFromJSON(jsonValue));
    }

    /**
     * Add a permission to a role.
     */
    async rolesPermissionsAddCreate(requestParameters: RolesPermissionsAddCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolePermissionAdd> {
        const response = await this.rolesPermissionsAddCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all the permissions granted to a particular role.
     */
    async rolesPermissionsListRaw(requestParameters: RolesPermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectsPermissionsList200Response>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling rolesPermissionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/roles/{role_id}/permissions/`;
        urlPath = urlPath.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectsPermissionsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the permissions granted to a particular role.
     */
    async rolesPermissionsList(requestParameters: RolesPermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectsPermissionsList200Response> {
        const response = await this.rolesPermissionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a permission from a role.
     */
    async rolesPermissionsRemoveCreateRaw(requestParameters: RolesPermissionsRemoveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolePermissionRemove>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling rolesPermissionsRemoveCreate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling rolesPermissionsRemoveCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/roles/{role_id}/permissions/remove/`;
        urlPath = urlPath.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RolePermissionRemoveToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolePermissionRemoveFromJSON(jsonValue));
    }

    /**
     * Remove a permission from a role.
     */
    async rolesPermissionsRemoveCreate(requestParameters: RolesPermissionsRemoveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolePermissionRemove> {
        const response = await this.rolesPermissionsRemoveCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the details of the selected role.
     */
    async rolesReadRaw(requestParameters: RolesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling rolesRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/roles/{role_id}/`;
        urlPath = urlPath.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     * Return the details of the selected role.
     */
    async rolesRead(requestParameters: RolesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Role> {
        const response = await this.rolesReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected role.
     */
    async rolesUpdateRaw(requestParameters: RolesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling rolesUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling rolesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/roles/{role_id}/`;
        urlPath = urlPath.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoleToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     * Edit the selected role.
     */
    async rolesUpdate(requestParameters: RolesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Role> {
        const response = await this.rolesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
