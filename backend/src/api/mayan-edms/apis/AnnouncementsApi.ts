/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Announcement,
  AnnouncementsList200Response,
} from '../models/index';
import {
    AnnouncementFromJSON,
    AnnouncementToJSON,
    AnnouncementsList200ResponseFromJSON,
    AnnouncementsList200ResponseToJSON,
} from '../models/index';

export interface AnnouncementsCreateRequest {
    data: Omit<Announcement, 'id'|'url'>;
}

export interface AnnouncementsDeleteRequest {
    announcementId: string;
}

export interface AnnouncementsListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface AnnouncementsPartialUpdateRequest {
    announcementId: string;
    data: Omit<Announcement, 'id'|'url'>;
}

export interface AnnouncementsReadRequest {
    announcementId: string;
}

export interface AnnouncementsUpdateRequest {
    announcementId: string;
    data: Omit<Announcement, 'id'|'url'>;
}

/**
 * 
 */
export class AnnouncementsApi extends runtime.BaseAPI {

    /**
     * Create a new announcement.
     */
    async announcementsCreateRaw(requestParameters: AnnouncementsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Announcement>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling announcementsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/announcements/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnnouncementToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnouncementFromJSON(jsonValue));
    }

    /**
     * Create a new announcement.
     */
    async announcementsCreate(requestParameters: AnnouncementsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Announcement> {
        const response = await this.announcementsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected announcement.
     */
    async announcementsDeleteRaw(requestParameters: AnnouncementsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['announcementId'] == null) {
            throw new runtime.RequiredError(
                'announcementId',
                'Required parameter "announcementId" was null or undefined when calling announcementsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/announcements/{announcement_id}/`;
        urlPath = urlPath.replace(`{${"announcement_id"}}`, encodeURIComponent(String(requestParameters['announcementId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the selected announcement.
     */
    async announcementsDelete(requestParameters: AnnouncementsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.announcementsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all the announcements.
     */
    async announcementsListRaw(requestParameters: AnnouncementsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnnouncementsList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/announcements/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnouncementsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the announcements.
     */
    async announcementsList(requestParameters: AnnouncementsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnnouncementsList200Response> {
        const response = await this.announcementsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected announcement.
     */
    async announcementsPartialUpdateRaw(requestParameters: AnnouncementsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Announcement>> {
        if (requestParameters['announcementId'] == null) {
            throw new runtime.RequiredError(
                'announcementId',
                'Required parameter "announcementId" was null or undefined when calling announcementsPartialUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling announcementsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/announcements/{announcement_id}/`;
        urlPath = urlPath.replace(`{${"announcement_id"}}`, encodeURIComponent(String(requestParameters['announcementId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AnnouncementToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnouncementFromJSON(jsonValue));
    }

    /**
     * Edit the selected announcement.
     */
    async announcementsPartialUpdate(requestParameters: AnnouncementsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Announcement> {
        const response = await this.announcementsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the details of the selected announcement.
     */
    async announcementsReadRaw(requestParameters: AnnouncementsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Announcement>> {
        if (requestParameters['announcementId'] == null) {
            throw new runtime.RequiredError(
                'announcementId',
                'Required parameter "announcementId" was null or undefined when calling announcementsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/announcements/{announcement_id}/`;
        urlPath = urlPath.replace(`{${"announcement_id"}}`, encodeURIComponent(String(requestParameters['announcementId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnouncementFromJSON(jsonValue));
    }

    /**
     * Return the details of the selected announcement.
     */
    async announcementsRead(requestParameters: AnnouncementsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Announcement> {
        const response = await this.announcementsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the selected announcement.
     */
    async announcementsUpdateRaw(requestParameters: AnnouncementsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Announcement>> {
        if (requestParameters['announcementId'] == null) {
            throw new runtime.RequiredError(
                'announcementId',
                'Required parameter "announcementId" was null or undefined when calling announcementsUpdate().'
            );
        }

        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling announcementsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/announcements/{announcement_id}/`;
        urlPath = urlPath.replace(`{${"announcement_id"}}`, encodeURIComponent(String(requestParameters['announcementId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AnnouncementToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnouncementFromJSON(jsonValue));
    }

    /**
     * Edit the selected announcement.
     */
    async announcementsUpdate(requestParameters: AnnouncementsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Announcement> {
        const response = await this.announcementsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
