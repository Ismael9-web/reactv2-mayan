"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowTemplatesApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class WorkflowTemplatesApi extends runtime.BaseAPI {
    /**
     * Create a new workflow template.
     */
    workflowTemplatesCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTemplateToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new workflow template.
     */
    workflowTemplatesCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the selected workflow template.
     */
    workflowTemplatesDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the selected workflow template.
     */
    workflowTemplatesDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.workflowTemplatesDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Add a document type to a workflow template.
     */
    workflowTemplatesDocumentTypesAddCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesDocumentTypesAddCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesDocumentTypesAddCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/document_types/add/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTemplateDocumentTypeAddToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateDocumentTypeAddFromJSON)(jsonValue));
        });
    }
    /**
     * Add a document type to a workflow template.
     */
    workflowTemplatesDocumentTypesAddCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesDocumentTypesAddCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a list of all the document types attached to a workflow template.
     */
    workflowTemplatesDocumentTypesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesDocumentTypesList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/document_types/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentTypesList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the document types attached to a workflow template.
     */
    workflowTemplatesDocumentTypesList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesDocumentTypesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Remove a document type from a workflow template.
     */
    workflowTemplatesDocumentTypesRemoveCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesDocumentTypesRemoveCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesDocumentTypesRemoveCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/document_types/remove/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTemplateDocumentTypeRemoveToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateDocumentTypeRemoveFromJSON)(jsonValue));
        });
    }
    /**
     * Remove a document type from a workflow template.
     */
    workflowTemplatesDocumentTypesRemoveCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesDocumentTypesRemoveCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return a list of all the document executing a specific workflow template.
     */
    workflowTemplatesDocumentsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesDocumentsList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/documents/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CabinetsDocumentsList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Return a list of all the document executing a specific workflow template.
     */
    workflowTemplatesDocumentsList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesDocumentsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns an image representation of the selected workflow template.
     */
    workflowTemplatesImageReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesImageRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/image/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Returns an image representation of the selected workflow template.
     */
    workflowTemplatesImageRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.workflowTemplatesImageReadRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Returns a list of all the workflow templates.
     */
    workflowTemplatesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplatesList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the workflow templates.
     */
    workflowTemplatesList() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.workflowTemplatesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the selected workflow template.
     */
    workflowTemplatesPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesPartialUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesPartialUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTemplateToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the selected workflow template.
     */
    workflowTemplatesPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the details of the selected workflow template.
     */
    workflowTemplatesReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateFromJSON)(jsonValue));
        });
    }
    /**
     * Return the details of the selected workflow template.
     */
    workflowTemplatesRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new workflow template state action.
     */
    workflowTemplatesStatesActionsCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesActionsCreate().');
            }
            if (requestParameters['workflowTemplateStateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateId', 'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesActionsCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesStatesActionsCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/actions/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTemplateStateActionToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateStateActionFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new workflow template state action.
     */
    workflowTemplatesStatesActionsCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesStatesActionsCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the selected workflow template state action.
     */
    workflowTemplatesStatesActionsDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesActionsDelete().');
            }
            if (requestParameters['workflowTemplateStateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateId', 'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesActionsDelete().');
            }
            if (requestParameters['workflowTemplateStateActionId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateActionId', 'Required parameter "workflowTemplateStateActionId" was null or undefined when calling workflowTemplatesStatesActionsDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/actions/{workflow_template_state_action_id}/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_action_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateActionId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the selected workflow template state action.
     */
    workflowTemplatesStatesActionsDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.workflowTemplatesStatesActionsDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Returns a list of all the workflow template state actions.
     */
    workflowTemplatesStatesActionsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesActionsList().');
            }
            if (requestParameters['workflowTemplateStateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateId', 'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesActionsList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/actions/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplatesStatesActionsList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the workflow template state actions.
     */
    workflowTemplatesStatesActionsList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesStatesActionsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the selected workflow template state action.
     */
    workflowTemplatesStatesActionsPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesActionsPartialUpdate().');
            }
            if (requestParameters['workflowTemplateStateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateId', 'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesActionsPartialUpdate().');
            }
            if (requestParameters['workflowTemplateStateActionId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateActionId', 'Required parameter "workflowTemplateStateActionId" was null or undefined when calling workflowTemplatesStatesActionsPartialUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesStatesActionsPartialUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/actions/{workflow_template_state_action_id}/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_action_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateActionId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTemplateStateActionToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateStateActionFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the selected workflow template state action.
     */
    workflowTemplatesStatesActionsPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesStatesActionsPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the details of the selected workflow template state action.
     */
    workflowTemplatesStatesActionsReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesActionsRead().');
            }
            if (requestParameters['workflowTemplateStateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateId', 'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesActionsRead().');
            }
            if (requestParameters['workflowTemplateStateActionId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateActionId', 'Required parameter "workflowTemplateStateActionId" was null or undefined when calling workflowTemplatesStatesActionsRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/actions/{workflow_template_state_action_id}/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_action_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateActionId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateStateActionFromJSON)(jsonValue));
        });
    }
    /**
     * Return the details of the selected workflow template state action.
     */
    workflowTemplatesStatesActionsRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesStatesActionsReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the selected workflow template state action.
     */
    workflowTemplatesStatesActionsUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesActionsUpdate().');
            }
            if (requestParameters['workflowTemplateStateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateId', 'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesActionsUpdate().');
            }
            if (requestParameters['workflowTemplateStateActionId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateActionId', 'Required parameter "workflowTemplateStateActionId" was null or undefined when calling workflowTemplatesStatesActionsUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesStatesActionsUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/actions/{workflow_template_state_action_id}/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_action_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateActionId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTemplateStateActionToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateStateActionFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the selected workflow template state action.
     */
    workflowTemplatesStatesActionsUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesStatesActionsUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new workflow template state.
     */
    workflowTemplatesStatesCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesStatesCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/states/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTemplateStateToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateStateFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new workflow template state.
     */
    workflowTemplatesStatesCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesStatesCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the selected workflow template state.
     */
    workflowTemplatesStatesDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesDelete().');
            }
            if (requestParameters['workflowTemplateStateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateId', 'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the selected workflow template state.
     */
    workflowTemplatesStatesDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.workflowTemplatesStatesDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Return a list of all the documents at a specific workflow template state.
     */
    workflowTemplatesStatesDocumentsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesDocumentsList().');
            }
            if (requestParameters['workflowTemplateStateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateId', 'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesDocumentsList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/documents/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CabinetsDocumentsList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Return a list of all the documents at a specific workflow template state.
     */
    workflowTemplatesStatesDocumentsList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesStatesDocumentsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new workflow template state escalation.
     */
    workflowTemplatesStatesEscalationsCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesEscalationsCreate().');
            }
            if (requestParameters['workflowTemplateStateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateId', 'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesEscalationsCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesStatesEscalationsCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/escalations/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTemplateStateEscalationToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateStateEscalationFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new workflow template state escalation.
     */
    workflowTemplatesStatesEscalationsCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesStatesEscalationsCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the selected workflow template state escalation.
     */
    workflowTemplatesStatesEscalationsDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesEscalationsDelete().');
            }
            if (requestParameters['workflowTemplateStateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateId', 'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesEscalationsDelete().');
            }
            if (requestParameters['workflowTemplateStateEscalationId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateEscalationId', 'Required parameter "workflowTemplateStateEscalationId" was null or undefined when calling workflowTemplatesStatesEscalationsDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/escalations/{workflow_template_state_escalation_id}/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_escalation_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateEscalationId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the selected workflow template state escalation.
     */
    workflowTemplatesStatesEscalationsDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.workflowTemplatesStatesEscalationsDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Returns a list of all the workflow template state escalations.
     */
    workflowTemplatesStatesEscalationsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesEscalationsList().');
            }
            if (requestParameters['workflowTemplateStateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateId', 'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesEscalationsList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/escalations/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplatesStatesEscalationsList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the workflow template state escalations.
     */
    workflowTemplatesStatesEscalationsList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesStatesEscalationsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the selected workflow template state escalation.
     */
    workflowTemplatesStatesEscalationsPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesEscalationsPartialUpdate().');
            }
            if (requestParameters['workflowTemplateStateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateId', 'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesEscalationsPartialUpdate().');
            }
            if (requestParameters['workflowTemplateStateEscalationId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateEscalationId', 'Required parameter "workflowTemplateStateEscalationId" was null or undefined when calling workflowTemplatesStatesEscalationsPartialUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesStatesEscalationsPartialUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/escalations/{workflow_template_state_escalation_id}/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_escalation_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateEscalationId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTemplateStateEscalationToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateStateEscalationFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the selected workflow template state escalation.
     */
    workflowTemplatesStatesEscalationsPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesStatesEscalationsPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the details of the selected workflow template state escalation.
     */
    workflowTemplatesStatesEscalationsReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesEscalationsRead().');
            }
            if (requestParameters['workflowTemplateStateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateId', 'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesEscalationsRead().');
            }
            if (requestParameters['workflowTemplateStateEscalationId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateEscalationId', 'Required parameter "workflowTemplateStateEscalationId" was null or undefined when calling workflowTemplatesStatesEscalationsRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/escalations/{workflow_template_state_escalation_id}/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_escalation_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateEscalationId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateStateEscalationFromJSON)(jsonValue));
        });
    }
    /**
     * Return the details of the selected workflow template state escalation.
     */
    workflowTemplatesStatesEscalationsRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesStatesEscalationsReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the selected workflow template state escalation.
     */
    workflowTemplatesStatesEscalationsUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesEscalationsUpdate().');
            }
            if (requestParameters['workflowTemplateStateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateId', 'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesEscalationsUpdate().');
            }
            if (requestParameters['workflowTemplateStateEscalationId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateEscalationId', 'Required parameter "workflowTemplateStateEscalationId" was null or undefined when calling workflowTemplatesStatesEscalationsUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesStatesEscalationsUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/escalations/{workflow_template_state_escalation_id}/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_escalation_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateEscalationId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTemplateStateEscalationToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateStateEscalationFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the selected workflow template state escalation.
     */
    workflowTemplatesStatesEscalationsUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesStatesEscalationsUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a list of all the workflow template states.
     */
    workflowTemplatesStatesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/states/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplatesStatesList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the workflow template states.
     */
    workflowTemplatesStatesList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesStatesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the selected workflow template state.
     */
    workflowTemplatesStatesPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesPartialUpdate().');
            }
            if (requestParameters['workflowTemplateStateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateId', 'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesPartialUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesStatesPartialUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTemplateStateToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateStateFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the selected workflow template state.
     */
    workflowTemplatesStatesPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesStatesPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the details of the selected workflow template state.
     */
    workflowTemplatesStatesReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesRead().');
            }
            if (requestParameters['workflowTemplateStateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateId', 'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateStateFromJSON)(jsonValue));
        });
    }
    /**
     * Return the details of the selected workflow template state.
     */
    workflowTemplatesStatesRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesStatesReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the selected workflow template state.
     */
    workflowTemplatesStatesUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesStatesUpdate().');
            }
            if (requestParameters['workflowTemplateStateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateStateId', 'Required parameter "workflowTemplateStateId" was null or undefined when calling workflowTemplatesStatesUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesStatesUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_state_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateStateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTemplateStateToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateStateFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the selected workflow template state.
     */
    workflowTemplatesStatesUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesStatesUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new workflow template transition.
     */
    workflowTemplatesTransitionsCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesTransitionsCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/transitions/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTemplateTransitionToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateTransitionFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new workflow template transition.
     */
    workflowTemplatesTransitionsCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesTransitionsCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the selected workflow template transition.
     */
    workflowTemplatesTransitionsDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsDelete().');
            }
            if (requestParameters['workflowTemplateTransitionId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionId', 'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the selected workflow template transition.
     */
    workflowTemplatesTransitionsDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.workflowTemplatesTransitionsDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Create a new workflow template transition field.
     */
    workflowTemplatesTransitionsFieldsCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsFieldsCreate().');
            }
            if (requestParameters['workflowTemplateTransitionId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionId', 'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsFieldsCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesTransitionsFieldsCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/fields/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTransitionFieldToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTransitionFieldFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new workflow template transition field.
     */
    workflowTemplatesTransitionsFieldsCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesTransitionsFieldsCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the selected workflow template transition field.
     */
    workflowTemplatesTransitionsFieldsDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsFieldsDelete().');
            }
            if (requestParameters['workflowTemplateTransitionId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionId', 'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsFieldsDelete().');
            }
            if (requestParameters['workflowTemplateTransitionFieldId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionFieldId', 'Required parameter "workflowTemplateTransitionFieldId" was null or undefined when calling workflowTemplatesTransitionsFieldsDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/fields/{workflow_template_transition_field_id}`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_field_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionFieldId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the selected workflow template transition field.
     */
    workflowTemplatesTransitionsFieldsDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.workflowTemplatesTransitionsFieldsDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Returns a list of all the workflow template transition fields.
     */
    workflowTemplatesTransitionsFieldsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsFieldsList().');
            }
            if (requestParameters['workflowTemplateTransitionId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionId', 'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsFieldsList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/fields/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplatesTransitionsFieldsList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the workflow template transition fields.
     */
    workflowTemplatesTransitionsFieldsList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesTransitionsFieldsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the selected workflow template transition field.
     */
    workflowTemplatesTransitionsFieldsPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsFieldsPartialUpdate().');
            }
            if (requestParameters['workflowTemplateTransitionId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionId', 'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsFieldsPartialUpdate().');
            }
            if (requestParameters['workflowTemplateTransitionFieldId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionFieldId', 'Required parameter "workflowTemplateTransitionFieldId" was null or undefined when calling workflowTemplatesTransitionsFieldsPartialUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesTransitionsFieldsPartialUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/fields/{workflow_template_transition_field_id}`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_field_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionFieldId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTransitionFieldToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTransitionFieldFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the selected workflow template transition field.
     */
    workflowTemplatesTransitionsFieldsPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesTransitionsFieldsPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the details of the selected workflow template transition field.
     */
    workflowTemplatesTransitionsFieldsReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsFieldsRead().');
            }
            if (requestParameters['workflowTemplateTransitionId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionId', 'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsFieldsRead().');
            }
            if (requestParameters['workflowTemplateTransitionFieldId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionFieldId', 'Required parameter "workflowTemplateTransitionFieldId" was null or undefined when calling workflowTemplatesTransitionsFieldsRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/fields/{workflow_template_transition_field_id}`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_field_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionFieldId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTransitionFieldFromJSON)(jsonValue));
        });
    }
    /**
     * Return the details of the selected workflow template transition field.
     */
    workflowTemplatesTransitionsFieldsRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesTransitionsFieldsReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the selected workflow template transition field.
     */
    workflowTemplatesTransitionsFieldsUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsFieldsUpdate().');
            }
            if (requestParameters['workflowTemplateTransitionId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionId', 'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsFieldsUpdate().');
            }
            if (requestParameters['workflowTemplateTransitionFieldId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionFieldId', 'Required parameter "workflowTemplateTransitionFieldId" was null or undefined when calling workflowTemplatesTransitionsFieldsUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesTransitionsFieldsUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/fields/{workflow_template_transition_field_id}`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_field_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionFieldId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTransitionFieldToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTransitionFieldFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the selected workflow template transition field.
     */
    workflowTemplatesTransitionsFieldsUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesTransitionsFieldsUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a list of all the workflow template transitions.
     */
    workflowTemplatesTransitionsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/transitions/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DocumentsWorkflowInstancesLogEntriesTransitionsList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the workflow template transitions.
     */
    workflowTemplatesTransitionsList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesTransitionsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the selected workflow template transition.
     */
    workflowTemplatesTransitionsPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsPartialUpdate().');
            }
            if (requestParameters['workflowTemplateTransitionId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionId', 'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsPartialUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesTransitionsPartialUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTemplateTransitionToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateTransitionFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the selected workflow template transition.
     */
    workflowTemplatesTransitionsPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesTransitionsPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the details of the selected workflow template transition.
     */
    workflowTemplatesTransitionsReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsRead().');
            }
            if (requestParameters['workflowTemplateTransitionId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionId', 'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateTransitionFromJSON)(jsonValue));
        });
    }
    /**
     * Return the details of the selected workflow template transition.
     */
    workflowTemplatesTransitionsRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesTransitionsReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new workflow template transition trigger.
     */
    workflowTemplatesTransitionsTriggersCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsTriggersCreate().');
            }
            if (requestParameters['workflowTemplateTransitionId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionId', 'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsTriggersCreate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesTransitionsTriggersCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/triggers/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTemplateTransitionTriggerToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateTransitionTriggerFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new workflow template transition trigger.
     */
    workflowTemplatesTransitionsTriggersCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesTransitionsTriggersCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the selected workflow template transition trigger.
     */
    workflowTemplatesTransitionsTriggersDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsTriggersDelete().');
            }
            if (requestParameters['workflowTemplateTransitionId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionId', 'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsTriggersDelete().');
            }
            if (requestParameters['workflowTemplateTransitionTriggerId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionTriggerId', 'Required parameter "workflowTemplateTransitionTriggerId" was null or undefined when calling workflowTemplatesTransitionsTriggersDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/triggers/{workflow_template_transition_trigger_id}`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_trigger_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionTriggerId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete the selected workflow template transition trigger.
     */
    workflowTemplatesTransitionsTriggersDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.workflowTemplatesTransitionsTriggersDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Returns a list of all the workflow template transition triggers.
     */
    workflowTemplatesTransitionsTriggersListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsTriggersList().');
            }
            if (requestParameters['workflowTemplateTransitionId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionId', 'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsTriggersList().');
            }
            const queryParameters = {};
            if (requestParameters['ordering'] != null) {
                queryParameters['_ordering'] = requestParameters['ordering'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page_size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/triggers/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplatesTransitionsTriggersList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Returns a list of all the workflow template transition triggers.
     */
    workflowTemplatesTransitionsTriggersList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesTransitionsTriggersListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the selected workflow template transition trigger.
     */
    workflowTemplatesTransitionsTriggersPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsTriggersPartialUpdate().');
            }
            if (requestParameters['workflowTemplateTransitionId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionId', 'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsTriggersPartialUpdate().');
            }
            if (requestParameters['workflowTemplateTransitionTriggerId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionTriggerId', 'Required parameter "workflowTemplateTransitionTriggerId" was null or undefined when calling workflowTemplatesTransitionsTriggersPartialUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesTransitionsTriggersPartialUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/triggers/{workflow_template_transition_trigger_id}`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_trigger_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionTriggerId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTemplateTransitionTriggerToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateTransitionTriggerFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the selected workflow template transition trigger.
     */
    workflowTemplatesTransitionsTriggersPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesTransitionsTriggersPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return the details of the selected workflow template transition trigger.
     */
    workflowTemplatesTransitionsTriggersReadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsTriggersRead().');
            }
            if (requestParameters['workflowTemplateTransitionId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionId', 'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsTriggersRead().');
            }
            if (requestParameters['workflowTemplateTransitionTriggerId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionTriggerId', 'Required parameter "workflowTemplateTransitionTriggerId" was null or undefined when calling workflowTemplatesTransitionsTriggersRead().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/triggers/{workflow_template_transition_trigger_id}`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_trigger_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionTriggerId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateTransitionTriggerFromJSON)(jsonValue));
        });
    }
    /**
     * Return the details of the selected workflow template transition trigger.
     */
    workflowTemplatesTransitionsTriggersRead(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesTransitionsTriggersReadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the selected workflow template transition trigger.
     */
    workflowTemplatesTransitionsTriggersUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsTriggersUpdate().');
            }
            if (requestParameters['workflowTemplateTransitionId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionId', 'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsTriggersUpdate().');
            }
            if (requestParameters['workflowTemplateTransitionTriggerId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionTriggerId', 'Required parameter "workflowTemplateTransitionTriggerId" was null or undefined when calling workflowTemplatesTransitionsTriggersUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesTransitionsTriggersUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/triggers/{workflow_template_transition_trigger_id}`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_trigger_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionTriggerId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTemplateTransitionTriggerToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateTransitionTriggerFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the selected workflow template transition trigger.
     */
    workflowTemplatesTransitionsTriggersUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesTransitionsTriggersUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the selected workflow template transition.
     */
    workflowTemplatesTransitionsUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesTransitionsUpdate().');
            }
            if (requestParameters['workflowTemplateTransitionId'] == null) {
                throw new runtime.RequiredError('workflowTemplateTransitionId', 'Required parameter "workflowTemplateTransitionId" was null or undefined when calling workflowTemplatesTransitionsUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesTransitionsUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            urlPath = urlPath.replace(`{${"workflow_template_transition_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateTransitionId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTemplateTransitionToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateTransitionFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the selected workflow template transition.
     */
    workflowTemplatesTransitionsUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesTransitionsUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Edit the selected workflow template.
     */
    workflowTemplatesUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['workflowTemplateId'] == null) {
                throw new runtime.RequiredError('workflowTemplateId', 'Required parameter "workflowTemplateId" was null or undefined when calling workflowTemplatesUpdate().');
            }
            if (requestParameters['data'] == null) {
                throw new runtime.RequiredError('data', 'Required parameter "data" was null or undefined when calling workflowTemplatesUpdate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
            }
            let urlPath = `/workflow_templates/{workflow_template_id}/`;
            urlPath = urlPath.replace(`{${"workflow_template_id"}}`, encodeURIComponent(String(requestParameters['workflowTemplateId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WorkflowTemplateToJSON)(requestParameters['data']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WorkflowTemplateFromJSON)(jsonValue));
        });
    }
    /**
     * Edit the selected workflow template.
     */
    workflowTemplatesUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.workflowTemplatesUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.WorkflowTemplatesApi = WorkflowTemplatesApi;
