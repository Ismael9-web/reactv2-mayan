/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EventTypeNamespace,
  EventTypeNamespacesEventTypesList200Response,
  EventTypeNamespacesList200Response,
} from '../models/index';
import {
    EventTypeNamespaceFromJSON,
    EventTypeNamespaceToJSON,
    EventTypeNamespacesEventTypesList200ResponseFromJSON,
    EventTypeNamespacesEventTypesList200ResponseToJSON,
    EventTypeNamespacesList200ResponseFromJSON,
    EventTypeNamespacesList200ResponseToJSON,
} from '../models/index';

export interface EventTypeNamespacesEventTypesListRequest {
    name: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface EventTypeNamespacesListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface EventTypeNamespacesReadRequest {
    name: string;
}

/**
 * 
 */
export class EventTypeNamespacesApi extends runtime.BaseAPI {

    /**
     * Returns a list of all the available event types from a namespaces.
     */
    async eventTypeNamespacesEventTypesListRaw(requestParameters: EventTypeNamespacesEventTypesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventTypeNamespacesEventTypesList200Response>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling eventTypeNamespacesEventTypesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/event_type_namespaces/{name}/event_types/`;
        urlPath = urlPath.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventTypeNamespacesEventTypesList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the available event types from a namespaces.
     */
    async eventTypeNamespacesEventTypesList(requestParameters: EventTypeNamespacesEventTypesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventTypeNamespacesEventTypesList200Response> {
        const response = await this.eventTypeNamespacesEventTypesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all the available event type namespaces.
     */
    async eventTypeNamespacesListRaw(requestParameters: EventTypeNamespacesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventTypeNamespacesList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/event_type_namespaces/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventTypeNamespacesList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the available event type namespaces.
     */
    async eventTypeNamespacesList(requestParameters: EventTypeNamespacesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventTypeNamespacesList200Response> {
        const response = await this.eventTypeNamespacesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the details of an event type namespace.
     */
    async eventTypeNamespacesReadRaw(requestParameters: EventTypeNamespacesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventTypeNamespace>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling eventTypeNamespacesRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/event_type_namespaces/{name}/`;
        urlPath = urlPath.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventTypeNamespaceFromJSON(jsonValue));
    }

    /**
     * Returns the details of an event type namespace.
     */
    async eventTypeNamespacesRead(requestParameters: EventTypeNamespacesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventTypeNamespace> {
        const response = await this.eventTypeNamespacesReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
