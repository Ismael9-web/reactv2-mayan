/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SearchModel,
  SearchModelsList200Response,
} from '../models/index';
import {
    SearchModelFromJSON,
    SearchModelToJSON,
    SearchModelsList200ResponseFromJSON,
    SearchModelsList200ResponseToJSON,
} from '../models/index';

export interface SearchModelsListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface SearchModelsReadRequest {
    searchModelPk: string;
}

/**
 * 
 */
export class SearchModelsApi extends runtime.BaseAPI {

    /**
     * Returns a list of all the available search models.
     */
    async searchModelsListRaw(requestParameters: SearchModelsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchModelsList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ordering'] != null) {
            queryParameters['_ordering'] = requestParameters['ordering'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/search_models/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchModelsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the available search models.
     */
    async searchModelsList(requestParameters: SearchModelsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchModelsList200Response> {
        const response = await this.searchModelsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the details of the selected search models.
     */
    async searchModelsReadRaw(requestParameters: SearchModelsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchModel>> {
        if (requestParameters['searchModelPk'] == null) {
            throw new runtime.RequiredError(
                'searchModelPk',
                'Required parameter "searchModelPk" was null or undefined when calling searchModelsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/search_models/{search_model_pk}/`;
        urlPath = urlPath.replace(`{${"search_model_pk"}}`, encodeURIComponent(String(requestParameters['searchModelPk'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchModelFromJSON(jsonValue));
    }

    /**
     * Returns the details of the selected search models.
     */
    async searchModelsRead(requestParameters: SearchModelsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchModel> {
        const response = await this.searchModelsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
