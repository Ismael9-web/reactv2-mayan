/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ContentType } from './ContentType';
import {
    ContentTypeFromJSON,
    ContentTypeFromJSONTyped,
    ContentTypeToJSON,
    ContentTypeToJSONTyped,
} from './ContentType';

/**
 * 
 * @export
 * @interface DocumentVersionPage
 */
export interface DocumentVersionPage {
    /**
     * 
     * @type {ContentType}
     * @memberof DocumentVersionPage
     */
    contentType?: ContentType;
    /**
     * Content type ID of the source object for the page.
     * @type {number}
     * @memberof DocumentVersionPage
     */
    contentTypeId: number;
    /**
     * 
     * @type {string}
     * @memberof DocumentVersionPage
     */
    readonly documentVersionId?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentVersionPage
     */
    readonly documentVersionUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof DocumentVersionPage
     */
    readonly id?: number;
    /**
     * 
     * @type {string}
     * @memberof DocumentVersionPage
     */
    readonly imageUrl?: string;
    /**
     * ID for the source object of the page.
     * @type {number}
     * @memberof DocumentVersionPage
     */
    objectId: number;
    /**
     * Unique integer number for the page. Pages are ordered by this number.
     * @type {number}
     * @memberof DocumentVersionPage
     */
    pageNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof DocumentVersionPage
     */
    readonly url?: string;
}

/**
 * Check if a given object implements the DocumentVersionPage interface.
 */
export function instanceOfDocumentVersionPage(value: object): value is DocumentVersionPage {
    if (!('contentTypeId' in value) || value['contentTypeId'] === undefined) return false;
    if (!('objectId' in value) || value['objectId'] === undefined) return false;
    return true;
}

export function DocumentVersionPageFromJSON(json: any): DocumentVersionPage {
    return DocumentVersionPageFromJSONTyped(json, false);
}

export function DocumentVersionPageFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentVersionPage {
    if (json == null) {
        return json;
    }
    return {
        
        'contentType': json['content_type'] == null ? undefined : ContentTypeFromJSON(json['content_type']),
        'contentTypeId': json['content_type_id'],
        'documentVersionId': json['document_version_id'] == null ? undefined : json['document_version_id'],
        'documentVersionUrl': json['document_version_url'] == null ? undefined : json['document_version_url'],
        'id': json['id'] == null ? undefined : json['id'],
        'imageUrl': json['image_url'] == null ? undefined : json['image_url'],
        'objectId': json['object_id'],
        'pageNumber': json['page_number'] == null ? undefined : json['page_number'],
        'url': json['url'] == null ? undefined : json['url'],
    };
}

export function DocumentVersionPageToJSON(json: any): DocumentVersionPage {
    return DocumentVersionPageToJSONTyped(json, false);
}

export function DocumentVersionPageToJSONTyped(value?: Omit<DocumentVersionPage, 'document_version_id'|'document_version_url'|'id'|'image_url'|'url'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'content_type': ContentTypeToJSON(value['contentType']),
        'content_type_id': value['contentTypeId'],
        'object_id': value['objectId'],
        'page_number': value['pageNumber'],
    };
}

