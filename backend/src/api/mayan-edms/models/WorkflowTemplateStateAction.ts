/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface WorkflowTemplateStateAction
 */
export interface WorkflowTemplateStateAction {
    /**
     * JSON encoded data for the backend class.
     * @type {string}
     * @memberof WorkflowTemplateStateAction
     */
    backendData?: string;
    /**
     * The dotted Python path to the backend class.
     * @type {string}
     * @memberof WorkflowTemplateStateAction
     */
    backendPath: string;
    /**
     * The condition that will determine if this state action is executed or not. The condition is evaluated against the workflow instance. Conditions that do not return any value, that return the Python logical None, or an empty string ('') are considered to be logical false, any other value is considered to be the logical true.
     * @type {string}
     * @memberof WorkflowTemplateStateAction
     */
    condition?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowTemplateStateAction
     */
    enabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof WorkflowTemplateStateAction
     */
    readonly id?: number;
    /**
     * A short text describing the action. Actions are execute by alphabetical order.
     * @type {string}
     * @memberof WorkflowTemplateStateAction
     */
    label: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTemplateStateAction
     */
    readonly url?: string;
    /**
     * At which moment of the state this action will execute.
     * @type {number}
     * @memberof WorkflowTemplateStateAction
     */
    when?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkflowTemplateStateAction
     */
    readonly workflowTemplateStateId?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTemplateStateAction
     */
    readonly workflowTemplateStateUrl?: string;
}

/**
 * Check if a given object implements the WorkflowTemplateStateAction interface.
 */
export function instanceOfWorkflowTemplateStateAction(value: object): value is WorkflowTemplateStateAction {
    if (!('backendPath' in value) || value['backendPath'] === undefined) return false;
    if (!('label' in value) || value['label'] === undefined) return false;
    return true;
}

export function WorkflowTemplateStateActionFromJSON(json: any): WorkflowTemplateStateAction {
    return WorkflowTemplateStateActionFromJSONTyped(json, false);
}

export function WorkflowTemplateStateActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkflowTemplateStateAction {
    if (json == null) {
        return json;
    }
    return {
        
        'backendData': json['backend_data'] == null ? undefined : json['backend_data'],
        'backendPath': json['backend_path'],
        'condition': json['condition'] == null ? undefined : json['condition'],
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'id': json['id'] == null ? undefined : json['id'],
        'label': json['label'],
        'url': json['url'] == null ? undefined : json['url'],
        'when': json['when'] == null ? undefined : json['when'],
        'workflowTemplateStateId': json['workflow_template_state_id'] == null ? undefined : json['workflow_template_state_id'],
        'workflowTemplateStateUrl': json['workflow_template_state_url'] == null ? undefined : json['workflow_template_state_url'],
    };
}

export function WorkflowTemplateStateActionToJSON(json: any): WorkflowTemplateStateAction {
    return WorkflowTemplateStateActionToJSONTyped(json, false);
}

export function WorkflowTemplateStateActionToJSONTyped(value?: Omit<WorkflowTemplateStateAction, 'id'|'url'|'workflow_template_state_id'|'workflow_template_state_url'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'backend_data': value['backendData'],
        'backend_path': value['backendPath'],
        'condition': value['condition'],
        'enabled': value['enabled'],
        'label': value['label'],
        'when': value['when'],
    };
}

