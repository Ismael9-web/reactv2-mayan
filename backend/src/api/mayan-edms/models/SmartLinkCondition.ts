/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SmartLinkCondition
 */
export interface SmartLinkCondition {
    /**
     * 
     * @type {boolean}
     * @memberof SmartLinkCondition
     */
    enabled?: boolean;
    /**
     * The expression using document properties to be evaluated against the foreign document field.
     * @type {string}
     * @memberof SmartLinkCondition
     */
    expression: string;
    /**
     * This represents the metadata of all other documents.
     * @type {string}
     * @memberof SmartLinkCondition
     */
    foreignDocumentData: string;
    /**
     * The inclusion is ignored for the first item.
     * @type {string}
     * @memberof SmartLinkCondition
     */
    inclusion?: SmartLinkConditionInclusionEnum;
    /**
     * 
     * @type {number}
     * @memberof SmartLinkCondition
     */
    readonly id?: number;
    /**
     * Inverts the logic of the operator.
     * @type {boolean}
     * @memberof SmartLinkCondition
     */
    negated?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SmartLinkCondition
     */
    operator: SmartLinkConditionOperatorEnum;
    /**
     * 
     * @type {string}
     * @memberof SmartLinkCondition
     */
    readonly smartLinkId?: string;
    /**
     * 
     * @type {string}
     * @memberof SmartLinkCondition
     */
    readonly smartLinkUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof SmartLinkCondition
     */
    readonly url?: string;
}


/**
 * @export
 */
export const SmartLinkConditionInclusionEnum = {
    Ampersand: '&',
    Pipe: '|'
} as const;
export type SmartLinkConditionInclusionEnum = typeof SmartLinkConditionInclusionEnum[keyof typeof SmartLinkConditionInclusionEnum];

/**
 * @export
 */
export const SmartLinkConditionOperatorEnum = {
    Exact: 'exact',
    Iexact: 'iexact',
    Contains: 'contains',
    Icontains: 'icontains',
    In: 'in',
    Gt: 'gt',
    Gte: 'gte',
    Lt: 'lt',
    Lte: 'lte',
    Startswith: 'startswith',
    Istartswith: 'istartswith',
    Endswith: 'endswith',
    Iendswith: 'iendswith',
    Regex: 'regex',
    Iregex: 'iregex'
} as const;
export type SmartLinkConditionOperatorEnum = typeof SmartLinkConditionOperatorEnum[keyof typeof SmartLinkConditionOperatorEnum];


/**
 * Check if a given object implements the SmartLinkCondition interface.
 */
export function instanceOfSmartLinkCondition(value: object): value is SmartLinkCondition {
    if (!('expression' in value) || value['expression'] === undefined) return false;
    if (!('foreignDocumentData' in value) || value['foreignDocumentData'] === undefined) return false;
    if (!('operator' in value) || value['operator'] === undefined) return false;
    return true;
}

export function SmartLinkConditionFromJSON(json: any): SmartLinkCondition {
    return SmartLinkConditionFromJSONTyped(json, false);
}

export function SmartLinkConditionFromJSONTyped(json: any, ignoreDiscriminator: boolean): SmartLinkCondition {
    if (json == null) {
        return json;
    }
    return {
        
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'expression': json['expression'],
        'foreignDocumentData': json['foreign_document_data'],
        'inclusion': json['inclusion'] == null ? undefined : json['inclusion'],
        'id': json['id'] == null ? undefined : json['id'],
        'negated': json['negated'] == null ? undefined : json['negated'],
        'operator': json['operator'],
        'smartLinkId': json['smart_link_id'] == null ? undefined : json['smart_link_id'],
        'smartLinkUrl': json['smart_link_url'] == null ? undefined : json['smart_link_url'],
        'url': json['url'] == null ? undefined : json['url'],
    };
}

export function SmartLinkConditionToJSON(json: any): SmartLinkCondition {
    return SmartLinkConditionToJSONTyped(json, false);
}

export function SmartLinkConditionToJSONTyped(value?: Omit<SmartLinkCondition, 'id'|'smart_link_id'|'smart_link_url'|'url'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'enabled': value['enabled'],
        'expression': value['expression'],
        'foreign_document_data': value['foreignDocumentData'],
        'inclusion': value['inclusion'],
        'negated': value['negated'],
        'operator': value['operator'],
    };
}

