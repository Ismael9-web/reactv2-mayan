/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DocumentFile } from './DocumentFile';
import {
    DocumentFileFromJSON,
    DocumentFileFromJSONTyped,
    DocumentFileToJSON,
    DocumentFileToJSONTyped,
} from './DocumentFile';
import type { DocumentType } from './DocumentType';
import {
    DocumentTypeFromJSON,
    DocumentTypeFromJSONTyped,
    DocumentTypeToJSON,
    DocumentTypeToJSONTyped,
} from './DocumentType';
import type { DocumentVersion } from './DocumentVersion';
import {
    DocumentVersionFromJSON,
    DocumentVersionFromJSONTyped,
    DocumentVersionToJSON,
    DocumentVersionToJSONTyped,
} from './DocumentVersion';

/**
 * 
 * @export
 * @interface DuplicateTargetDocument
 */
export interface DuplicateTargetDocument {
    /**
     * 
     * @type {string}
     * @memberof DuplicateTargetDocument
     */
    readonly backend?: string;
    /**
     * The date and time of the document creation.
     * @type {Date}
     * @memberof DuplicateTargetDocument
     */
    readonly datetimeCreated?: Date;
    /**
     * An optional short text describing a document.
     * @type {string}
     * @memberof DuplicateTargetDocument
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof DuplicateTargetDocument
     */
    readonly documentChangeTypeUrl?: string;
    /**
     * 
     * @type {DocumentType}
     * @memberof DuplicateTargetDocument
     */
    documentType?: DocumentType;
    /**
     * 
     * @type {DocumentFile}
     * @memberof DuplicateTargetDocument
     */
    fileLatest?: DocumentFile;
    /**
     * 
     * @type {string}
     * @memberof DuplicateTargetDocument
     */
    readonly fileListUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof DuplicateTargetDocument
     */
    readonly id?: number;
    /**
     * A short text identifying the document. By default, will be set to the filename of the first file uploaded to the document.
     * @type {string}
     * @memberof DuplicateTargetDocument
     */
    label?: string;
    /**
     * The primary language in the document.
     * @type {string}
     * @memberof DuplicateTargetDocument
     */
    language?: string;
    /**
     * 
     * @type {string}
     * @memberof DuplicateTargetDocument
     */
    readonly url?: string;
    /**
     * UUID of a document, universally Unique ID. An unique identifier generated for each document.
     * @type {string}
     * @memberof DuplicateTargetDocument
     */
    readonly uuid?: string;
    /**
     * 
     * @type {DocumentVersion}
     * @memberof DuplicateTargetDocument
     */
    versionActive?: DocumentVersion;
    /**
     * 
     * @type {string}
     * @memberof DuplicateTargetDocument
     */
    readonly versionListUrl?: string;
}

/**
 * Check if a given object implements the DuplicateTargetDocument interface.
 */
export function instanceOfDuplicateTargetDocument(value: object): value is DuplicateTargetDocument {
    return true;
}

export function DuplicateTargetDocumentFromJSON(json: any): DuplicateTargetDocument {
    return DuplicateTargetDocumentFromJSONTyped(json, false);
}

export function DuplicateTargetDocumentFromJSONTyped(json: any, ignoreDiscriminator: boolean): DuplicateTargetDocument {
    if (json == null) {
        return json;
    }
    return {
        
        'backend': json['backend'] == null ? undefined : json['backend'],
        'datetimeCreated': json['datetime_created'] == null ? undefined : (new Date(json['datetime_created'])),
        'description': json['description'] == null ? undefined : json['description'],
        'documentChangeTypeUrl': json['document_change_type_url'] == null ? undefined : json['document_change_type_url'],
        'documentType': json['document_type'] == null ? undefined : DocumentTypeFromJSON(json['document_type']),
        'fileLatest': json['file_latest'] == null ? undefined : DocumentFileFromJSON(json['file_latest']),
        'fileListUrl': json['file_list_url'] == null ? undefined : json['file_list_url'],
        'id': json['id'] == null ? undefined : json['id'],
        'label': json['label'] == null ? undefined : json['label'],
        'language': json['language'] == null ? undefined : json['language'],
        'url': json['url'] == null ? undefined : json['url'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'versionActive': json['version_active'] == null ? undefined : DocumentVersionFromJSON(json['version_active']),
        'versionListUrl': json['version_list_url'] == null ? undefined : json['version_list_url'],
    };
}

export function DuplicateTargetDocumentToJSON(json: any): DuplicateTargetDocument {
    return DuplicateTargetDocumentToJSONTyped(json, false);
}

export function DuplicateTargetDocumentToJSONTyped(value?: Omit<DuplicateTargetDocument, 'backend'|'datetime_created'|'document_change_type_url'|'file_list_url'|'id'|'url'|'uuid'|'version_list_url'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'description': value['description'],
        'document_type': DocumentTypeToJSON(value['documentType']),
        'file_latest': DocumentFileToJSON(value['fileLatest']),
        'label': value['label'],
        'language': value['language'],
        'version_active': DocumentVersionToJSON(value['versionActive']),
    };
}

