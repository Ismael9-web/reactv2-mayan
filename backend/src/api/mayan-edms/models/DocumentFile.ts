/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DocumentFilePage } from './DocumentFilePage';
import {
    DocumentFilePageFromJSON,
    DocumentFilePageFromJSONTyped,
    DocumentFilePageToJSON,
    DocumentFilePageToJSONTyped,
} from './DocumentFilePage';

/**
 * 
 * @export
 * @interface DocumentFile
 */
export interface DocumentFile {
    /**
     * A hash/checkdigit/fingerprint generated from the document's binary data. Only identical documents will have the same checksum.
     * @type {string}
     * @memberof DocumentFile
     */
    readonly checksum?: string | null;
    /**
     * An optional short text describing the document file.
     * @type {string}
     * @memberof DocumentFile
     */
    comment?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentFile
     */
    readonly documentId?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentFile
     */
    readonly documentUrl?: string;
    /**
     * The document file file encoding. binary 7-bit, binary 8-bit, text, base64, etc.
     * @type {string}
     * @memberof DocumentFile
     */
    readonly encoding?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DocumentFile
     */
    readonly file?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentFile
     */
    filename?: string;
    /**
     * 
     * @type {number}
     * @memberof DocumentFile
     */
    readonly id?: number;
    /**
     * The document file's file mimetype. MIME types are a standard way to describe the format of a file, in this case the file format of the document. Some examples: "text/plain" or "image/jpeg". 
     * @type {string}
     * @memberof DocumentFile
     */
    readonly mimetype?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DocumentFile
     */
    readonly pageListUrl?: string;
    /**
     * 
     * @type {DocumentFilePage}
     * @memberof DocumentFile
     */
    pagesFirst?: DocumentFilePage;
    /**
     * The size of the file in bytes.
     * @type {number}
     * @memberof DocumentFile
     */
    readonly size?: number | null;
    /**
     * The server date and time when the document file was processed.
     * @type {Date}
     * @memberof DocumentFile
     */
    readonly timestamp?: Date;
    /**
     * 
     * @type {string}
     * @memberof DocumentFile
     */
    readonly url?: string;
}

/**
 * Check if a given object implements the DocumentFile interface.
 */
export function instanceOfDocumentFile(value: object): value is DocumentFile {
    return true;
}

export function DocumentFileFromJSON(json: any): DocumentFile {
    return DocumentFileFromJSONTyped(json, false);
}

export function DocumentFileFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentFile {
    if (json == null) {
        return json;
    }
    return {
        
        'checksum': json['checksum'] == null ? undefined : json['checksum'],
        'comment': json['comment'] == null ? undefined : json['comment'],
        'documentId': json['document_id'] == null ? undefined : json['document_id'],
        'documentUrl': json['document_url'] == null ? undefined : json['document_url'],
        'encoding': json['encoding'] == null ? undefined : json['encoding'],
        'file': json['file'] == null ? undefined : json['file'],
        'filename': json['filename'] == null ? undefined : json['filename'],
        'id': json['id'] == null ? undefined : json['id'],
        'mimetype': json['mimetype'] == null ? undefined : json['mimetype'],
        'pageListUrl': json['page_list_url'] == null ? undefined : json['page_list_url'],
        'pagesFirst': json['pages_first'] == null ? undefined : DocumentFilePageFromJSON(json['pages_first']),
        'size': json['size'] == null ? undefined : json['size'],
        'timestamp': json['timestamp'] == null ? undefined : (new Date(json['timestamp'])),
        'url': json['url'] == null ? undefined : json['url'],
    };
}

export function DocumentFileToJSON(json: any): DocumentFile {
    return DocumentFileToJSONTyped(json, false);
}

export function DocumentFileToJSONTyped(value?: Omit<DocumentFile, 'checksum'|'document_id'|'document_url'|'encoding'|'file'|'id'|'mimetype'|'page_list_url'|'size'|'timestamp'|'url'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'comment': value['comment'],
        'filename': value['filename'],
        'pages_first': DocumentFilePageToJSON(value['pagesFirst']),
    };
}

