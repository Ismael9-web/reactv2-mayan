/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EventTypeNamespace
 */
export interface EventTypeNamespace {
    /**
     * 
     * @type {string}
     * @memberof EventTypeNamespace
     */
    readonly eventTypesUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof EventTypeNamespace
     */
    label: string;
    /**
     * 
     * @type {string}
     * @memberof EventTypeNamespace
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof EventTypeNamespace
     */
    readonly url?: string;
}

/**
 * Check if a given object implements the EventTypeNamespace interface.
 */
export function instanceOfEventTypeNamespace(value: object): value is EventTypeNamespace {
    if (!('label' in value) || value['label'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function EventTypeNamespaceFromJSON(json: any): EventTypeNamespace {
    return EventTypeNamespaceFromJSONTyped(json, false);
}

export function EventTypeNamespaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventTypeNamespace {
    if (json == null) {
        return json;
    }
    return {
        
        'eventTypesUrl': json['event_types_url'] == null ? undefined : json['event_types_url'],
        'label': json['label'],
        'name': json['name'],
        'url': json['url'] == null ? undefined : json['url'],
    };
}

export function EventTypeNamespaceToJSON(json: any): EventTypeNamespace {
    return EventTypeNamespaceToJSONTyped(json, false);
}

export function EventTypeNamespaceToJSONTyped(value?: Omit<EventTypeNamespace, 'event_types_url'|'url'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'label': value['label'],
        'name': value['name'],
    };
}

