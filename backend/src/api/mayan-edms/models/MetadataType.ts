/* tslint:disable */
/* eslint-disable */
/**
 * Mayan EDMS API
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MetadataType
 */
export interface MetadataType {
    /**
     * Enter a template to render.
     * @type {string}
     * @memberof MetadataType
     */
    _default?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MetadataType
     */
    readonly id?: number;
    /**
     * Short description of this metadata type.
     * @type {string}
     * @memberof MetadataType
     */
    label: string;
    /**
     * Enter a template to render. Must result in a comma delimited string.
     * @type {string}
     * @memberof MetadataType
     */
    lookup?: string | null;
    /**
     * Name used by other apps to reference this metadata type. Do not use python reserved words, or spaces.
     * @type {string}
     * @memberof MetadataType
     */
    name: string;
    /**
     * The parser will reformat the value entered to conform to the expected format.
     * @type {string}
     * @memberof MetadataType
     */
    parser?: string;
    /**
     * Enter the arguments for the parser in YAML format.
     * @type {string}
     * @memberof MetadataType
     */
    parserArguments?: string;
    /**
     * 
     * @type {string}
     * @memberof MetadataType
     */
    readonly url?: string;
    /**
     * The validator will reject data entry if the value entered does not conform to the expected format.
     * @type {string}
     * @memberof MetadataType
     */
    validation?: string;
    /**
     * Enter the arguments for the validator in YAML format.
     * @type {string}
     * @memberof MetadataType
     */
    validationArguments?: string;
}

/**
 * Check if a given object implements the MetadataType interface.
 */
export function instanceOfMetadataType(value: object): value is MetadataType {
    if (!('label' in value) || value['label'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function MetadataTypeFromJSON(json: any): MetadataType {
    return MetadataTypeFromJSONTyped(json, false);
}

export function MetadataTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MetadataType {
    if (json == null) {
        return json;
    }
    return {
        
        '_default': json['default'] == null ? undefined : json['default'],
        'id': json['id'] == null ? undefined : json['id'],
        'label': json['label'],
        'lookup': json['lookup'] == null ? undefined : json['lookup'],
        'name': json['name'],
        'parser': json['parser'] == null ? undefined : json['parser'],
        'parserArguments': json['parser_arguments'] == null ? undefined : json['parser_arguments'],
        'url': json['url'] == null ? undefined : json['url'],
        'validation': json['validation'] == null ? undefined : json['validation'],
        'validationArguments': json['validation_arguments'] == null ? undefined : json['validation_arguments'],
    };
}

export function MetadataTypeToJSON(json: any): MetadataType {
    return MetadataTypeToJSONTyped(json, false);
}

export function MetadataTypeToJSONTyped(value?: Omit<MetadataType, 'id'|'url'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'default': value['_default'],
        'label': value['label'],
        'lookup': value['lookup'],
        'name': value['name'],
        'parser': value['parser'],
        'parser_arguments': value['parserArguments'],
        'validation': value['validation'],
        'validation_arguments': value['validationArguments'],
    };
}

